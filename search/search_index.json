{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to SurgeScript!","text":""},{"location":"#unleash-your-creativity","title":"Unleash your creativity!","text":"<p>SurgeScript is a scripting language for games. Use it to unleash your creativity and build your own amazing interactive content! It's such a joy to use SurgeScript! You will love it!</p> <p>GET STARTED</p>"},{"location":"#how-do-i-learn-surgescript","title":"How do I learn SurgeScript?","text":"<p>Check out the SurgeScript Crash Course! Additionally, take a look at the video tutorials and at the examples that come with the software.</p>"},{"location":"#surgescript-in-a-nutshell","title":"SurgeScript in a nutshell","text":"<p>SurgeScript is:</p> <ul> <li>A scripting language for games</li> <li>Easy for beginners, powerful for experts</li> <li>Object-oriented, dynamically typed and based on state machines</li> <li>Free and open-source software</li> <li>Built in C, which is nearly universal</li> <li>Named after a really charismatic character: Surge the Rabbit!</li> </ul>"},{"location":"#why-use-surgescript","title":"Why use SurgeScript?","text":"<p>Unlike other programming languages, SurgeScript has been designed with the specific needs of games in mind. Its features include:</p> <ul> <li>The state-machine pattern: objects are state machines, making it easy to create game entities</li> <li>The composition approach: you may design complex objects and behaviors by means of composition</li> <li>The hierarchy system: objects have a parent and may have children, in a tree-like structure</li> <li>The game loop: it's defined implicitly</li> <li>Automatic garbage collection, object tagging and more!</li> </ul> <p>SurgeScript is meant to be used in games and in interactive applications. It's easy to integrate it into existing code, it's easy to extend it, it features a C-like syntax, and it's free and open-source software.</p> <p>SurgeScript has been designed based on the experience of its developer dealing with game engines, applications related to computer graphics and so on. Some of the best practices have been incorporated into the language itself, making things really easy for developers and modders.</p>"},{"location":"#who-created-surgescript","title":"Who created SurgeScript?","text":"<p>SurgeScript has been created by Alexandre Martins, a computer scientist from Brazil. He has also created the Open Surge game engine, hence the name SurgeScript.</p>"},{"location":"download/","title":"Download SurgeScript","text":"<p>There are two ways to get SurgeScript:</p> <ul> <li>The first is to get Open Surge. This is recommended for most users.</li> <li>The second is to get the standalone version of the language.</li> </ul>"},{"location":"download/#open-surge","title":"Open Surge","text":"<p>To get Open Surge, visit opensurge2d.org and follow the instructions there.</p> <p>When you get Open Surge, you also get a full game engine featuring SurgeScript. This allows you to create your own scripts and games with plenty of interactivity and ease.</p> <p>Once you download Open Surge, the next step is to create your first script.</p>"},{"location":"download/#standalone-version","title":"Standalone version","text":"<p>To get the standalone version, go to the SurgeScript page on GitHub. There you'll find instructions on how to compile SurgeScript.</p> <p>When you compile SurgeScript, you'll end up with a text-only program. There are no graphics and no game engine is attached to it. You can try your scripts using the command line.</p> <p>Once you get the standalone version, the next step is to create your first script.</p>"},{"location":"engine/actor/","title":"Actor","text":"<p>The Actor component is used to associate a sprite to a target object. The target object is required to be an entity. It's recommended to use only one actor per entity.</p>"},{"location":"engine/actor/#factory","title":"Factory","text":""},{"location":"engine/actor/#actor_1","title":"Actor","text":"<p><code>Actor(sprite)</code></p> <p>Spawns a new Actor component with the given sprite name.</p> <p>Arguments</p> <ul> <li><code>sprite</code>: string. The name of the sprite (defined in the sprites/ folder).</li> </ul> <p>Returns</p> <p>An Actor component.</p> <p>Example <pre><code>using SurgeEngine.Actor;\n\nobject \"SurgeTest\" is \"entity\"\n{\n    // spawns an Actor with the SurgeTest sprite\n    actor = Actor(\"SurgeTest\");\n\n    state \"main\"\n    {\n    }\n}\n</code></pre></p>"},{"location":"engine/actor/#properties","title":"Properties","text":""},{"location":"engine/actor/#anim","title":"anim","text":"<p><code>anim</code>: number.</p> <p>A shortcut to <code>animation.id</code>: an integer corresponding to the animation number. Defaults to 0.</p>"},{"location":"engine/actor/#animation","title":"animation","text":"<p><code>animation</code>: Animation object, read-only.</p> <p>Reference to the Animation object of the Actor.</p>"},{"location":"engine/actor/#entity","title":"entity","text":"<p><code>entity</code>: object, read-only.</p> <p>The entity associated with this component.</p>"},{"location":"engine/actor/#hflip","title":"hflip","text":"<p><code>hflip</code>: boolean.</p> <p>Should the actor be flipped horizontally? Defaults to <code>false</code>.</p>"},{"location":"engine/actor/#vflip","title":"vflip","text":"<p><code>vflip</code>: boolean.</p> <p>Should the actor be flipped vertically? Defaults to <code>false</code>.</p>"},{"location":"engine/actor/#visible","title":"visible","text":"<p><code>visible</code>: boolean.</p> <p>Should the actor be rendered? Defaults to <code>true</code>.</p>"},{"location":"engine/actor/#alpha","title":"alpha","text":"<p><code>alpha</code>: number.</p> <p>Opacity value, ranging from zero (0% opaque) to one (100% opaque). Defaults to 1.0.</p>"},{"location":"engine/actor/#offset","title":"offset","text":"<p><code>offset</code>: Vector2 object.</p> <p>A (x,y) offset relative to the parent object. Defaults to zero.</p>"},{"location":"engine/actor/#anchor","title":"anchor","text":"<p><code>anchor</code>: Vector2 object.</p> <p>A shortcut to <code>animation.anchor</code>. See also: anchor.</p> <p>Available since: Open Surge 0.6.0</p>"},{"location":"engine/actor/#hotspot","title":"hotSpot","text":"<p><code>hotSpot</code>: Vector2 object.</p> <p>A shortcut to <code>animation.hotSpot</code>. See also: hot spot.</p> <p>Available since: Open Surge 0.6.0. In versions prior to 0.6.0, you may get the hot spot using the Animation object.</p>"},{"location":"engine/actor/#actionspot","title":"actionSpot","text":"<p><code>actionSpot</code>: Vector2 object.</p> <p>A shortcut to <code>animation.actionSpot</code>. See also: action spot.</p> <p>Available since: Open Surge 0.6.0</p>"},{"location":"engine/actor/#actionoffset","title":"actionOffset","text":"<p><code>actionOffset</code>: Vector2 object, read-only.</p> <p>A shortcut to <code>animation.actionOffset</code>. See also: action offset.</p> <p>Available since: Open Surge 0.6.0</p>"},{"location":"engine/actor/#width","title":"width","text":"<p><code>width</code>: number, read-only.</p> <p>The width of the actor.</p>"},{"location":"engine/actor/#height","title":"height","text":"<p><code>height</code>: number, read-only.</p> <p>The height of the actor.</p>"},{"location":"engine/actor/#zindex","title":"zindex","text":"<p><code>zindex</code>: number.</p> <p>Objects with greater zindex are rendered in front of others. Defaults to 0.5.</p>"},{"location":"engine/androidplatform/","title":"AndroidPlatform","text":"<p>Routines specific to Android. The functions below do nothing if the engine is not running on it. In order to determine if the engine is running on Android, check Platform.isAndroid.</p> <p>Available since: Open Surge 0.6.1</p>"},{"location":"engine/androidplatform/#functions","title":"Functions","text":""},{"location":"engine/androidplatform/#sharetext","title":"shareText","text":"<p><code>shareText(text)</code></p> <p>Share a text using the Android Sharesheet, a feature that lets the user pick which app to share data with. You may use it to let the user share a URL with a friend or on social media, for example.</p> <p>Arguments</p> <ul> <li><code>text</code>: string. The text to be shared.</li> </ul> <p>Example</p> <pre><code>using SurgeEngine.Platform;\nusing SurgeEngine.Platform.Android;\n\n// ...\n\nif(Platform.isAndroid)\n    Android.shareText(\"Download the Open Surge Engine at https://opensurge2d.org\");\n</code></pre>"},{"location":"engine/animation/","title":"Animation","text":"<p>Animation objects are used to gather data about specific animations. Although you can't spawn Animation objects directly, you can access them via other objects such as Actor and Player.</p> <p>Example</p> <pre><code>using SurgeEngine.Actor;\n\nobject \"MyExplosion\" is \"entity\", \"disposable\", \"private\"\n{\n    actor = Actor(\"MyExplosion\");\n\n    state \"main\"\n    {\n        if(actor.animation.finished)\n            destroy();\n    }\n}\n</code></pre>"},{"location":"engine/animation/#properties","title":"Properties","text":""},{"location":"engine/animation/#id","title":"id","text":"<p><code>id</code>: number.</p> <p>The number of the animation, defined in a .spr file.</p>"},{"location":"engine/animation/#sprite","title":"sprite","text":"<p><code>sprite</code>: string, read-only.</p> <p>The name of the sprite, defined in a .spr file.</p>"},{"location":"engine/animation/#exists","title":"exists","text":"<p><code>exists</code>: boolean, read-only.</p> <p>Will be <code>true</code> if the animation exists, i.e., if its sprite and its animation number have been defined in a .spr file.</p> <p>Available since: Open Surge 0.5.1</p>"},{"location":"engine/animation/#finished","title":"finished","text":"<p><code>finished</code>: boolean, read-only.</p> <p>Will be <code>true</code> if the animation has finished playing.</p>"},{"location":"engine/animation/#anchor","title":"anchor","text":"<p><code>anchor</code>: Vector2 object, read-only.</p> <p>The hot spot of the animation normalized to [0,1] x [0,1].</p> <p>Available since: Open Surge 0.6.0</p>"},{"location":"engine/animation/#hotspot","title":"hotSpot","text":"<p><code>hotSpot</code>: Vector2 object, read-only.</p> <p>The hot spot of the animation. Coordinates are given in pixels.</p> <p>Note: prior to Open Surge 0.6.0, this property was called <code>hotspot</code>.</p>"},{"location":"engine/animation/#actionspot","title":"actionSpot","text":"<p><code>actionSpot</code>: Vector2 object, read-only.</p> <p>The action spot of the animation. Coordinates are given in pixels. If the sprite is flipped, the action spot is automatically flipped relative to the hot spot of the animation.</p> <p>Available since: Open Surge 0.6.0</p>"},{"location":"engine/animation/#actionoffset","title":"actionOffset","text":"<p><code>actionOffset</code>: Vector2 object, read-only.</p> <p>When this vector is added to the position of the sprite, you'll get the position of the action spot. This is suitable to be used with transform.localPosition.</p> <p>Available since: Open Surge 0.6.0</p>"},{"location":"engine/animation/#repeats","title":"repeats","text":"<p><code>repeats</code>: boolean, read-only.</p> <p>Does the animation repeat itself?</p>"},{"location":"engine/animation/#fps","title":"fps","text":"<p><code>fps</code>: number, read-only.</p> <p>Frames per second of the animation.</p>"},{"location":"engine/animation/#framecount","title":"frameCount","text":"<p><code>frameCount</code>: number, read-only.</p> <p>The number of frames of the animation.</p>"},{"location":"engine/animation/#duration","title":"duration","text":"<p><code>duration</code>: number, read-only.</p> <p>The duration of the animation, in seconds.</p> <p>Available since: Open Surge 0.6.1</p>"},{"location":"engine/animation/#frame","title":"frame","text":"<p><code>frame</code>: number.</p> <p>The current frame of the animation: an integer between <code>0</code> and <code>frameCount - 1</code>, inclusive.</p>"},{"location":"engine/animation/#speedfactor","title":"speedFactor","text":"<p><code>speedFactor</code>: number.</p> <p>While the FPS rate controls the speed of the animation, the speed factor gives you an additional degree of control. This is a multiplier that defaults to 1.0, meaning that the animation will run using its normal speed. If it's set to 2.0, it will run using twice that speed. A value of 0.5 means half the speed, and so on.</p>"},{"location":"engine/animation/#sync","title":"sync","text":"<p><code>sync</code>: boolean.</p> <p>Is the animation is synchronized? A synchronized animation is a repeating animation that displays the same frame across multiple sprites. Defaults to <code>false</code>.</p>"},{"location":"engine/animation/#functions","title":"Functions","text":""},{"location":"engine/animation/#prop","title":"prop","text":"<p><code>prop(propertyName)</code></p> <p>Read the user-defined custom property named <code>propertyName</code> defined in a custom_properties block of the sprite of this animation (.spr file). If the property exists, this function will return a string, a number, a boolean, or an Array of these, depending on the property. If the property does not exist, this function will return <code>null</code>.</p> <p>Available since: Open Surge 0.6.1</p> <p>Arguments</p> <ul> <li><code>propertyName</code>: string. The name of a custom property.</li> </ul> <p>Returns</p> <p>Returns a string, a number, a boolean, an array of these primitive types with at least two elements, or <code>null</code>.</p> <p>Example</p> <pre><code>/*\n\nExample of a custom_properties block:\n\n// .spr file\nsprite \"My Test Sprite\"\n{\n    // ...\n\n    custom_properties\n    {\n        number_of_layers        8\n        want_awesomeness        true\n        font_name               \"GoodNeighbors\"\n        position                100 200\n    }\n}\n\n*/\n\n// It's a good idea to cast the value of the property to the expected type, so\n// that your script will work reliably regardless of what is in the .spr file!\n\nanimation = actor.animation;\n\nnumberOfLayers = Number(animation.prop(\"number_of_layers\")); // 8\nwantAwesomeness = Boolean(animation.prop(\"want_awesomeness\")); // true\nfontName = String(animation.prop(\"font_name\") || \"Default Font Name\"); // \"GoodNeighbors\"\nfoobar = String(animation.prop(\"foobar\") || \"undefined\"); // \"undefined\"\n\nposition = animation.prop(\"position\");\nif(typeof position == \"object\") {\n    xpos = Number(position[0]); // 100\n    ypos = Number(position[1]); // 200\n}\nelse {\n    xpos = 0;\n    ypos = 0;\n}\n</code></pre>"},{"location":"engine/animation/#findtransform","title":"findTransform","text":"<p><code>findTransform()</code></p> <p>When a keyframe-based animation is playing, compute an approximation of the transformation applied to the sprite at the current time. You may use this function to make objects follow the transformed sprite or to know its location. If no keyframe-based animation is currently playing, the identity transform will be returned.</p> <p>Available since: Open Surge 0.6.1</p> <p>Returns</p> <p>Returns a Transform object.</p> <p>Example</p> <pre><code>animationTransform = animation.findTransform();\nConsole.print(animationTransform.localPosition);\n</code></pre>"},{"location":"engine/behavior/","title":"Behavior","text":"<p>A behavior is an object that, when spawned as a child of an entity, adds a specific behavior to that entity. Example: you can add a behavior to give a Directional Movement to an entity, so you don't need to code that movement yourself. Although the use of behaviors is not mandatory, they greatly simplify the development of your entities.</p> <p>An important aspect of using behaviors is that you can create your own. You can also reuse them in many of your entities and share them with others. Behavior objects should be built in a generic way, so that they can be reused throughout multiple entities.</p> <p>Behavior objects must be tagged behavior and are supposed to be spawned as direct children of entities. They should also implement the protocol (properties, methods) described below. The engine provides a few behaviors by default, and they have been documented in this manual.</p> <p>Example</p> <pre><code>//\n// The example below shows an entity with 2 behaviors:\n//\n// - Enemy: it makes the entity behave like an enemy\n//   (it can hit the player, or be defeated)\n//\n// - DirectionalMovement: it makes the entity move\n//   in a certain direction, with a certain speed\n//\nusing SurgeEngine.Actor;\nusing SurgeEngine.Vector2;\nusing SurgeEngine.Behaviors.Enemy;\nusing SurgeEngine.Behaviors.DirectionalMovement;\n\n// Mosquito is a flying baddie\nobject \"Mosquito\" is \"entity\", \"enemy\"\n{\n    actor = Actor(\"Mosquito\");\n    enemy = Enemy();\n    movement = DirectionalMovement();\n\n    state \"main\"\n    {\n        actor.hflip = true; // flip the sprite horizontally\n        movement.direction = Vector2.left;\n        movement.speed = 60;\n    }\n}\n</code></pre>"},{"location":"engine/behavior/#properties","title":"Properties","text":""},{"location":"engine/behavior/#entity","title":"entity","text":"<p><code>entity</code>: object, read-only.</p> <p>The entity associated with this behavior. This is a convenient alias to the parent object.</p>"},{"location":"engine/behavior/#enabled","title":"enabled","text":"<p><code>enabled</code>: boolean.</p> <p>Is the behavior enabled? The default value is <code>true</code>, i.e., behaviors are enabled by default.</p>"},{"location":"engine/brick/","title":"Brick","text":"<p>The Brick component is used to create brick-like objects, or bricks endowed with scripting capabilities. This allows you to create elevators, conditional barriers (e.g., doors), movable platforms with custom trajectories, and much more.</p> <p>The Brick component only affects collisions. The object that uses it is required to be an entity. This component won't do any rendering. Therefore, it's typically used in conjunction with the Actor component.</p> <p>Example <pre><code>using SurgeEngine.Actor;\nusing SurgeEngine.Brick;\n\nobject \"On/Off Platform\" is \"entity\"\n{\n    actor = Actor(\"On/Off Platform\"); // for rendering\n    brick = Brick(\"On/Off Platform\"); // for collision\n\n    state \"main\"\n    {\n        if(timeout(2.0)) {\n            brick.enabled = false;\n            actor.visible = false;\n            state = \"disabled\";\n        }\n    }\n\n    state \"disabled\"\n    {\n        if(timeout(2.0)) {\n            brick.enabled = true;\n            actor.visible = true;\n            state = \"main\";\n        }\n    }\n}\n</code></pre></p>"},{"location":"engine/brick/#factory","title":"Factory","text":""},{"location":"engine/brick/#brick_1","title":"Brick","text":"<p><code>Brick(spriteName)</code></p> <p>Spawns a new Brick component. Just like regular bricks, a Brick component has a collision mask associated with it. By default, the collision mask will be computed according to the animation 0 of the sprite named <code>spriteName</code>. </p> <p>Arguments</p> <ul> <li><code>spriteName</code>: string. The name of a sprite.</li> </ul> <p>Returns</p> <p>A new Brick component.</p>"},{"location":"engine/brick/#properties","title":"Properties","text":""},{"location":"engine/brick/#enabled","title":"enabled","text":"<p><code>enabled</code>: boolean.</p> <p>Whether the Brick component should affect collisions or not. Defaults to <code>true</code>.</p>"},{"location":"engine/brick/#type","title":"type","text":"<p><code>type</code>: string.</p> <p>The type of the Brick component specifies how it affects collisions. This value must be either \"solid\" or \"cloud\". Defaults to \"solid\".</p>"},{"location":"engine/brick/#layer","title":"layer","text":"<p><code>layer</code>: string.</p> <p>Should the Brick component be tied to a specific layer? If so, which layer? This value must be one of the following: \"green\", \"yellow\", \"default\". Defaults to \"default\".</p>"},{"location":"engine/brick/#offset","title":"offset","text":"<p><code>offset</code>: Vector2 object.</p> <p>A (x,y) offset relative to the parent object. Defaults to zero.</p>"},{"location":"engine/camera/","title":"Camera","text":"<p>The Camera object can be used to control what content, in world space, is rendered to the screen. The Camera is represented by a 2-dimensional point in world space that is mapped to the center of the screen.</p> <p>Detached entities</p> <p>Entities tagged \"detached\" do not follow the camera. They are rendered in screen space, not in world space. This is useful for creating HUD elements (Heads-Up Display). Read more about entities.</p> <p>Example</p> <pre><code>// Import the Camera object\nusing SurgeEngine.Camera;\n\n// Reading the Camera status\n// This object prints the position of the camera at every second\nobject \"Camera Status\" is \"awake\", \"entity\"\n{\n    state \"main\"\n    {\n        if(timeout(1))\n            state = \"print\";\n    }\n\n    state \"print\"\n    {\n        Console.print(Camera.position);\n        state = \"main\";\n    }\n}\n</code></pre>"},{"location":"engine/camera/#properties","title":"Properties","text":""},{"location":"engine/camera/#position","title":"position","text":"<p><code>position</code>: Vector2 object.</p> <p>The position of the camera in world space.</p> <p>Tip</p> <p>Use lateUpdate when changing the position of the camera.</p> <p>Example <pre><code>using SurgeEngine.Camera;\nusing SurgeEngine.Player;\n\nobject \"My Simple Camera\" is \"awake\", \"entity\"\n{\n    fun lateUpdate()\n    {\n        player = Player.active;\n        Camera.position = player.transform.position;\n    }\n}\n</code></pre></p>"},{"location":"engine/camera/#locked","title":"locked","text":"<p><code>locked</code>: boolean, read-only.</p> <p>Is the camera locked to a certain area in space? Defaults to <code>false</code>.</p>"},{"location":"engine/camera/#functions","title":"Functions","text":""},{"location":"engine/camera/#lock","title":"lock","text":"<p><code>lock(left, top, right, bottom)</code></p> <p>Locks the camera to a certain rectangular area in space. All coordinates are given in pixels and represent the boundaries of the rectangular area. They are such that <code>left</code> &lt;= <code>right</code> and <code>top</code> &lt;= <code>bottom</code>.</p> <p>Arguments</p> <ul> <li><code>left</code>: number. A x-coordinate in world space.</li> <li><code>top</code>: number. A y-coordinate in world space.</li> <li><code>right</code>: number. A x-coordinate in world space.</li> <li><code>bottom</code>: number. A y-coordinate in world space.</li> </ul>"},{"location":"engine/camera/#unlock","title":"unlock","text":"<p><code>unlock()</code></p> <p>Unlocks the camera. If unlocked, the camera moves freely throughout the space.</p>"},{"location":"engine/camera/#worldtoscreen","title":"worldToScreen","text":"<p><code>worldToScreen(position)</code></p> <p>Converts <code>position</code> from world space to screen space. Screen coordinates are given in pixels. (0,0) is the top-left of the screen and (Screen.width,Screen.height) is the bottom-right.</p> <p>Available since: Open Surge 0.5.1</p> <p>Arguments</p> <ul> <li><code>position</code>: Vector2 object. The position to be converted.</li> </ul> <p>Returns</p> <p>Returns a Vector2 object corresponding to the converted coordinates.</p>"},{"location":"engine/camera/#screentoworld","title":"screenToWorld","text":"<p><code>screenToWorld(position)</code></p> <p>Converts <code>position</code> from screen space to world space. Screen coordinates are given in pixels. (0,0) is the top-left of the screen and (Screen.width,Screen.height) is the bottom-right.</p> <p>Available since: Open Surge 0.5.1</p> <p>Arguments</p> <ul> <li><code>position</code>: Vector2 object. The position to be converted.</li> </ul> <p>Returns</p> <p>Returns a Vector2 object corresponding to the converted coordinates.</p>"},{"location":"engine/circular_movement/","title":"Circular Movement","text":"<p>The Circular Movement behavior makes the associated entity perform a circular orbit on the 2D plane. Its basic parameters are:</p> <ul> <li>A radius, given in pixels</li> <li>A movement rate, given in cycles per second</li> </ul> <p>Other parameters include: a movement scale in both X and Y axes (making it an elliptic orbit), a flag telling whether the movement should be clockwise or not, and so on.</p> <p>Example</p> <pre><code>//\n// The example below shows how to make an entity move along\n// a circle of 128 pixels of radius at a rate of 0.25 cycles\n// per second (i.e., it takes one second to complete 25% of\n// a cycle, or 4 seconds to complete a cycle)\n//\nusing SurgeEngine.Actor;\nusing SurgeEngine.Vector2;\nusing SurgeEngine.Behaviors.CircularMovement;\n\nobject \"Simple Ball\" is \"entity\"\n{\n    actor = Actor(\"Simple Ball\");\n    movement = CircularMovement();\n\n    state \"main\"\n    {\n        movement.radius = 128;\n        movement.rate = 0.25;\n        //movement.scale = Vector2.up; // uncomment to move along the y-axis only\n    }\n}\n</code></pre>"},{"location":"engine/circular_movement/#factory","title":"Factory","text":""},{"location":"engine/circular_movement/#behaviorscircularmovement","title":"Behaviors.CircularMovement","text":"<p><code>CircularMovement()</code></p> <p>Spawns a CircularMovement.</p> <p>Returns</p> <p>A CircularMovement object.</p>"},{"location":"engine/circular_movement/#properties","title":"Properties","text":""},{"location":"engine/circular_movement/#radius","title":"radius","text":"<p><code>radius</code>: number.</p> <p>The radius of the movement, in pixels.</p>"},{"location":"engine/circular_movement/#rate","title":"rate","text":"<p><code>rate</code>: number.</p> <p>The rate of the movement, given in cycles per second.</p>"},{"location":"engine/circular_movement/#clockwise","title":"clockwise","text":"<p><code>clockwise</code>: boolean.</p> <p>Indicates whether the movement is clockwise (<code>true</code>) or counterclockwise (<code>false</code>). Defaults to <code>false</code>.</p>"},{"location":"engine/circular_movement/#scale","title":"scale","text":"<p><code>scale</code>: Vector2 object.</p> <p>Specifies the scale of the movement in both X and Y axes. It is used to distort the circle. <code>Vector2(1, 1)</code> means no distortion (default).</p>"},{"location":"engine/circular_movement/#center","title":"center","text":"<p><code>center</code>: Vector2 object | <code>null</code>.</p> <p>If not <code>null</code>, forces the center of the movement to be at a particular position in world space. Defaults to <code>null</code>.</p>"},{"location":"engine/circular_movement/#phaseoffset","title":"phaseOffset","text":"<p><code>phaseOffset</code>: number.</p> <p>A value in degrees that offsets the current phase. Defaults to zero (180 means opposite phase relative to zero).</p>"},{"location":"engine/circular_movement/#phase","title":"phase","text":"<p><code>phase</code>: number, read-only.</p> <p>A value in degrees that indicates the current phase of the movement.</p>"},{"location":"engine/collider/","title":"Collider","text":"<p>A collider, or collision object, is used to detect collisions. There are different types of colliders, each with a different shape. They are usually centered on the hot spot of sprites, but that can be changed by altering their anchor.</p> <p>Colliders must be spawned as children of entities. To detect collisions, you may implement function <code>onCollision()</code> on the entity (see the example below), or use the colliders directly. Additionally, a single entity may have multiple colliders attached to it. This allows users to work with more complex shapes than simple primitives.</p> <p>A collider is an abstract concept, and hence can't be spawned directly. Rather, you can spawn colliders of specific shapes, such as CollisionBox and CollisionBall. All Colliders share some functionalities (detailed in this page), but there are functionalities tied to specific shapes.</p> <p>Example</p> <pre><code>using SurgeEngine.Actor;\nusing SurgeEngine.Player;\nusing SurgeEngine.Collisions.CollisionBall;\n\nobject \"CollisionDoll\" is \"entity\"\n{\n    actor = Actor(\"CollisionDoll\");\n    collider = CollisionBall(25); // ball with radius = 25px\n\n    // The player has a built-in collider\n    // Let's make it visible for debugging\n    state \"main\"\n    {\n        player = Player.active;\n        player.collider.visible = true;\n        collider.visible = true;\n    }\n\n    // Detect collisions between a collider that is a child\n    // of this object and any other collider in the game\n    fun onCollision(otherCollider)\n    {\n        // A collision has occurred.\n        Console.print(\"Collided with something\");\n\n        // Collided with a player?\n        if(otherCollider.entity.hasTag(\"player\")) {\n            player = otherCollider.entity;\n            Console.print(\"Touched \" + player.name);\n        }\n    }\n\n    // While onCollision() catches the moment a collision\n    // first occurs, onOverlap() is called every frame\n    // this collider collides with other collider\n    fun onOverlap(otherCollider)\n    {\n        // This function is optional.\n    }\n}\n</code></pre>"},{"location":"engine/collider/#properties","title":"Properties","text":""},{"location":"engine/collider/#entity","title":"entity","text":"<p><code>entity</code>: object, read-only.</p> <p>The Entity associated with this collider.</p>"},{"location":"engine/collider/#enabled","title":"enabled","text":"<p><code>enabled</code>: boolean.</p> <p>Is the collider enabled? A collider that is not enabled will not notify the parent object if a collision occurs. The default value is <code>true</code>, i.e., colliders are enabled by default.</p>"},{"location":"engine/collider/#visible","title":"visible","text":"<p><code>visible</code>: boolean.</p> <p>Is the collider visible? This is useful for debugging. The default value is <code>false</code>.</p>"},{"location":"engine/collider/#anchor","title":"anchor","text":"<p><code>anchor</code>: Vector2 object.</p> <p>The anchor of the collider. See also: setAnchor.</p> <p>Available since: Open Surge 0.6.0</p>"},{"location":"engine/collider/#functions","title":"Functions","text":""},{"location":"engine/collider/#collideswith","title":"collidesWith","text":"<p><code>collidesWith(collider)</code></p> <p>Checks if this collider is colliding with some other collider.</p> <p>Arguments</p> <ul> <li><code>collider</code>: Collider object. The other collider.</li> </ul> <p>Returns</p> <p>Returns <code>true</code> if there is a collision (the colliders overlap), or <code>false</code> otherwise.</p>"},{"location":"engine/collider/#contains","title":"contains","text":"<p><code>contains(point)</code></p> <p>Checks if the collider contains the given point, given in world coordinates.</p> <p>Arguments</p> <ul> <li><code>point</code>: Vector2 object. The point to be tested.</li> </ul> <p>Returns</p> <p>Returns <code>true</code> if the point is contained in the collider, or <code>false</code> otherwise.</p>"},{"location":"engine/collider/#setanchor","title":"setAnchor","text":"<p><code>setAnchor(x, y)</code></p> <p>Defines the anchor of the collider to be (<code>x</code>, <code>y</code>), where these values are (usually) numbers between 0.0 and 1.0. Imagine a bounding box of the collider. Point (0.5, 0.5) is the default, representing its center. Point (0.0, 0.0) is the top-left and (1,0, 1.0), the bottom-right. The anchor of the collider will be aligned to the hot spot of the sprite of the entity. See also: anchor.</p> <p>Arguments</p> <ul> <li><code>x</code>: number. Usually a value between 0.0 and 1.0.</li> <li><code>y</code>: number. Usually a value between 0.0 and 1.0.</li> </ul> <p>Returns</p> <p>Returns the collider itself.</p> <p>Example</p> <pre><code>// ...\nusing SurgeEngine.Collisions.CollisionBox;\n\nobject \"CollisionTestObject\" is \"entity\"\n{\n    // see that the following collision box\n    // has its anchor on pixel (16, 64)\n    collider = CollisionBox(32, 64).setAnchor(0.5, 1.0);\n\n    // ...\n}\n</code></pre>"},{"location":"engine/collisionball/","title":"CollisionBall","text":"<p>A CollisionBall is a special type of Collider that takes the shape of a ball. In 2D space, this is a circle with a specific radius. All functions and properties of Collider apply to this.</p> <p>Example</p> <pre><code>using SurgeEngine.Actor;\nusing SurgeEngine.Collisions.CollisionBall;\n\nobject \"CollisionDoll\" is \"entity\"\n{\n    actor = Actor(\"CollisionDoll\");\n    collider = CollisionBall(25); // radius = 25px\n\n    state \"main\"\n    {\n        collider.visible = true; // useful for debugging\n    }\n\n    fun onCollision(otherCollider)\n    {\n        Console.print(\"A collision has occurred.\");\n    }\n}\n</code></pre>"},{"location":"engine/collisionball/#factory","title":"Factory","text":""},{"location":"engine/collisionball/#collisionscollisionball","title":"Collisions.CollisionBall","text":"<p><code>Collisions.CollisionBall(radius)</code></p> <p>Spawns a new CollisionBall with the specified radius, in pixels.</p> <p>Arguments</p> <ul> <li><code>radius</code>: number. The radius of the CollisionBall.</li> </ul> <p>Returns</p> <p>A new CollisionBall with the specified radius.</p>"},{"location":"engine/collisionball/#properties","title":"Properties","text":""},{"location":"engine/collisionball/#center","title":"center","text":"<p><code>center</code>: Vector2, read-only.</p> <p>The center of the CollisionBall, in world space.</p>"},{"location":"engine/collisionball/#radius","title":"radius","text":"<p><code>radius</code>: number.</p> <p>The radius of the CollisionBall, in pixels.</p>"},{"location":"engine/collisionbox/","title":"CollisionBox","text":"<p>A CollisionBox is a special type of Collider that takes the shape of a box. In 2D space, this is a rectangle with a specific width and height. All functions and properties of Collider apply to this.</p> <p>Example</p> <pre><code>using SurgeEngine.Actor;\nusing SurgeEngine.Collisions.CollisionBox;\n\nobject \"CollisionDoll\" is \"entity\"\n{\n    actor = Actor(\"CollisionDoll\");\n    collider = CollisionBox(32, 64); // width = 32px, height = 64px\n\n    state \"main\"\n    {\n        collider.visible = true; // useful for debugging\n    }\n\n    fun onCollision(otherCollider)\n    {\n        Console.print(\"A collision has occurred.\");\n    }\n}\n</code></pre>"},{"location":"engine/collisionbox/#factory","title":"Factory","text":""},{"location":"engine/collisionbox/#collisionscollisionbox","title":"Collisions.CollisionBox","text":"<p><code>Collisions.CollisionBox(width, height)</code></p> <p>Spawns a new CollisionBox with the specified dimensions, in pixels.</p> <p>Arguments</p> <ul> <li><code>width</code>: number. The width of the CollisionBox.</li> <li><code>height</code>: number. The height of the CollisionBox.</li> </ul> <p>Returns</p> <p>A new CollisionBox with the specified dimensions.</p>"},{"location":"engine/collisionbox/#properties","title":"Properties","text":""},{"location":"engine/collisionbox/#width","title":"width","text":"<p><code>width</code>: number.</p> <p>The width of the CollisionBox, in pixels.</p>"},{"location":"engine/collisionbox/#height","title":"height","text":"<p><code>height</code>: number.</p> <p>The height of the CollisionBox, in pixels.</p>"},{"location":"engine/collisionbox/#center","title":"center","text":"<p><code>center</code>: Vector2, read-only.</p> <p>The center of the CollisionBox, in world space.</p>"},{"location":"engine/collisionbox/#top","title":"top","text":"<p><code>top</code>: number, read-only.</p> <p>The y-coordinate of the top border of the CollisionBox, in world space.</p>"},{"location":"engine/collisionbox/#right","title":"right","text":"<p><code>right</code>: number, read-only.</p> <p>The x-coordinate of the right border of the CollisionBox, in world space.</p>"},{"location":"engine/collisionbox/#bottom","title":"bottom","text":"<p><code>bottom</code>: number, read-only.</p> <p>The y-coordinate of the bottom border of the CollisionBox, in world space.</p>"},{"location":"engine/collisionbox/#left","title":"left","text":"<p><code>left</code>: number, read-only.</p> <p>The x-coordinate of the left border of the CollisionBox, in world space.</p>"},{"location":"engine/delayedevent/","title":"DelayedEvent","text":"<p>A DelayedEvent is an event that, when triggered, triggers another event after a specified time has passed.</p>"},{"location":"engine/delayedevent/#factory","title":"Factory","text":""},{"location":"engine/delayedevent/#eventsdelayedevent","title":"Events.DelayedEvent","text":"<p><code>Events.DelayedEvent(event)</code></p> <p>Spawns a DelayedEvent.</p> <p>Arguments</p> <ul> <li><code>event</code>: event object. The event to be delayed.</li> </ul> <p>Returns</p> <p>A new DelayedEvent that, when triggered, will trigger the specified event after a delay.</p> <p>Example</p> <pre><code>// This is a level setup object. Make sure to link it in your .lev file!\nusing SurgeEngine.Level;\nusing SurgeEngine.Events.EventList;\nusing SurgeEngine.Events.DelayedEvent;\nusing SurgeEngine.Events.FunctionEvent;\n\nobject \"My Level Setup\"\n{\n    fun constructor()\n    {\n        Level.setup({\n            \"Event Trigger 1\": {\n                \"onTrigger\": EventList([\n                    FunctionEvent(\"Print\").withArgument(\"Hello!\"),\n                    DelayedEvent(\n                        FunctionEvent(\"Print\").withArgument(\"This is...\")\n                    ).willWait(2.0), // wait 2 seconds before triggering this\n                    DelayedEvent(\n                        FunctionEvent(\"Print\").withArgument(\"SurgeScript!\")\n                    ).willWait(4.0) // wait 4 seconds before triggering this\n                ])\n            }\n        });\n    }\n}\n</code></pre>"},{"location":"engine/delayedevent/#functions","title":"Functions","text":""},{"location":"engine/delayedevent/#willwait","title":"willWait","text":"<p><code>willWait(seconds)</code></p> <p>Set the delay to trigger the event.</p> <p>Arguments</p> <p><code>seconds</code>: number. The delay, in seconds.</p> <p>Returns</p> <p>The DelayedEvent object.</p>"},{"location":"engine/delayedevent/#call","title":"call","text":"<p><code>call()</code></p> <p>Triggers the event.</p>"},{"location":"engine/directional_movement/","title":"Directional Movement","text":"<p>The Directional Movement behavior makes the associated entity perform a directional movement on the 2D plane. It features:</p> <ul> <li>A direction vector that specifies the direction of the movement</li> <li>A movement speed, a scalar value given in pixels per second</li> </ul> <p>You may control the direction of the movement using the direction vector or an angle given in degrees. Additionally, you may control the speed of the movement simply by changing its value.</p> <p>Directional Movement is very versatile. You can use it to implement many things: different types of baddies, flying objects, racing cars viewed from a top-down view, simple projectiles, and much more.</p> <p>Example</p> <pre><code>//\n// The example below shows how to make an entity move to the\n// right of the screen at a rate of 60 pixels per second\n//\nusing SurgeEngine.Actor;\nusing SurgeEngine.Vector2;\nusing SurgeEngine.Behaviors.DirectionalMovement;\n\nobject \"Simple Ball\" is \"entity\"\n{\n    actor = Actor(\"Simple Ball\");\n    movement = DirectionalMovement();\n\n    state \"main\"\n    {\n        movement.direction = Vector2.right;\n        movement.speed = 60;\n    }\n}\n</code></pre>"},{"location":"engine/directional_movement/#factory","title":"Factory","text":""},{"location":"engine/directional_movement/#behaviorsdirectionalmovement","title":"Behaviors.DirectionalMovement","text":"<p><code>DirectionalMovement()</code></p> <p>Spawns a DirectionalMovement.</p> <p>Returns</p> <p>A DirectionalMovement object.</p>"},{"location":"engine/directional_movement/#properties","title":"Properties","text":""},{"location":"engine/directional_movement/#speed","title":"speed","text":"<p><code>speed</code>: number.</p> <p>The speed of the movement, in pixels per second.</p>"},{"location":"engine/directional_movement/#direction","title":"direction","text":"<p><code>direction</code>: Vector2 object.</p> <p>The direction of the movement.</p>"},{"location":"engine/directional_movement/#angle","title":"angle","text":"<p><code>angle</code>: number.</p> <p>The counterclockwise angle of the direction vector, in degrees. 0 means right, 90 means up, etc.</p>"},{"location":"engine/enemy/","title":"Enemy","text":"<p>The Enemy behavior makes the associated entity behave like an enemy. It will hit the player if touched, unless the player is attacking (jumping, rolling, etc.) In this case the enemy will be destroyed with an explosion, giving the player a certain score.</p> <p>Although the Enemy object generates the described behavior, it is not a concrete enemy itself. You may use it to script your own baddies.</p> <p>Example</p> <pre><code>//\n// HOW TO SCRIPT A BADDIE:\n//\n// 0. Make sure you have the graphics and the sprite file (.spr) ready,\n//    before you begin with SurgeScript\n// 1. Your object should be tagged (at least): \"entity\", \"enemy\"\n// 2. Spawn an Actor for the graphics and an Enemy object for the behavior.\n//\nusing SurgeEngine.Actor;\nusing SurgeEngine.Behaviors.Enemy;\nusing SurgeEngine.Behaviors.Platformer;\n\nobject \"My Baddie\" is \"entity\", \"enemy\"\n{\n    actor = Actor(\"My Baddie\"); // handles the graphics\n    enemy = Enemy(); // handles the behavior\n    platformer = Platformer().walk(); // make it walk\n\n    state \"main\"\n    {\n        enemy.score = 100;\n    }\n}\n</code></pre> <p>Optionally, you may define functions <code>onEnemyAttack(player)</code> and <code>onEnemyDestroy(player)</code> in your entity if you want to catch the events: the enemy has attacked a player and the enemy has been destroyed by the player, respectively.</p>"},{"location":"engine/enemy/#factory","title":"Factory","text":""},{"location":"engine/enemy/#behaviorsenemy","title":"Behaviors.Enemy","text":"<p><code>Enemy()</code></p> <p>Spawns an Enemy behavior.</p> <p>Returns</p> <p>An Enemy behavior object.</p>"},{"location":"engine/enemy/#properties","title":"Properties","text":""},{"location":"engine/enemy/#score","title":"score","text":"<p><code>score</code>: number.</p> <p>The score given to the player when the enemy is defeated.</p>"},{"location":"engine/enemy/#invincible","title":"invincible","text":"<p><code>invincible</code>: boolean.</p> <p>Is the enemy invincible? An invincible enemy hits the player even when jumping, rolling, etc. - except if the player is also invincible. Defaults to <code>false</code>.</p>"},{"location":"engine/enemy/#collider","title":"collider","text":"<p><code>collider</code>: Collider object, read-only.</p> <p>A collider associated with the enemy.</p>"},{"location":"engine/enemy/#functions","title":"Functions","text":""},{"location":"engine/enemy/#kill","title":"kill","text":"<p><code>kill(player)</code></p> <p>Destroys the enemy with an explosion, giving score to <code>player</code>.</p> <p>Available since: Open Surge 0.5.1. See the note below.</p> <p>Arguments</p> <ul> <li><code>player</code>: Player object. The player who defeats the enemy.</li> </ul> <p>Note: in versions prior to 0.5.1, this function was called <code>getDestroyed</code>.</p>"},{"location":"engine/enemy/#setbounds","title":"setBounds","text":"<p><code>setBounds(left, top, right, bottom)</code></p> <p>Set the boundaries of the collider. All coordinates, given in pixels, are relative to the hot spot of the entity. These boundaries are computed automatically, but you may use this function if you need to adjust them.</p> <p>Arguments</p> <ul> <li><code>left</code>: number. Given in pixels.</li> <li><code>top</code>: number. Given in pixels.</li> <li><code>right</code>: number. Given in pixels.</li> <li><code>down</code>: number. Given in pixels.</li> </ul> <p>Returns</p> <p>Returns the Enemy behavior itself.</p>"},{"location":"engine/entity/","title":"Entity","text":"<p>An entity is an object that generally is present in the virtual world. Examples include: a pickup item, a gimmick, a non-playable-character, and so on. Entites have special treatment:</p> <ul> <li>Entities can have components associated to it. They can be fully customized.</li> <li>By default, they are automatically disabled and moved back to their initial position in the world if they get too far off camera.</li> <li>Behavior can be changed by adding special tags them.</li> <li>The engine will automatically call special functions if you define them.</li> </ul> <p>Definition</p> <p>A SurgeScript object is considered to be an entity if it meets all of the following conditions:</p> <ol> <li>the object is tagged \"entity\"</li> <li>the object is a direct child of Level or a direct child of another entity</li> </ol> <p>Objects that are direct children of entities but that are not tagged \"entity\" are considered to be components. Components are meant to modify the entities in some way.</p> <p>Components may not have any entities as descendants. For example: a child of a component is not considered to be an entity, even if it's tagged \"entity\".</p> <p>Level setup objects and player companion objects are special cases. They are always considered to be entities, regardless if they are tagged \"entity\" or not, for backwards compatibility purposes.</p> <p>Tip</p> <p>During level design, entities may be placed in world space using the editor palette. The icon of the entity will be the first animation (animation 0) of the sprite that has the name of the entity.</p>"},{"location":"engine/entity/#tags","title":"Tags","text":""},{"location":"engine/entity/#entity_1","title":"entity","text":"<p>Mark the object as an entity.</p> <pre><code>// In the example below, entity \"My Explosion\" has an Actor\n// component that gives it visible form: a sprite.\nusing SurgeEngine.Actor;\n\nobject \"My Explosion\" is \"entity\", \"private\", \"disposable\"\n{\n    actor = Actor(\"My Explosion\");\n\n    state \"main\"\n    {\n        if(actor.animation.finished)\n            destroy();\n    }\n}\n</code></pre>"},{"location":"engine/entity/#private","title":"private","text":"<p>Private entities cannot be spawned via the level editor - they will be hidden.</p>"},{"location":"engine/entity/#awake","title":"awake","text":"<p>Don't disable the object nor move it back to its initial position if it gets too far off camera.</p> <p>Performance tip</p> <p>The engine optimizes entities that are not awake by \"putting them to sleep\" whenever they are too far off camera. Take advantage of this optimization by not making your entities awake unless you need to.</p>"},{"location":"engine/entity/#disposable","title":"disposable","text":"<p>The engine will automatically destroy the object if it gets too far off camera.</p>"},{"location":"engine/entity/#detached","title":"detached","text":"<p>The object will not follow the camera. It will be rendered in screen space.</p> <p>Effectively detached entities</p> <p>If a non-detached entity is a descendant of a detached entity, the former is effetively detached. Effectively detached entites are rendered just like detached entities. (since 0.6.1)</p>"},{"location":"engine/entity/#functions","title":"Functions","text":""},{"location":"engine/entity/#lateupdate","title":"lateUpdate","text":"<p><code>lateUpdate()</code></p> <p>If <code>lateUpdate()</code> is implemented in your entity, it will be called after all other objects have been updated. This handy function helps order script execution. For example: a routine that controls the Camera should be implemented in <code>lateUpdate()</code>, since it's guaranteed to be executed after other entities have been updated.</p> <p>Available since: Open Surge 0.6.1</p> <p>Example <pre><code>using SurgeEngine.Camera;\nusing SurgeEngine.Player;\n\nobject \"My Simple Camera\" is \"awake\", \"entity\"\n{\n    fun lateUpdate()\n    {\n        player = Player.active;\n        Camera.position = player.transform.position;\n    }\n}\n</code></pre></p>"},{"location":"engine/entity/#onreset","title":"onReset","text":"<p><code>onReset()</code></p> <p>If an entity that is not awake nor detached gets too far off camera, it will be automatically disabled and moved back to its initial position. Whenever that happens, the engine will call this function if it's available in your entity. You may use this function to reset the entity back to its initial state.</p> <p>Note</p> <p>Entities tagged \"awake\" or \"detached\" are not affected by <code>onReset()</code>.</p> <p>Example <pre><code>using SurgeEngine.UI.Text;\n\n// The object below is a simple counter that gets\n// reseted whenever it gets too far off camera.\nobject \"My Test Counter\" is \"entity\"\n{\n    label = Text(\"default\");\n    counter = 0;\n\n    state \"main\"\n    {\n        Console.print(\"Starting the counter...\");\n        state = \"wait\";\n    }\n\n    state \"wait\"\n    {\n        label.text = counter;\n        if(timeout(1.0))\n            state = \"increment\";\n    }\n\n    state \"increment\"\n    {\n        counter++;\n        state = \"wait\";\n    }\n\n    // Without implementing function onReset() below,\n    // the counter would retain its state.\n    fun onReset()\n    {\n        counter = 0;\n        state = \"main\";\n    }\n}\n</code></pre></p>"},{"location":"engine/entity/#onleaveeditor","title":"onLeaveEditor","text":"<p><code>onLeaveEditor()</code></p> <p>If declared, function <code>onLeaveEditor()</code> will be called whenever the player leaves the level editor and returns to the game. This may be useful to reconfigure your objects.</p>"},{"location":"engine/entityevent/","title":"EntityEvent","text":"<p>An EntityEvent is an event that calls a function of an entity when triggered.</p>"},{"location":"engine/entityevent/#factory","title":"Factory","text":""},{"location":"engine/entityevent/#eventsentityevent","title":"Events.EntityEvent","text":"<p><code>Events.EntityEvent</code></p> <p>Spawns an EntityEvent.</p> <p>Arguments</p> <ul> <li><code>entityID</code>: string. The ID of an entity.</li> </ul> <p>Returns</p> <p>A new EntityEvent linked to the specified entity.</p> <p>Example</p> <pre><code>// This is a level setup object. Make sure to link it in your .lev file!\nusing SurgeEngine.Level;\nusing SurgeEngine.Events.EntityEvent;\n\nobject \"My Level Setup\"\n{\n    fun constructor()\n    {\n        Level.setup({\n            \"Event Trigger 1\": {\n                \"onTrigger\": EntityEvent(\"aeb587eed1057a5e\").willCall(\"open\")\n            }\n        });\n    }\n}\n</code></pre>"},{"location":"engine/entityevent/#functions","title":"Functions","text":""},{"location":"engine/entityevent/#willcall","title":"willCall","text":"<p><code>willCall(functionName)</code></p> <p>Specifies the name of the function that will be called.</p> <p>Arguments</p> <p><code>functionName</code>: string. The name of the function that will be called when the event is triggered.</p> <p>Returns</p> <p>The EntityEvent object.</p>"},{"location":"engine/entityevent/#withargument","title":"withArgument","text":"<p><code>withArgument(data)</code></p> <p>Adds an argument to the EntityEvent. Arguments added to the EntityEvent will be passed to the entity when the event is triggered - in the order they have been added. To add multiple arguments, call this function multiple times.</p> <p>Arguments</p> <p><code>data</code>: any. The argument to be added.</p> <p>Returns</p> <p>The EntityEvent object.</p>"},{"location":"engine/entityevent/#call","title":"call","text":"<p><code>call()</code></p> <p>Triggers the event.</p>"},{"location":"engine/event/","title":"Event","text":"<p>An event is a function object with zero parameters and no return value that is tagged \"event\". Events are used to run code when triggered.</p> <p>Events let you seamlessly connect entities and write cause and effect relationships. Suppose you have an on/off switch in a level. Whenever that switch is pressed by the player, you want something to happen: raise the water level, open a door, make it rain, teleport the player, and so on. Events are important because they let you decouple the source of the happening (the pressing of the switch) from the results that are experienced (e.g., the raising of the water).</p> <p>Events let you reuse your entities in multiple ways and for multiple purposes. You may design an entity and make it trigger an event, but you do not need to specify in advance what the event actually is. Rather, the concrete event (what must happen) will be configured in your level setup.</p> <p>There are multiple types of events. In practice, you'll use specialized events such as EntityEvent and FunctionEvent when configuring your entities. Event is an empty event that does nothing when triggered, but it should be used when designing your entities, as in the example below.</p> <p>Example</p> <pre><code>// -----------------------------------------------------------------------------\n// Using Events\n//\n// Note that cause and effect are split into different scripts!\n// -----------------------------------------------------------------------------\n\n// This script contains an object that will trigger an event whenever a certain\n// button is pressed (e.g., the jump button).\nusing SurgeEngine.Player;\nusing SurgeEngine.Events.Event;\n\nobject \"Button Detector\" is \"awake\", \"entity\"\n{\n    public onButtonPress = Event();\n    public button = \"fire1\";\n\n    state \"main\"\n    {\n        input = Player.active.input;\n        if(input.buttonPressed(button))\n            onButtonPress();\n    }\n}\n\n// -----------------------------------------------------------------------------\n\n// The code below is a different script containing a level setup object.\n// Make sure to link it in your .lev file!\nusing SurgeEngine.Level;\nusing SurgeEngine.Events.FunctionEvent;\n\nobject \"My Level Setup\"\n{\n    fun constructor()\n    {\n        Level.setup({\n            \"Button Detector\": {\n                \"button\": \"fire1\", // \"fire1\" is the jump button\n                \"onButtonPress\": FunctionEvent(\"Print\").withArgument(\"You pressed the button!\")\n            }\n        });\n    }\n}\n</code></pre>"},{"location":"engine/event/#factory","title":"Factory","text":""},{"location":"engine/event/#eventsevent","title":"Events.Event","text":"<p><code>Events.Event()</code></p> <p>Spawns an empty Event.</p> <p>Returns</p> <p>A new Event.</p>"},{"location":"engine/event/#functions","title":"Functions","text":""},{"location":"engine/event/#call","title":"call","text":"<p><code>call()</code></p> <p>Triggers the event. All event types implement this function. It takes no arguments and it returns no value other than <code>null</code>.</p>"},{"location":"engine/eventchain/","title":"EventChain","text":"<p>An EventChain is an event that triggers other events sequentially, as in a chain of events.</p>"},{"location":"engine/eventchain/#factory","title":"Factory","text":""},{"location":"engine/eventchain/#eventseventchain","title":"Events.EventChain","text":"<p><code>Events.EventChain(chain)</code></p> <p>Spawns an EventChain.</p> <p>Arguments</p> <ul> <li><code>chain</code>: Array object. A list containing zero or more events.</li> </ul> <p>Returns</p> <p>A new EventChain that triggers the specified events, one at a time. The first time the EventChain is triggered, the first event of the <code>chain</code> will be triggered. The second time the EventChain is triggered, the second event of the <code>chain</code> will be triggered, and so on.</p> <p>Note: if the EventChain ever triggers its last event, from that moment onwards it will always trigger its last event (unless you make it loop).</p> <p>Example</p> <pre><code>// EventChain example\n// This is a level setup object. Make sure to link it in your .lev file!\nusing SurgeEngine.Level;\nusing SurgeEngine.Events.EventChain;\nusing SurgeEngine.Events.FunctionEvent;\n\nobject \"My Level Setup\"\n{\n    fun constructor()\n    {\n        Level.setup({\n            \"Switch\": {\n                \"sticky\": false,\n                \"onActivate\": EventChain([\n                    FunctionEvent(\"Print\").withArgument(\"First time\"),\n                    FunctionEvent(\"Print\").withArgument(\"Second time\"),\n                    FunctionEvent(\"Print\").withArgument(\"Third time\"),\n                    FunctionEvent(\"Print\").withArgument(\"Enough!\")\n                ])\n            }\n        });\n    }\n}\n</code></pre>"},{"location":"engine/eventchain/#functions","title":"Functions","text":""},{"location":"engine/eventchain/#willloop","title":"willLoop","text":"<p><code>willLoop()</code></p> <p>Make the EventChain loop. When the last event of the chain is triggered, the next event to be triggered will be the first one.</p> <p>Returns</p> <p>The EventChain object.</p> <p>Example</p> <pre><code>// Triggering Alternating Events\n// This is a level setup object. Make sure to link it in your .lev file!\nusing SurgeEngine.Level;\nusing SurgeEngine.Events.EventChain;\nusing SurgeEngine.Events.FunctionEvent;\n\nobject \"My Level Setup - Alternating Events\"\n{\n    fun constructor()\n    {\n        Level.setup({\n            \"Switch\": {\n                \"sticky\": false,\n                \"onActivate\": EventChain([\n                    FunctionEvent(\"Print\").withArgument(\"Triggered Event A\"),\n                    FunctionEvent(\"Print\").withArgument(\"Triggered Event B\")\n                ]).willLoop()\n            }\n        });\n    }\n}\n</code></pre>"},{"location":"engine/eventchain/#call","title":"call","text":"<p><code>call()</code></p> <p>Triggers the event.</p>"},{"location":"engine/eventlist/","title":"EventList","text":"<p>An EventList is an event that triggers multiple events when triggered.</p>"},{"location":"engine/eventlist/#factory","title":"Factory","text":""},{"location":"engine/eventlist/#eventseventlist","title":"Events.EventList","text":"<p><code>Events.EventList(list)</code></p> <p>Spawns an EventList.</p> <p>Arguments</p> <ul> <li><code>list</code>: Array object. A list containing zero or more events.</li> </ul> <p>Returns</p> <p>A new EventList that triggers the specified events at once, in the order they have been listed.</p> <p>Example</p> <pre><code>// This is a level setup object. Make sure to link it in your .lev file!\nusing SurgeEngine.Level;\nusing SurgeEngine.Events.EventList;\nusing SurgeEngine.Events.FunctionEvent;\n\nobject \"My Level Setup\"\n{\n    fun constructor()\n    {\n        Level.setup({\n            \"Event Trigger 1\": {\n                \"onTrigger\": EventList([\n                    FunctionEvent(\"Print\").withArgument(\"We're triggering\"),\n                    FunctionEvent(\"Print\").withArgument(\"multiple events\"),\n                    FunctionEvent(\"Print\").withArgument(\"at the same time!\")\n                ])\n            }\n        });\n    }\n}\n</code></pre>"},{"location":"engine/eventlist/#functions","title":"Functions","text":""},{"location":"engine/eventlist/#call","title":"call","text":"<p><code>call()</code></p> <p>Triggers the event.</p>"},{"location":"engine/functionevent/","title":"FunctionEvent","text":"<p>A FunctionEvent is an event that calls a function object when triggered.</p>"},{"location":"engine/functionevent/#factory","title":"Factory","text":""},{"location":"engine/functionevent/#eventsfunctionevent","title":"Events.FunctionEvent","text":"<p><code>Events.FunctionEvent(objectName)</code></p> <p>Spawns a FunctionEvent.</p> <p>Arguments</p> <ul> <li><code>objectName</code>: string. The name of a function object.</li> </ul> <p>Returns</p> <p>A new FunctionEvent that, when triggered, calls the specified function object.</p> <p>Example</p> <pre><code>// This is a level setup object. Make\n// sure to link it in your .lev file!\nusing SurgeEngine.Level;\nusing SurgeEngine.Events.FunctionEvent;\n\nobject \"My Level Setup\"\n{\n    fun constructor()\n    {\n        Level.setup({\n            \"Event Trigger 1\": {\n                \"onTrigger\": FunctionEvent(\"Give 1up\")\n            }\n        });\n    }\n}\n\n// -----------------------------------------\n\n// This is a function object that\n// gives the player one extra life.\nusing SurgeEngine.Player;\nusing SurgeEngine.Audio.Music;\n\nobject \"Give 1up\"\n{\n    jingle = Music(\"samples/1up.ogg\");\n\n    fun call()\n    {\n        Player.active.lives += 1;\n        jingle.play();\n    }\n}\n</code></pre>"},{"location":"engine/functionevent/#functions","title":"Functions","text":""},{"location":"engine/functionevent/#withargument","title":"withArgument","text":"<p><code>withArgument(data)</code></p> <p>Adds an argument to the FunctionEvent. Arguments added to the FunctionEvent will be passed to the function object when the event is triggered - in the order they have been added. To add multiple arguments, call this function multiple times.</p> <p>Arguments</p> <p><code>data</code>: any. The argument to be added.</p> <p>Returns</p> <p>The FunctionEvent object.</p>"},{"location":"engine/functionevent/#call","title":"call","text":"<p><code>call()</code></p> <p>Triggers the event.</p>"},{"location":"engine/game/","title":"Game","text":"<p>Game settings. These are specified in surge.cfg, a file located at the root folder of the game.</p> <p>Available since: Open Surge 0.6.1</p>"},{"location":"engine/game/#properties","title":"Properties","text":""},{"location":"engine/game/#title","title":"title","text":"<p><code>title</code>: string, read-only.</p> <p>The title of the game that is running on the engine. If unspecified, an empty string is returned.</p>"},{"location":"engine/game/#version","title":"version","text":"<p><code>version</code>: string, read-only.</p> <p>The version of the game that is running on the engine. If unspecified, an empty string is returned. Do not confuse it with SurgeEngine.version.</p>"},{"location":"engine/input/","title":"Input","text":"<p>The Input object is used to read input from the user.</p> <p>Example <pre><code>using SurgeEngine.Player;\n\nobject \"Application\"\n{\n    player = Player.active;\n\n    state \"main\"\n    {\n        if(player.input.buttonDown(\"right\"))\n            Console.print(\"User is holding right\");\n    }\n}\n</code></pre></p>"},{"location":"engine/input/#factory","title":"Factory","text":""},{"location":"engine/input/#input_1","title":"Input","text":"<p><code>Input(inputMap)</code></p> <p>Spawns a new Input component with the given input map.</p> <p>Note: to read input from a specific character, prefer using Player.input instead.</p> <p>Arguments</p> <ul> <li><code>inputMap</code>: string. The name of the input map. If set to <code>null</code>, a default input map will be used.</li> </ul> <p>Returns</p> <p>An Input component.</p> <p>Example <pre><code>using SurgeEngine.Player;\nusing SurgeEngine.Input;\n\nobject \"Application\"\n{\n    input = Player.active.input;         // this form is preferred (used in most cases)\n    //input = Input(\"custom input map\"); // unless you need to read a custom input map\n\n    state \"main\"\n    {\n        if(input.buttonDown(\"right\"))\n            Console.print(\"User is holding right\");\n    }\n}\n</code></pre></p>"},{"location":"engine/input/#properties","title":"Properties","text":""},{"location":"engine/input/#enabled","title":"enabled","text":"<p><code>enabled</code>: boolean.</p> <p>Whether the input object is enabled or not. A disabled object does not receive user input. The default value of this property is <code>true</code>.</p>"},{"location":"engine/input/#functions","title":"Functions","text":""},{"location":"engine/input/#buttondown","title":"buttonDown","text":"<p><code>buttonDown(buttonName)</code></p> <p>Checks if a button of the input map is currently being held down.</p> <p>Arguments</p> <ul> <li><code>buttonName</code>: string. One of the following: \"up\", \"down\", \"left\", \"right\", \"fire1\", \"fire2\", ..., \"fire8\".</li> </ul> <p>Returns</p> <p>Returns <code>true</code> if the specified button is being held down.</p>"},{"location":"engine/input/#buttonpressed","title":"buttonPressed","text":"<p><code>buttonPressed(buttonName)</code></p> <p>Checks if a button has just been pressed.</p> <p>Arguments</p> <ul> <li><code>buttonName</code>: string. One of the following: \"up\", \"down\", \"left\", \"right\", \"fire1\", \"fire2\", ..., \"fire8\".</li> </ul> <p>Returns</p> <p>Returns <code>true</code> if the specified button has just been pressed.</p>"},{"location":"engine/input/#buttonreleased","title":"buttonReleased","text":"<p><code>buttonReleased(buttonName)</code></p> <p>Checks if a button has just been released.</p> <p>Arguments</p> <ul> <li><code>buttonName</code>: string. One of the following: \"up\", \"down\", \"left\", \"right\", \"fire1\", \"fire2\", ..., \"fire8\".</li> </ul> <p>Returns</p> <p>Returns <code>true</code> if the specified button has just been released.</p>"},{"location":"engine/input/#simulatebutton","title":"simulateButton","text":"<p><code>simulateButton(buttonName, down)</code></p> <p>Changes the input object so that <code>buttonName</code> will be identified as being held down, or not being held down, in the current frame.</p> <p>Arguments</p> <ul> <li><code>buttonName</code>: string. One of the following: \"up\", \"down\", \"left\", \"right\", \"fire1\", \"fire2\", ..., \"fire8\".</li> <li><code>down</code>: boolean. Should the button be considered as being held down?</li> </ul>"},{"location":"engine/input/#remap","title":"remap","text":"<p><code>remap(inputMap)</code></p> <p>Changes the input map.</p> <p>Available since: Open Surge 0.6.1</p> <p>Arguments</p> <ul> <li><code>inputMap</code>: string. The name of the input map.</li> </ul> <p>Returns</p> <p>Returns <code>true</code> on success, or <code>false</code> otherwise.</p>"},{"location":"engine/lang/","title":"Lang","text":"<p>Lang is a SurgeEngine element used to read translation-specific strings, as defined in the language files (.lng).</p> <p>Example <pre><code>using SurgeEngine.Lang;\n\n// Display the current language\nobject \"Application\"\n{\n    state \"main\"\n    {\n        currentLanguage = Lang[\"LANG_LANGUAGE\"];\n        Console.print(\"The current language is \" + currentLanguage);\n        state = \"done\";\n    }\n\n    state \"done\"\n    {\n    }\n}\n</code></pre></p>"},{"location":"engine/lang/#functions","title":"Functions","text":""},{"location":"engine/lang/#get","title":"get","text":"<p><code>get(key)</code></p> <p>Gets the value of the specified key. Instead of calling <code>get()</code> directly, you may equivalently use the <code>[ ]</code> operator.</p> <p>Arguments</p> <ul> <li><code>key</code>: string. The key must always be a string.</li> </ul> <p>Returns</p> <p>The translation string associated with the specified key.</p>"},{"location":"engine/level/","title":"Level","text":"<p>Level routines. A level is a scene in the game, stored as a .lev file in the levels/ folder.</p> <p>Whenever you spawn an object in SurgeScript, you must keep a reference to it, otherwise it will be automatically deleted by the Garbage Collector. Sometimes you want to spawn entities in your level, but keeping references to all of them is inconvenient. In this case, you can spawn them as children of the Level object. It will keep the references for you, and thus they won't be garbage collected.</p> <p>Example <pre><code>using SurgeEngine.Actor;\nusing SurgeEngine.Level;\nusing SurgeEngine.Vector2;\n\nobject \"Application\"\n{\n    state \"main\"\n    {\n        createExplosionAt(100, 200);\n        state = \"wait\";\n    }\n\n    state \"wait\"\n    {\n        if(timeout(1.0))\n            state = \"main\";\n    }\n\n    fun createExplosionAt(x, y)\n    {\n        position = Vector2(x, y);\n        return Level.spawnEntity(\"MyExplosion\", position); // no need to keep references\n    }\n}\n\nobject \"MyExplosion\" is \"entity\", \"disposable\", \"private\"\n{\n    actor = Actor(\"MyExplosion\");\n\n    state \"main\"\n    {\n        if(actor.animation.finished)\n            destroy()\n    }\n}\n</code></pre></p>"},{"location":"engine/level/#properties","title":"Properties","text":""},{"location":"engine/level/#name","title":"name","text":"<p><code>name</code>: string, read-only.</p> <p>The name of the level.</p> <p>Example <pre><code>using SurgeEngine.Level;\n\n// Will display the name of the level\nobject \"Application\"\n{\n    state \"main\"\n    {\n        Console.print(Level.name);\n        state = \"done\";\n    }\n\n    state \"done\"\n    {\n    }\n}\n</code></pre></p>"},{"location":"engine/level/#act","title":"act","text":"<p><code>act</code>: number.</p> <p>The act number (1, 2, 3...) of the current level.</p> <p>Note: this property is writable since Open Surge 0.6.1.</p>"},{"location":"engine/level/#cleared","title":"cleared","text":"<p><code>cleared</code>: boolean, read-only.</p> <p>Checks if the current level has been cleared by the player. If this is <code>true</code>, a level cleared animation should be played. Although the engine provides a default animation, you may use this property to design your own.</p> <p>See also: clear.</p>"},{"location":"engine/level/#file","title":"file","text":"<p><code>file</code>: string, read-only.</p> <p>The relative path of the .lev file of the current level.</p>"},{"location":"engine/level/#version","title":"version","text":"<p><code>version</code>: string, read-only.</p> <p>The version of the level, defined in the .lev file.</p>"},{"location":"engine/level/#author","title":"author","text":"<p><code>author</code>: string, read-only.</p> <p>The author of the level, defined in the .lev file.</p>"},{"location":"engine/level/#license","title":"license","text":"<p><code>license</code>: string, read-only.</p> <p>The license of the level, defined in the .lev file.</p>"},{"location":"engine/level/#music","title":"music","text":"<p><code>music</code>: Music object, read-only.</p> <p>The music of the level.</p>"},{"location":"engine/level/#bgtheme","title":"bgtheme","text":"<p><code>bgtheme</code>: string, read-only.</p> <p>The path to the original background file (.bg), as declared in the .lev file.</p>"},{"location":"engine/level/#background","title":"background","text":"<p><code>background</code>: string.</p> <p>The path to the background file (.bg) currently in use. Use this property to change the background of the level.</p>"},{"location":"engine/level/#waterlevel","title":"waterlevel","text":"<p><code>waterlevel</code>: number.</p> <p>The y-coordinate, in world space, of the level water. Pixels not above this value are underwater.</p>"},{"location":"engine/level/#spawnpoint","title":"spawnpoint","text":"<p><code>spawnpoint</code>: Vector2 object.</p> <p>The position where the player is placed when the level starts.</p>"},{"location":"engine/level/#gravity","title":"gravity","text":"<p><code>gravity</code>: number, read-only.</p> <p>The acceleration of gravity, measured in pixels per second squared.</p>"},{"location":"engine/level/#time","title":"time","text":"<p><code>time</code>: number.</p> <p>Elapsed time in the level, given in seconds. The level time will be frozen if the cleared flag is set or if the player is dying.</p> <p>Note: this property is writable since Open Surge 0.6.0.</p>"},{"location":"engine/level/#next","title":"next","text":"<p><code>next</code>: number.</p> <p>The number of the next level in the current quest: 1 means the first level of the quest, 2 means the second, and so on.</p>"},{"location":"engine/level/#onunload","title":"onUnload","text":"<p><code>onUnload</code>: object | <code>null</code>.</p> <p>Used to specify a function object to be called when the level is unloaded.</p>"},{"location":"engine/level/#debugmode","title":"debugMode","text":"<p><code>debugMode</code>: boolean.</p> <p>Whether or not the Debug Mode is activated.</p> <p>Available since: Open Surge 0.6.1</p>"},{"location":"engine/level/#functions","title":"Functions","text":""},{"location":"engine/level/#spawn","title":"spawn","text":"<p><code>spawn(objectName)</code></p> <p>Spawns an object as a child of Level. Such objects won't be garbage collected.</p> <p>Use spawnEntity instead if you intend to spawn an entity.</p> <p>Arguments</p> <ul> <li><code>objectName</code>: string. The name of the object to be spawned.</li> </ul> <p>Returns</p> <p>The spawned object.</p>"},{"location":"engine/level/#spawnentity","title":"spawnEntity","text":"<p><code>spawnEntity(objectName, position)</code></p> <p>Spawns an entity named <code>objectName</code> at a certain <code>position</code>. The entity won't be garbage collected, as in spawn.</p> <p>Arguments</p> <ul> <li><code>objectName</code>: string. The name of the entity to be spawned.</li> <li><code>position</code>: Vector2 object. The position of the entity.</li> </ul> <p>Returns</p> <p>The spawned entity object.</p>"},{"location":"engine/level/#entity","title":"entity","text":"<p><code>entity(entityId)</code></p> <p>Entities spawned with spawnEntity are automatically assigned an ID, a hexadecimal identification string. The purpose of the ID is to uniquely identify the entity in the level. This function returns the entity whose ID is <code>entityId</code>.</p> <p>Arguments</p> <ul> <li><code>entityId</code>: string. The ID of the entity to be retrieved.</li> </ul> <p>Returns</p> <p>The desired entity object, or <code>null</code> if there is no entity associated with the given ID.</p> <p>Example</p> <pre><code>using SurgeEngine.Level;\n\n//\n// Level.entity() is very useful when creating setup objects, i.e.,\n// objects spawned when the level is initialized. You can use it to\n// tune the parameters of specific entities, call their functions, etc.\n//\n// The example below can be added to the startup list in the .lev file.\n//\nobject \"My Setup Object\"\n{\n    state \"main\"\n    {\n        // setup the entity\n        item = Level.entity(\"ab65d8fe1ebd68de\"); // first, we get the entity\n        if(item != null) {\n            Console.print(item.__name); // then we print the object name\n            //item.score = 100; // we can also change a property\n        }\n        else\n            Console.print(\"Entity not found\");\n\n        // change the state\n        state = \"done\";\n    }\n\n    state \"done\"\n    {\n    }\n}\n</code></pre>"},{"location":"engine/level/#entityid","title":"entityId","text":"<p><code>entityId(entityObject)</code></p> <p>Returns the ID of the provided entity, if it is defined. If no such ID is defined, an empty string is returned.</p> <p>Available since: Open Surge 0.6.1</p> <p>Arguments</p> <ul> <li><code>entityObject</code>: object. An entity.</li> </ul> <p>Returns</p> <p>A string with a hexadecimal identification code, or an empty string.</p>"},{"location":"engine/level/#findentity","title":"findEntity","text":"<p><code>findEntity(entityName)</code></p> <p>Finds an entity named <code>entityName</code> spawned with spawnEntity.</p> <p>Available since: Open Surge 0.6.1</p> <p>Arguments</p> <ul> <li><code>entityName</code>: string. The name of an entity object.</li> </ul> <p>Returns</p> <p>An entity named <code>entityName</code>, or <code>null</code> if there is none.</p>"},{"location":"engine/level/#findentities","title":"findEntities","text":"<p><code>findEntities(entityName)</code></p> <p>Finds all entities named <code>entityName</code> spawned with spawnEntity.</p> <p>Available since: Open Surge 0.6.1</p> <p>Arguments</p> <ul> <li><code>entityName</code>: string. The name of the entities to be searched.</li> </ul> <p>Returns</p> <p>A new array containing all entities named <code>entityName</code>. If none are found, an empty array is returned.</p>"},{"location":"engine/level/#activeentities","title":"activeEntities","text":"<p><code>activeEntities()</code></p> <p>Finds all active entities, i.e.: those that are near the camera, as well as all awake and detached ones.</p> <p>Available since: Open Surge 0.6.1</p> <p>Returns</p> <p>A new array containing active entities. If none are found, an empty array is returned.</p>"},{"location":"engine/level/#setup","title":"setup","text":"<p><code>setup(config)</code></p> <p>Sets up the properties of a collection of level objects. This is a handy function typically used in a startup object of your level. Its purpose is to configure the properties of level objects. You may set the properties of groups of objects (given their names) and of individual entities alone (given their IDs).</p> <p>The target properties and their respective values should be specified in the <code>config</code> Dictionary, passed as a parameter. Each key of <code>config</code> should be either an object name or an entity ID. Each value of the dictionary should be another dictionary specifying the properties to be set and their respective values. If an object name is specified in a key of <code>config</code>, all level objects with that name will be affected. If an entity ID is provided, only that specific entity will be affected, if it exists.</p> <p>This function will search for all the specified objects in the level, so it's not supposed to be used in a loop (or in a repeating state). Furthermore, if one or more objects or properties do not exist, this function will fail silently. Therefore, make sure you type everything correctly.</p> <p>Arguments</p> <ul> <li><code>config</code>: Dictionary object. The configuration as described.</li> </ul> <p>Example</p> <pre><code>using SurgeEngine.Level;\n\n//\n// This is supposed to be a startup object,\n// listed in the startup list of a .lev file\n//\nobject \"My Level Setup\"\n{\n    // setup properties\n    fun constructor()\n    {\n        Level.setup({\n            \"Elevator\": {\n                \"anim\": 2\n            },\n            \"Background Exchanger\": {\n                \"background\": \"themes/template.bg\"\n            },\n            \"5640353a6efd2901\": {\n                \"someProperty\": 123,\n                \"someOtherProperty\": \"hello\"\n            },\n            \"770ae26584229af2\": {\n                \"title\": \"Super!!\",\n                \"message\": \"Hey there! Feeling good today?\",\n                \"buttons\": [ \"Yes\", \"No\" ]\n            }\n        });\n    }\n}\n</code></pre>"},{"location":"engine/level/#restart","title":"restart","text":"<p><code>restart()</code></p> <p>Restarts the current level.</p>"},{"location":"engine/level/#quit","title":"quit","text":"<p><code>quit()</code></p> <p>Prompts the user to see if he/she wants to quit the current level.</p> <p>Deprecated since: Open Surge 0.6.1</p>"},{"location":"engine/level/#abort","title":"abort","text":"<p><code>abort()</code></p> <p>Quits the current level/quest without prompting the user.</p>"},{"location":"engine/level/#pause","title":"pause","text":"<p><code>pause()</code></p> <p>Pauses the game.</p>"},{"location":"engine/level/#load","title":"load","text":"<p><code>load(filepath)</code></p> <p>Loads the specified level/quest.</p> <ul> <li> <p>If you pass the path to a level (a .lev file in the levels/ folder), that level will be loaded. The state of the current level (position of the entities and so on) will be lost.</p> </li> <li> <p>If you pass the path to a quest (a .qst file in the quests/ folder), that quest will be loaded and, when it's completed or aborted, the engine will redirect the user back to the level he/she was before.</p> </li> </ul> <p>Arguments</p> <ul> <li><code>filepath</code>: string. Relative path of the level or quest to be loaded.</li> </ul> <p>Example</p> <pre><code>using SurgeEngine.Level;\n\nobject \"My Level Loader\"\n{\n    fun load(id)\n    {\n        if(id == \"beach\") {\n            Level.load(\"levels/beach_level.lev\");\n        }\n        else if(id == \"forest\") {\n            Level.load(\"levels/forest_level.lev\");\n        }\n        else if(id == \"bonus\") {\n            Level.next -= 1; // return to the current level after completing the bonus\n            Level.load(\"levels/bonus_stage.lev\");\n        }\n        else\n            Console.print(\"Unrecognized level: \" + id);\n    }\n}\n</code></pre>"},{"location":"engine/level/#loadandreturn","title":"loadAndReturn","text":"<p><code>loadAndReturn(filepath)</code></p> <p>Loads the specified level or quest and, after completing or exiting the loaded scene, returns to the level the player was before. If you pass the path to a quest, this function behaves exactly like load().</p> <p>Available since: Open Surge 0.6.1</p> <p>Arguments</p> <ul> <li><code>filepath</code>: string. Relative path of the level or quest to be loaded.</li> </ul> <p>Example</p> <pre><code>// Load a bonus stage and return to the current level if the player completes it or exits from it\nLevel.loadAndReturn(\"levels/bonus_stage.lev\");\n</code></pre>"},{"location":"engine/level/#loadnext","title":"loadNext","text":"<p><code>loadNext()</code></p> <p>Loads the next level in the current quest. This is the usual procedure after clearing the level. See also: next.</p>"},{"location":"engine/level/#clear","title":"clear","text":"<p><code>clear()</code></p> <p>Sets the cleared flag and disables player input.</p> <p>See also: cleared, undoClear.</p>"},{"location":"engine/level/#undoclear","title":"undoClear","text":"<p><code>undoClear()</code></p> <p>Reverses a previous call to clear, disabling the cleared flag and enabling player input again. This is typically used to play a cutscene after a level cleared animation or to have multiple acts in the same level file.</p> <p>See also: cleared, clear, act.</p> <p>Available since: Open Surge 0.6.1</p>"},{"location":"engine/mobile_gamepad/","title":"MobileGamepad","text":"<p>The mobile gamepad is a virtual gamepad that appears on the screen when the engine is launched in mobile mode.</p> <p>Available since: Open Surge 0.6.1</p>"},{"location":"engine/mobile_gamepad/#properties","title":"Properties","text":""},{"location":"engine/mobile_gamepad/#visible","title":"visible","text":"<p><code>visible</code>: boolean, read-only.</p> <p>Whether or not the mobile gamepad is visible.</p>"},{"location":"engine/mobile_gamepad/#functions","title":"Functions","text":""},{"location":"engine/mobile_gamepad/#fadein","title":"fadeIn","text":"<p><code>fadeIn()</code></p> <p>Makes the mobile gamepad appear smoothly.</p>"},{"location":"engine/mobile_gamepad/#fadeout","title":"fadeOut","text":"<p><code>fadeOut()</code></p> <p>Makes the mobile gamepad disappear smoothly.</p>"},{"location":"engine/mouse/","title":"Mouse","text":"<p>The Mouse object is used to read input from the mouse.</p> <p>Example</p> <pre><code>// This example shows how to use a sprite\n// as a mouse cursor. Since My Cursor is\n// tagged \"detached\", it will be rendered\n// in screen space, not in world space.\n\nusing SurgeEngine.Actor;\nusing SurgeEngine.Transform;\nusing SurgeEngine.Input.Mouse;\n\nobject \"My Cursor\" is \"entity\", \"detached\"\n{\n    actor = Actor(\"My Cursor\");\n    transform = Transform();\n\n    state \"main\"\n    {\n        transform.position = Mouse.position;\n        if(Mouse.buttonPressed(\"left\"))\n            Console.print(\"left click\");\n    }\n\n    fun constructor()\n    {\n        actor.zindex = 1.0;\n    }\n}\n</code></pre>"},{"location":"engine/mouse/#properties","title":"Properties","text":""},{"location":"engine/mouse/#position","title":"position","text":"<p><code>position</code>: Vector2 object, read-only.</p> <p>The position of the mouse cursor, in screen space.</p>"},{"location":"engine/mouse/#scrollup","title":"scrollUp","text":"<p><code>scrollUp</code>: boolean, read-only.</p> <p>Will be <code>true</code> at the frame the user scrolls up using the mouse wheel.</p> <p>Available since: Open Surge 0.5.1</p>"},{"location":"engine/mouse/#scrolldown","title":"scrollDown","text":"<p><code>scrollDown</code>: boolean, read-only.</p> <p>Will be <code>true</code> at the frame the user scrolls down using the mouse wheel.</p> <p>Available since: Open Surge 0.5.1</p>"},{"location":"engine/mouse/#functions","title":"Functions","text":""},{"location":"engine/mouse/#buttondown","title":"buttonDown","text":"<p><code>buttonDown(buttonName)</code></p> <p>Checks if a mouse button is currently being held down.</p> <p>Arguments</p> <ul> <li><code>buttonName</code>: string. One of the following: \"left\", \"right\", \"middle\".</li> </ul> <p>Returns</p> <p>Returns <code>true</code> if the specified button is being held down.</p>"},{"location":"engine/mouse/#buttonpressed","title":"buttonPressed","text":"<p><code>buttonPressed(buttonName)</code></p> <p>Checks if a mouse button has just been pressed.</p> <p>Arguments</p> <ul> <li><code>buttonName</code>: string. One of the following: \"left\", \"right\", \"middle\".</li> </ul> <p>Returns</p> <p>Returns <code>true</code> if the specified button has just been pressed (i.e., a click has just occurred).</p> <p>Example <pre><code>using SurgeEngine.Input.Mouse;\nusing SurgeEngine.Collisions.CollisionBall;\nusing SurgeEngine.Transform;\nusing SurgeEngine.Camera;\n\n// Use the mouse cursor to click on any entity that has a collider.\n// Setup: simply place this object on the level.\nobject \"Entity Picker\" is \"awake\", \"entity\"\n{\n    transform = Transform();\n    collider = CollisionBall(8);\n\n    state \"main\"\n    {\n        transform.position = Camera.screenToWorld(Mouse.position);\n        collider.visible = true;\n    }\n\n    fun onOverlap(otherCollider)\n    {\n        if(Mouse.buttonPressed(\"left\"))\n            Console.print(\"Clicked on \" + otherCollider.entity.__name);\n    }\n}\n</code></pre></p>"},{"location":"engine/mouse/#buttonreleased","title":"buttonReleased","text":"<p><code>buttonReleased(buttonName)</code></p> <p>Checks if a mouse button has just been released.</p> <p>Arguments</p> <ul> <li><code>buttonName</code>: string. One of the following: \"left\", \"right\", \"middle\".</li> </ul> <p>Returns</p> <p>Returns <code>true</code> if the specified button has just been released.</p>"},{"location":"engine/music/","title":"Music","text":"<p>The Music object lets you play music. This is meant to handle background music; therefore, only one music can be played at a time.</p> <p>Unlike regular sounds, musics are streamed, (i.e., not loaded completely in memory). Given the longer nature of musics, this improves memory usage and helps with the loading times.</p> <p>Example <pre><code>using SurgeEngine.Level;\n\n// Fades the music in a linear fashion ;)\nobject \"MyMusicFader\"\n{\n    public music = Level.music;\n    prevVolume = music.volume;\n    fadeTime = 1.0; // given in seconds\n\n    state \"main\"\n    {\n    }\n\n    state \"fadeout\"\n    {\n        music.volume -= Time.delta / fadeTime;\n        if(music.volume &lt;= 0.0) {\n            music.pause();\n            music.volume = prevVolume;\n            state = \"main\";\n        }\n    }\n\n    // call fadeOut() to make the\n    // music fade smoothly\n    fun fadeOut(seconds)\n    {\n        if(state == \"main\")\n            prevVolume = music.volume;\n        fadeTime = seconds;\n        state = \"fadeout\";\n    }\n}\n</code></pre></p>"},{"location":"engine/music/#factory","title":"Factory","text":""},{"location":"engine/music/#music_1","title":"Music","text":"<p><code>Audio.Music(path)</code></p> <p>Creates a Music object associated with a certain file.</p> <p>Arguments</p> <ul> <li><code>path</code>: string. The path of the music - usually a file in the musics/ folder.</li> </ul> <p>Returns</p> <p>A Music object.</p> <p>Example <pre><code>using SurgeEngine.Audio.Music;\n\nobject \"MusicTest\"\n{\n    music = Music(\"musics/options.ogg\");\n\n    state \"main\"\n    {\n        // loop music\n        if(!music.playing)\n            music.play();\n    }\n}\n</code></pre></p>"},{"location":"engine/music/#properties","title":"Properties","text":""},{"location":"engine/music/#playing","title":"playing","text":"<p><code>playing</code>: boolean, read-only.</p> <p>Will be <code>true</code> if the music is playing.</p>"},{"location":"engine/music/#volume","title":"volume","text":"<p><code>volume</code>: number.</p> <p>The volume of the music, a value between 0.0 and 1.0, inclusive (zero means silence).</p>"},{"location":"engine/music/#functions","title":"Functions","text":""},{"location":"engine/music/#play","title":"play","text":"<p><code>play()</code></p> <p>Plays the music (once). To make it loop, play it whenever <code>music.playing</code> is <code>false</code>.</p>"},{"location":"engine/music/#stop","title":"stop","text":"<p><code>stop()</code></p> <p>Stops the music. Once the music is stopped, it can only be played again from the beginning.</p>"},{"location":"engine/music/#pause","title":"pause","text":"<p><code>pause()</code></p> <p>Pauses the music. A paused music can be resumed later with <code>play()</code>.</p>"},{"location":"engine/platform/","title":"Platform","text":"<p>Routines specific to the platform the game engine is currently running on.</p> <p>Available since: Open Surge 0.6.1</p> <p>Example</p> <pre><code>// Let's find out which platform the game engine is currently running on\nusing SurgeEngine.Platform;\n\nobject \"Application\"\n{\n    state \"main\"\n    {\n        Console.print(platformName());\n        state = \"done\";\n    }\n\n    state \"done\"\n    {\n    }\n\n    fun platformName()\n    {\n        if(Platform.isAndroid)\n            return \"Android\";\n        else if(Platform.isWindows)\n            return \"Windows\";\n        else if(Platform.isMacOS)\n            return \"macOS\";\n        else if(Platform.isUnix)\n            return \"Unix\";\n        else\n            return \"Unknown\";\n    }\n}\n</code></pre>"},{"location":"engine/platform/#properties","title":"Properties","text":""},{"location":"engine/platform/#iswindows","title":"isWindows","text":"<p><code>isWindows</code>: boolean, read-only.</p> <p>Will be <code>true</code> if the game engine is running on Microsoft Windows.</p>"},{"location":"engine/platform/#isunix","title":"isUnix","text":"<p><code>isUnix</code>: boolean, read-only.</p> <p>Will be <code>true</code> if the game engine is running on a Unix-like operating system such as: Linux, BSD, macOS, Android, etc.</p>"},{"location":"engine/platform/#ismacos","title":"isMacOS","text":"<p><code>isMacOS</code>: boolean, read-only.</p> <p>Will be <code>true</code> if the game engine is running on macOS.</p>"},{"location":"engine/platform/#isandroid","title":"isAndroid","text":"<p><code>isAndroid</code>: boolean, read-only.</p> <p>Will be <code>true</code> if the game engine is running on Android. Check SurgeEngine.mobile instead if you want to know if the game engine is running on mobile mode.</p>"},{"location":"engine/platformer/","title":"Platformer","text":"<p>The Platformer behavior makes the associated entity perform a simple platform movement (with gravity, etc). Used mostly by NPCs and baddies, this behavior is supposed to be lightweight for the CPU and is not designed to support 360\u00b0-physics.</p> <p>Important: for best results, the hot spot of the entity should be placed on its feet.</p> <p>Example</p> <pre><code>//\n// In the example below, we create a dummy that\n// walks around the level (left and right)\n//\nusing SurgeEngine.Actor;\nusing SurgeEngine.Behaviors.Enemy;\nusing SurgeEngine.Behaviors.Platformer;\n\nobject \"My Baddie\" is \"entity\", \"enemy\"\n{\n    actor = Actor(\"My Baddie\"); // give it graphics\n    enemy = Enemy(); // make it behave like a baddie\n    platformer = Platformer(); // give it a platform movement\n\n    state \"main\"\n    {\n        platformer.speed = 60; // 60 pixels per second\n        platformer.walk(); // make it walk\n    }\n}\n</code></pre>"},{"location":"engine/platformer/#factory","title":"Factory","text":""},{"location":"engine/platformer/#behaviorsplatformer","title":"Behaviors.Platformer","text":"<p><code>Platformer()</code></p> <p>Spawns a Platformer.</p> <p>Returns</p> <p>The behavior object.</p>"},{"location":"engine/platformer/#properties","title":"Properties","text":""},{"location":"engine/platformer/#speed","title":"speed","text":"<p><code>speed</code>: number.</p> <p>Walking speed, in pixels per second.</p>"},{"location":"engine/platformer/#jumpspeed","title":"jumpSpeed","text":"<p><code>jumpSpeed</code>: number.</p> <p>Jump speed, in pixels per second. The higher the value, the more intense the jump.</p>"},{"location":"engine/platformer/#gravitymultiplier","title":"gravityMultiplier","text":"<p><code>gravityMultiplier</code>: number.</p> <p>A multiplier used to modify how the Platformer is affected by gravity. When set to 1.0, the Platformer will subject to the default acceleration of gravity. When set to 2.0 (0.5), the Platformer will be subject to twice (half) the default gravity, and so on. Zero means no gravity. Defaults to 1.0.</p> <p>Available since: Open Surge 0.6.0</p>"},{"location":"engine/platformer/#direction","title":"direction","text":"<p><code>direction</code>: number, read-only.</p> <p>Direction will be +1 if the platformer is facing right or -1 is it's facing left.</p>"},{"location":"engine/platformer/#walking","title":"walking","text":"<p><code>walking</code>: boolean, read-only.</p> <p>Is the platformer walking?</p>"},{"location":"engine/platformer/#walkingleft","title":"walkingLeft","text":"<p><code>walkingLeft</code>: boolean, read-only.</p> <p>Is the platformer walking to the left?</p>"},{"location":"engine/platformer/#walkingright","title":"walkingRight","text":"<p><code>walkingRight</code>: boolean, read-only.</p> <p>Is the platformer walking to the right?</p>"},{"location":"engine/platformer/#midair","title":"midair","text":"<p><code>midair</code>: boolean, read-only.</p> <p>Is the platformer midair?</p>"},{"location":"engine/platformer/#falling","title":"falling","text":"<p><code>falling</code>: boolean, read-only.</p> <p>Is the platformer falling down?</p>"},{"location":"engine/platformer/#wall","title":"wall","text":"<p><code>wall</code>: boolean, read-only.</p> <p>Is the platformer touching a wall?</p>"},{"location":"engine/platformer/#leftwall","title":"leftWall","text":"<p><code>leftWall</code>: boolean, read-only.</p> <p>Is the platformer touching a wall on its left side?</p>"},{"location":"engine/platformer/#rightwall","title":"rightWall","text":"<p><code>rightWall</code>: boolean, read-only.</p> <p>Is the platformer touching a wall on its right side?</p>"},{"location":"engine/platformer/#leftledge","title":"leftLedge","text":"<p><code>leftLedge</code>: boolean, read-only.</p> <p>Is the platformer standing on a ledge located on its left side?</p>"},{"location":"engine/platformer/#rightledge","title":"rightLedge","text":"<p><code>rightLedge</code>: boolean, read-only.</p> <p>Is the platformer standing on a ledge located on its right side?</p>"},{"location":"engine/platformer/#functions","title":"Functions","text":""},{"location":"engine/platformer/#walk","title":"walk","text":"<p><code>walk()</code></p> <p>Enables automatic walking. The platformer will walk left and right automatically.</p> <p>Returns</p> <p>Returns the platformer itself.</p>"},{"location":"engine/platformer/#walkleft","title":"walkLeft","text":"<p><code>walkLeft()</code></p> <p>Makes the platformer walk to the left.</p> <p>Returns</p> <p>Returns the platformer itself.</p>"},{"location":"engine/platformer/#walkright","title":"walkRight","text":"<p><code>walkRight()</code></p> <p>Makes the platformer walk to the right.</p> <p>Returns</p> <p>Returns the platformer itself.</p>"},{"location":"engine/platformer/#stop","title":"stop","text":"<p><code>stop()</code></p> <p>Makes the platformer stop walking.</p> <p>Returns</p> <p>Returns the platformer itself.</p>"},{"location":"engine/platformer/#jump","title":"jump","text":"<p><code>jump()</code></p> <p>Makes the platformer jump. It will only jump if it's touching the ground.</p> <p>Returns</p> <p>Returns the platformer itself.</p> <p>Example</p> <pre><code>//\n// In the example below, we create a jumping\n// dummy that walks left and right\n//\nusing SurgeEngine.Actor;\nusing SurgeEngine.Behaviors.Enemy;\nusing SurgeEngine.Behaviors.Platformer;\n\nobject \"My Jumping Baddie\" is \"entity\", \"enemy\"\n{\n    actor = Actor(\"My Jumping Baddie\"); // handles the graphics\n    enemy = Enemy(); // make it behave like a baddie\n    platformer = Platformer().walk(); // make it walk\n\n    state \"main\"\n    {\n        platformer.speed = 60; // 60 pixels per second\n        if(timeout(3.0)) // jump every 3 seconds\n            state = \"jump\";\n    }\n\n    state \"jump\"\n    {\n        platformer.jump();\n        state = \"main\";\n    }\n}\n</code></pre>"},{"location":"engine/platformer/#forcejump","title":"forceJump","text":"<p><code>forceJump(speed)</code></p> <p>Makes the platformer jump, regardless if it's touching the ground or not.</p> <p>Arguments</p> <ul> <li><code>speed</code>: number. Jump speed in pixels per second.</li> </ul> <p>Returns</p> <p>Returns the platformer itself.</p>"},{"location":"engine/platformer/#setsensorbox","title":"setSensorBox","text":"<p><code>setSensorBox(width, height)</code></p> <p>The platformer spawns invisible sensors to detect collisions. Together, these sensors are thought to form a box which size is related to the size of the individual sensors. This function sets the size of this box. That size should be compatible with the size of the sprite and a size too small may break the platformer. The size of the sensor box is computed automatically, so normally you don't need to modify it.</p> <p>Arguments</p> <ul> <li><code>width</code>: number. The width of the box, in pixels.</li> <li><code>height</code>: number. The height of the box, in pixels.</li> </ul> <p>Returns</p> <p>Returns the platformer itself.</p>"},{"location":"engine/platformer/#showsensors","title":"showSensors","text":"<p><code>showSensors()</code></p> <p>Displays the internal sensors of the platformer, which are invisible by default. For debugging only.</p> <p>Available since: Open Surge 0.5.2</p> <p>Returns</p> <p>Returns the platformer itself.</p> <p>Example</p> <pre><code>using SurgeEngine.Actor;\nusing SurgeEngine.Behaviors.Platformer;\n\nobject \"Testing Stuff\" is \"entity\"\n{\n    actor = Actor(\"Testing Stuff\");\n    platformer = Platformer().showSensors();\n    // ...\n}\n</code></pre>"},{"location":"engine/platformer/#hidesensors","title":"hideSensors","text":"<p><code>hideSensors()</code></p> <p>Hides the internal sensors of the platformer. This is the default.</p> <p>Available since: Open Surge 0.5.2</p> <p>Returns</p> <p>Returns the platformer itself.</p>"},{"location":"engine/player/","title":"Player","text":"<p>The Player object is used to control a specific player/character. Player objects are tagged player.</p> <p>Companion objects can be used to give new abilities to players. Such objects must be indicated in the character definition files (.chr) and are implemented as regular scripts. The engine will automatically spawn the companions as children of the appropriate Player objects.</p> <p>Example</p> <pre><code>// \"Display player name\" is a companion object\n// Companion objects should be tagged \"companion\"\nobject \"Display player name\" is \"companion\"\n{\n    player = parent; // since this object is configured as\n                     // a companion, parent is a reference\n                     // to the appropriate Player object\n\n    state \"main\"\n    {\n        Console.print(\"I am a companion of \" + player.name);\n    }\n}\n</code></pre>"},{"location":"engine/player/#global","title":"Global","text":""},{"location":"engine/player/#player_1","title":"Player","text":"<p><code>Player(playerName)</code></p> <p>Gets the Player object associated with a character in the level. If a player with the specified name doesn't exist in the level, there will be an error.</p> <p>See also: exists.</p> <p>Arguments</p> <ul> <li><code>playerName</code>: string. The name of a character, as defined in a .chr file stored in the characters/ folder.</li> </ul> <p>Returns</p> <p>A Player object.</p> <p>Example <pre><code>using SurgeEngine.Player;\n\n// Gives Surge 1 collectible each second\n// Just place it in your level\nobject \"Collectible Giver\" is \"entity\", \"awake\"\n{\n    player = Player(\"Surge\");\n\n    state \"main\"\n    {\n        if(timeout(1))\n            state = \"give collectible\";\n    }\n\n    state \"give collectible\"\n    {\n        player.collectibles = player.collectibles + 1;\n        state = \"main\";\n    }\n}\n</code></pre></p>"},{"location":"engine/player/#playerget","title":"Player.get","text":"<p><code>Player[i]</code></p> <p>Gets a Player object by its sequence number, as defined in the players entry of the level file.</p> <p>See also: count.</p> <p>Arguments</p> <ul> <li><code>i</code>: number. An integer between <code>0</code> and <code>Player.count - 1</code>, inclusive.</li> </ul> <p>Returns</p> <p>A Player object.</p>"},{"location":"engine/player/#playerexists","title":"Player.exists","text":"<p><code>Player.exists(playerName)</code></p> <p>Checks if a player named <code>playerName</code> exists in the level.</p> <p>Arguments</p> <ul> <li><code>playerName</code>: string. The name of a character.</li> </ul> <p>Returns</p> <p>Returns <code>true</code> if such a player exists in the level.</p>"},{"location":"engine/player/#playeractive","title":"Player.active","text":"<p><code>Player.active</code>: Player object.</p> <p>The player currently in focus. Only one player has focus at any given time.</p> <p>See also: focus, hasFocus, focusable.</p> <p>Example <pre><code>using SurgeEngine.Player;\n\n// Tells the name of the active player\n// Just place it in the level\nobject \"Who am I\" is \"entity\", \"awake\"\n{\n    state \"main\"\n    {\n        player = Player.active;\n        Console.print(\"I am \" + player.name);\n        destroy();\n    }\n}\n</code></pre></p>"},{"location":"engine/player/#playercount","title":"Player.count","text":"<p><code>Player.count</code>: number, read-only.</p> <p>The number of players in the level.</p>"},{"location":"engine/player/#playerinitiallives","title":"Player.initialLives","text":"<p><code>Player.initialLives</code>: number, read-only.</p> <p>The initial number of lives set by the engine.</p> <p>See also: lives.</p>"},{"location":"engine/player/#properties","title":"Properties","text":""},{"location":"engine/player/#id","title":"id","text":"<p><code>id</code>: number, read-only.</p> <p>A number that uniquely identifies the player in the Level.</p> <p>See also: name.</p> <p>Available since: Open Surge 0.6.1</p>"},{"location":"engine/player/#name","title":"name","text":"<p><code>name</code>: string, read-only.</p> <p>The name of the character.</p> <p>See also: id.</p>"},{"location":"engine/player/#direction","title":"direction","text":"<p><code>direction</code>: number, read-only.</p> <p>This number will be +1 if the player is facing right, or -1 if facing left.</p> <p>See also: hflip.</p> <p>Example <pre><code>// let's check if the player is facing right or left\nisFacingRight = (player.direction &gt; 0);\nisFacingLeft = (player.direction &lt; 0);\n</code></pre></p>"},{"location":"engine/player/#input","title":"input","text":"<p><code>input</code>: Input object, read-only.</p> <p>Reference to the Input object of the Player.</p> <p>Example <pre><code>using SurgeEngine.Player;\n\nobject \"Application\"\n{\n    state \"main\"\n    {\n        player = Player.active;\n\n        if(player.input.buttonDown(\"right\"))\n            Console.print(\"Player is holding right\");\n    }\n}\n</code></pre></p>"},{"location":"engine/player/#animation","title":"animation","text":"<p><code>animation</code>: Animation object, read-only.</p> <p>Reference to the Animation object of the Player.</p> <p>See also: anim.</p>"},{"location":"engine/player/#anim","title":"anim","text":"<p><code>anim</code>: number.</p> <p>A shortcut to <code>animation.id</code>: an integer corresponding to the current animation number.</p> <p>See also: animation, id.</p>"},{"location":"engine/player/#anchor","title":"anchor","text":"<p><code>anchor</code>: Vector2 object.</p> <p>A shortcut to <code>animation.anchor</code>.</p> <p>See also: anchor.</p> <p>Available since: Open Surge 0.6.0</p>"},{"location":"engine/player/#hotspot","title":"hotSpot","text":"<p><code>hotSpot</code>: Vector2 object.</p> <p>A shortcut to <code>animation.hotSpot</code>.</p> <p>See also: hotSpot.</p> <p>Available since: Open Surge 0.6.0.</p> <p>Note: in versions prior to 0.6.0, you may get the hot spot using the Animation object.</p>"},{"location":"engine/player/#actionspot","title":"actionSpot","text":"<p><code>actionSpot</code>: Vector2 object.</p> <p>A shortcut to <code>animation.actionSpot</code>.</p> <p>See also: actionSpot.</p> <p>Available since: Open Surge 0.6.0</p>"},{"location":"engine/player/#actionoffset","title":"actionOffset","text":"<p><code>actionOffset</code>: Vector2 object, read-only.</p> <p>A shortcut to <code>animation.actionOffset</code>.</p> <p>See also: actionOffset.</p> <p>Available since: Open Surge 0.6.0</p>"},{"location":"engine/player/#attacking","title":"attacking","text":"<p><code>attacking</code>: boolean, read-only.</p> <p>Is the player attacking, i.e., jumping, rolling, charging or invincible? This flag will be modified if the player is aggressive or inoffensive.</p> <p>See also: aggressive, inoffensive.</p>"},{"location":"engine/player/#midair","title":"midair","text":"<p><code>midair</code>: boolean, read-only.</p> <p>Is the player midair?</p>"},{"location":"engine/player/#stopped","title":"stopped","text":"<p><code>stopped</code>: boolean, read-only.</p> <p>Is the player stopped?</p>"},{"location":"engine/player/#walking","title":"walking","text":"<p><code>walking</code>: boolean, read-only.</p> <p>Is the player walking?</p>"},{"location":"engine/player/#running","title":"running","text":"<p><code>running</code>: boolean, read-only.</p> <p>Is the player running?</p>"},{"location":"engine/player/#jumping","title":"jumping","text":"<p><code>jumping</code>: boolean, read-only.</p> <p>Is the player jumping?</p>"},{"location":"engine/player/#springing","title":"springing","text":"<p><code>springing</code>: boolean, read-only.</p> <p>Is the player in the \"springing\" state, which is typically activated just after hitting a spring?</p> <p>See also: springify.</p>"},{"location":"engine/player/#braking","title":"braking","text":"<p><code>braking</code>: boolean, read-only.</p> <p>Is the player braking?</p>"},{"location":"engine/player/#balancing","title":"balancing","text":"<p><code>balancing</code>: boolean, read-only.</p> <p>Is the player balancing on a ledge?</p>"},{"location":"engine/player/#waiting","title":"waiting","text":"<p><code>waiting</code>: boolean, read-only.</p> <p>Is the player waiting? (happens after remaining stopped for a few seconds)</p>"},{"location":"engine/player/#rolling","title":"rolling","text":"<p><code>rolling</code>: boolean, read-only.</p> <p>Is the player rolling?</p> <p>See also: roll, charging.</p>"},{"location":"engine/player/#charging","title":"charging","text":"<p><code>charging</code>: boolean, read-only.</p> <p>Is the player charging a rolling movement?</p> <p>See also: rolling.</p>"},{"location":"engine/player/#pushing","title":"pushing","text":"<p><code>pushing</code>: boolean, read-only.</p> <p>Is the player pushing a wall?</p>"},{"location":"engine/player/#hit","title":"hit","text":"<p><code>hit</code>: boolean, read-only.</p> <p>Is the player getting hit (i.e., losing collectibles or a shield)?</p> <p>See also: getHit.</p>"},{"location":"engine/player/#blinking","title":"blinking","text":"<p><code>blinking</code>: boolean, read-only.</p> <p>Is the player blinking? (happens just after getting hit)</p>"},{"location":"engine/player/#dying","title":"dying","text":"<p><code>dying</code>: boolean, read-only.</p> <p>Is the player dying or drowning?</p> <p>See also: kill.</p>"},{"location":"engine/player/#drowning","title":"drowning","text":"<p><code>drowning</code>: boolean, read-only.</p> <p>Is the player drowning (i.e., dying underwater)?</p> <p>See also: underwater, dying.</p>"},{"location":"engine/player/#breathing","title":"breathing","text":"<p><code>breathing</code>: boolean, read-only.</p> <p>Is the player breathing an air bubble that is underwater?</p> <p>See also: underwater, breathTime, breathe.</p>"},{"location":"engine/player/#crouchingdown","title":"crouchingDown","text":"<p><code>crouchingDown</code>: boolean, read-only.</p> <p>Is the player crouching down?</p>"},{"location":"engine/player/#lookingup","title":"lookingUp","text":"<p><code>lookingUp</code>: boolean, read-only.</p> <p>Is the player looking up?</p>"},{"location":"engine/player/#winning","title":"winning","text":"<p><code>winning</code>: boolean, read-only.</p> <p>Is the player displaying the \"winning\" animation (after clearing a level)?</p> <p>See also: Level.clear.</p>"},{"location":"engine/player/#underwater","title":"underwater","text":"<p><code>underwater</code>: boolean, read-only.</p> <p>Is the player underwater? Players are considered to be underwater if they are below the water level or if their forciblyUnderwater flag is set to <code>true</code>.</p> <p>See also: secondsToDrown, drowning, breathing, forciblyUnderwater, forciblyOutOfWater, waterlevel.</p>"},{"location":"engine/player/#secondstodrown","title":"secondsToDrown","text":"<p><code>secondsToDrown</code>: number, read-only.</p> <p>The number of seconds to drown, if underwater.</p> <p>See also: underwater, drowning, breathTime.</p>"},{"location":"engine/player/#topspeed","title":"topspeed","text":"<p><code>topspeed</code>: number, read-only.</p> <p>The maximum speed that the player can reach when running naturally, without rolling and with no external forces applied. Given in pixels per second.</p> <p>See also: capspeed.</p>"},{"location":"engine/player/#capspeed","title":"capspeed","text":"<p><code>capspeed</code>: number, read-only.</p> <p>The maximum speed that the player can reach by normal means (e.g., rolling downhill), not considering external forces. Given in pixels per second.</p> <p>See also: topspeed.</p> <p>Available since: Open Surge 0.6.1</p>"},{"location":"engine/player/#hlocktime","title":"hlockTime","text":"<p><code>hlockTime</code>: number, read-only.</p> <p>The time, in seconds, in which the player will not respond to horizontal input when on the ground. Defaults to zero.</p> <p>See also: hlock.</p> <p>Available since: Open Surge 0.6.1</p>"},{"location":"engine/player/#transform","title":"transform","text":"<p><code>transform</code>: Transform object, read-only.</p> <p>The transform of the Player.</p>"},{"location":"engine/player/#collider","title":"collider","text":"<p><code>collider</code>: Collider object, read-only.</p> <p>A collider associated with this Player.</p>"},{"location":"engine/player/#shield","title":"shield","text":"<p><code>shield</code>: string | <code>null</code>.</p> <p>One of the following: \"shield\", \"fire\", \"thunder\", \"water\", \"acid\", \"wind\" or <code>null</code> (if there is no shield).</p> <p>See also: invulnerable.</p>"},{"location":"engine/player/#invincible","title":"invincible","text":"<p><code>invincible</code>: boolean.</p> <p>Used to make the player invincible. Defaults to <code>false</code>.</p> <p>See also: invulnerable, aggressive.</p>"},{"location":"engine/player/#turbo","title":"turbo","text":"<p><code>turbo</code>: boolean.</p> <p>Turbocharged mode (increased player speed). Defaults to <code>false</code>.</p>"},{"location":"engine/player/#frozen","title":"frozen","text":"<p><code>frozen</code>: boolean.</p> <p>Disable/enable player movement. Defaults to <code>false</code>.</p>"},{"location":"engine/player/#aggressive","title":"aggressive","text":"<p><code>aggressive</code>: boolean.</p> <p>If set to <code>true</code>, the attacking flag will be <code>true</code> regardless of the state of the player. The player will be able to hit the baddies just by touching them. Defaults to <code>false</code>.</p> <p>See also: attacking, inoffensive.</p> <p>Available since: Open Surge 0.5.1</p>"},{"location":"engine/player/#inoffensive","title":"inoffensive","text":"<p><code>inoffensive</code>: boolean.</p> <p>If set to <code>true</code>, the attacking flag will be <code>false</code> regardless of the state of the player. The player will be vulnerable to damage even if jumping, rolling or charging. Defaults to <code>false</code>.</p> <p>Note: if the player is simultaneously aggressive and inoffensive, the aggressive behavior prevails.</p> <p>Warning</p> <p>Enabling the <code>inoffensive</code> flag will make the player generally vulnerable. This may lead to unintended side-effects: the player may take damage even when it shouldn't. Consider using springify for temporary vulnerability instead.</p> <p>See also: attacking, aggressive.</p> <p>Available since: Open Surge 0.6.1</p>"},{"location":"engine/player/#invulnerable","title":"invulnerable","text":"<p><code>invulnerable</code>: boolean.</p> <p>If set to <code>true</code>, the player will be invulnerable to damage. It's like having an invisible shield that is permanent. The player may still be killed if crushed, by falling into a pit, by drowning, or by calling kill.</p> <p>Available since: Open Surge 0.6.1</p> <p>See also: invincible, immortal.</p>"},{"location":"engine/player/#immortal","title":"immortal","text":"<p><code>immortal</code>: boolean.</p> <p>If an immortal player appears to be killed, it will appear to be ressurrected on its spawn point without losing a life.</p> <p>See also: lives.</p> <p>Available since: Open Surge 0.6.1</p>"},{"location":"engine/player/#secondary","title":"secondary","text":"<p><code>secondary</code>: boolean.</p> <p>A secondary player plays a secondary role and interacts with items in different ways. It cannot smash item boxes, activate goal signs, etc. This flag is best used with AI-controlled players. Defaults to <code>false</code>.</p> <p>Available since: Open Surge 0.6.1</p>"},{"location":"engine/player/#focusable","title":"focusable","text":"<p><code>focusable</code>: boolean.</p> <p>A focusable player can receive focus. Defaults to <code>true</code>.</p> <p>See also: focus, hasFocus, Player.active.</p> <p>Available since: Open Surge 0.6.1</p> <p>Note: if only a single player exists in the level, then that player will have focus regardless of the value of this flag.</p>"},{"location":"engine/player/#breathtime","title":"breathTime","text":"<p><code>breathTime</code>: number.</p> <p>The maximum number of seconds the player can remain underwater without breathing.</p> <p>See also: underwater, secondsToDrown.</p>"},{"location":"engine/player/#forciblyunderwater","title":"forciblyUnderwater","text":"<p><code>forciblyUnderwater</code>: boolean.</p> <p>If set to <code>true</code>, the underwater flag will be true regardless of the water level. If set to <code>false</code>, the underwater flag will be true only if the player is below the water level. Defaults to <code>false</code>.</p> <p>See also: underwater, forciblyOutOfWater, waterlevel.</p> <p>Available since: Open Surge 0.6.1</p>"},{"location":"engine/player/#forciblyoutofwater","title":"forciblyOutOfWater","text":"<p>If set to <code>true</code>, the underwater mechanics will be disabled, even if the player is below the water level. If forciblyUnderwater is also <code>true</code>, this flag will do nothing. Defaults to <code>false</code>.</p> <p>See also: underwater, waterlevel, forciblyUnderwater.</p> <p>Available since: Open Surge 0.6.1</p>"},{"location":"engine/player/#layer","title":"layer","text":"<p><code>layer</code>: string.</p> <p>The current layer of the player. One of the following: \"green\", \"yellow\", \"default\". This property tells you which bricks will be sensed, depending on their layer.</p>"},{"location":"engine/player/#visible","title":"visible","text":"<p><code>visible</code>: boolean.</p> <p>Should the player sprite be rendered? Defaults to <code>true</code>.</p>"},{"location":"engine/player/#collectibles","title":"collectibles","text":"<p><code>collectibles</code>: number.</p> <p>The number of collectibles, an integer shared between all player objects.</p>"},{"location":"engine/player/#lives","title":"lives","text":"<p><code>lives</code>: number.</p> <p>The number of lives, an integer shared between all player objects.</p> <p>See also: initialLives.</p>"},{"location":"engine/player/#score","title":"score","text":"<p><code>score</code>: number.</p> <p>The score of the player, an integer value shared between all player objects.</p>"},{"location":"engine/player/#speed","title":"speed","text":"<p><code>speed</code>: number.</p> <p>The speed of the player, in pixels per second. This will be mapped automatically to gsp or xsp, depending on whether the player is touching the ground or not.</p> <p>See also: gsp, xsp.</p>"},{"location":"engine/player/#gsp","title":"gsp","text":"<p><code>gsp</code>: number.</p> <p>Ground speed, in pixels per second. Prefer using speed instead, since <code>gsp</code> is only meaningful if the player is touching the ground.</p> <p>See also: speed.</p>"},{"location":"engine/player/#xsp","title":"xsp","text":"<p><code>xsp</code>: number.</p> <p>Horizontal speed, in pixels per second (useful while midair). Prefer using speed instead.</p> <p>See also: speed.</p>"},{"location":"engine/player/#ysp","title":"ysp","text":"<p><code>ysp</code>: number.</p> <p>Vertical speed, in pixels per second.</p>"},{"location":"engine/player/#angle","title":"angle","text":"<p><code>angle</code>: number.</p> <p>The angle of the player, in degrees. The same as <code>transform.angle</code>.</p> <p>See also: slope, transform.</p>"},{"location":"engine/player/#slope","title":"slope","text":"<p><code>slope</code>: number, read-only.</p> <p>The angle detected by the physics system, in degrees. Unlike angle, slope is read-only and does not feature any smoothing for visual aesthetics. Its purpose is to be a helper for physics calculations.</p> <p>See also: angle.</p> <p>Available since: Open Surge 0.5.2</p>"},{"location":"engine/player/#width","title":"width","text":"<p><code>width</code>: number, read-only.</p> <p>The width of the player sprite, in pixels.</p> <p>See also: height.</p>"},{"location":"engine/player/#height","title":"height","text":"<p><code>height</code>: number, read-only.</p> <p>The height of the player sprite, in pixels.</p> <p>See also: width.</p>"},{"location":"engine/player/#hflip","title":"hflip","text":"<p><code>hflip</code>: boolean.</p> <p>Used to horizontally flip the sprite of the player relative to its direction. Defaults to <code>false</code>. Changing this flag does not change the direction of the player in any way. It only changes the way the sprite is rendered. Also, reading this flag alone does not tell you whether the sprite is facing left or right. Use it in addition to the direction of the player for that.</p> <p>See also: direction, vflip.</p> <p>Available since: Open Surge 0.6.1</p> <p>Example</p> <pre><code>// make the sprite appear in accordance with player.direction\nplayer.hflip = false;\n\n// make the sprite appear flipped relative to player.direction\nplayer.hflip = true;\n\n// make the sprite appear facing right, regardless of player.direction\nplayer.hflip = (player.direction &lt; 0);\n\n// make the sprite appear facing left, regardless of player.direction\nplayer.hflip = (player.direction &gt; 0);\n\n// spriteDirection is analogous to player.direction\nspriteDirection = player.direction * (player.hflip ? -1 : 1);\n\n// let's check if the sprite is facing right or left\nisFacingRight = (spriteDirection &gt; 0);\nisFacingLeft = (spriteDirection &lt; 0);\n</code></pre>"},{"location":"engine/player/#vflip","title":"vflip","text":"<p><code>vflip</code>: boolean.</p> <p>Used to vertically flip the sprite of the player. Defaults to <code>false</code>.</p> <p>See also: hflip.</p> <p>Available since: Open Surge 0.6.1</p>"},{"location":"engine/player/#functions","title":"Functions","text":""},{"location":"engine/player/#bounce","title":"bounce","text":"<p><code>bounce(hazard | null)</code></p> <p>Makes the player bounce after smashing a hazard. The trajectory of the movement will be computed according to the position of the hazard. If no hazard is present, you may pass <code>null</code> as the argument.</p> <p>Arguments</p> <ul> <li><code>hazard</code>: Actor object. The hazard.</li> </ul> <p>Example <pre><code>using SurgeEngine.Player;\nusing SurgeEngine.Actor;\nusing SurgeEngine.Collisions.CollisionBox;\n\nobject \"Shield Box\" is \"entity\"\n{\n    actor = Actor(\"Shield Box\");\n    shieldCollider = CollisionBox(32,32);\n\n    state \"main\"\n    {\n        player = Player.active;\n        if(player.attacking) {\n            if(player.collider.collidesWith(shieldCollider)) {\n                if(player.midair)\n                    player.bounce(actor);\n                player.shield = \"fire\";\n                destroy();\n            }\n        }\n    }\n}\n</code></pre></p>"},{"location":"engine/player/#bounceback","title":"bounceBack","text":"<p><code>bounceBack(hazard)</code></p> <p>Makes the player bounce after smashing a hazard. If the player comes at the hazard from below, the player is thrown downwards. If not, the player is thrown upwards. The <code>hazard</code> parameter is mandatory.</p> <p>Arguments</p> <ul> <li><code>hazard</code>: Actor object. The hazard.</li> </ul>"},{"location":"engine/player/#gethit","title":"getHit","text":"<p><code>getHit(hazard | null)</code></p> <p>Makes the player get hit. Call it whenever the player gets hit by a hazard. The hit movement will be calculated according to the position of the hazard. If no hazard is present, you may pass <code>null</code> as the argument.</p> <p>Arguments</p> <ul> <li><code>hazard</code>: Actor object. The hazard.</li> </ul> <p>See also: hit.</p>"},{"location":"engine/player/#kill","title":"kill","text":"<p><code>kill()</code></p> <p>Kills the player.</p> <p>See also: dying.</p>"},{"location":"engine/player/#breathe","title":"breathe","text":"<p><code>breathe()</code></p> <p>Makes the player breathe (underwater only).</p> <p>See also: breathing.</p>"},{"location":"engine/player/#restore","title":"restore","text":"<p><code>restore()</code></p> <p>Restores the player to a vulnerable state.</p> <p>Available since: Open Surge 0.6.1</p>"},{"location":"engine/player/#springify","title":"springify","text":"<p><code>springify()</code></p> <p>Activates the \"springing\" state.</p> <p>See also: springing, restore.</p>"},{"location":"engine/player/#roll","title":"roll","text":"<p><code>roll()</code></p> <p>Makes the player roll.</p> <p>See also: rolling.</p>"},{"location":"engine/player/#hlock","title":"hlock","text":"<p><code>hlock(seconds)</code></p> <p>Locks the horizontal controls of the player for the specified time. Left and right input will be ignored during that time.</p> <p>See also: hlockTime.</p> <p>Arguments</p> <ul> <li><code>seconds</code>: number. How long the horizontal controls of the player will stay locked? This usually should be set to a value no higher than <code>0.5</code>.</li> </ul> <p>Note: since Open Surge 0.6.1, the locking will not take place if the player is midair.</p>"},{"location":"engine/player/#focus","title":"focus","text":"<p><code>focus()</code></p> <p>Focuses on the player. The focused player is controlled by the user. Only one player has focus at any given time.</p> <p>See also: hasFocus, focusable, Player.active.</p> <p>Returns</p> <p>Returns <code>true</code> on success, <code>false</code> otherwise.</p>"},{"location":"engine/player/#hasfocus","title":"hasFocus","text":"<p><code>hasFocus()</code></p> <p>Does the player have focus?</p> <p>See also: focus, focusable, Player.active.</p> <p>Returns</p> <p>Returns <code>true</code> if the player has focus, <code>false</code> otherwise.</p>"},{"location":"engine/player/#moveby","title":"moveBy","text":"<p><code>moveBy(dx, dy)</code></p> <p>Moves the player by a (<code>dx</code>,<code>dy</code>) offset after the physics update of the current framestep. This is similar to calling <code>player.transform.translateBy(dx, dy)</code> in <code>lateUpdate()</code>.</p> <p>See also: lateUpdate, translateBy.</p> <p>Available since: Open Surge 0.6.1</p> <p>Arguments</p> <ul> <li><code>dx</code>: number. Horizontal offset in pixels.</li> <li><code>dy</code>: number. Vertical offset in pixels.</li> </ul> <p>Example</p> <pre><code>// Let's compare player.moveBy() to\n// player.transform.translateBy()\ndx = 5;\ndy = 0;\n\n// this moves the player AFTER the physics update\nplayer.moveBy(dx, dy);\n\n// this moves the player BEFORE the physics update\n// (immediately), unless you call it in lateUpdate()\nplayer.transform.translateBy(dx, dy);\n</code></pre>"},{"location":"engine/player/#move","title":"move","text":"<p><code>move(offset)</code></p> <p>Moves the player by the given <code>offset</code> after the physics update of the current framestep. Calling <code>player.move(offset)</code> is equivalent to calling <code>player.moveBy(offset.x, offset.y)</code>.</p> <p>See also: moveBy.</p> <p>Available since: Open Surge 0.6.1</p> <p>Arguments</p> <ul> <li><code>offset</code>: Vector2 object. Offset vector.</li> </ul>"},{"location":"engine/player/#transforminto","title":"transformInto","text":"<p><code>player.transformInto(characterName)</code></p> <p>Transforms the player into the character named <code>characterName</code>. The transformation succeeds only if there is such a character.</p> <p>Available since: Open Surge 0.6.1</p> <p>Arguments</p> <ul> <li><code>characterName</code>: string. The name of a character, as defined in a .chr file.</li> </ul> <p>Returns</p> <p>Returns <code>true</code> if the transformation is successful. Transforming a player into itself is considered successful, but nothing happens in this case.</p> <pre><code>// this player will become Surge\nplayer.transformInto(\"Surge\");\n\n// this player will become Tux\nplayer.transformInto(\"Tux\");\n\n// the following transformation will fail:\nif(!player.transformInto(\"non-existent-character\"))\n    Console.print(\"No transformation took place!\");\n\n// After a successful transformation:\n// - player.name will change;\n// - player.id will not change!\n</code></pre>"},{"location":"engine/prefs/","title":"Prefs","text":"<p>Prefs is a SurgeEngine component used to save/load data to/from the disk (permanent storage). Prefs is a (key, value) storage that works like a Dictionary, but its data can be persisted between game sessions. Each (key, value) pair is called an entry. Prefs holds multiple entries.</p> <p>Primitive types</p> <p>Each entry can hold a value of any primitive type: string, number, boolean or null. Objects cannot be saved or loaded directly, but you may serialize them. If you try to save an object directly, it will be converted to and saved as a string.</p> <p>Example <pre><code>using SurgeEngine.Prefs;\n\n// Run the Application multiple times and see\n// how the counter increments\nobject \"Application\"\n{\n    state \"main\"\n    {\n        Prefs[\"counter\"] += 1;\n        Console.print(\"counter: \" + Prefs[\"counter\"]);\n\n        state = \"idle\";\n    }\n\n    state \"idle\"\n    {\n    }\n\n    fun constructor()\n    {\n        if(!Prefs.has(\"counter\"))\n            Prefs[\"counter\"] = 0;\n    }\n}\n</code></pre></p>"},{"location":"engine/prefs/#functions","title":"Functions","text":""},{"location":"engine/prefs/#get","title":"get","text":"<p><code>get(key)</code></p> <p>Gets the value of the specified key. Instead of calling <code>get()</code> directly, you may equivalently use the <code>[ ]</code> operator.</p> <p>Arguments</p> <ul> <li><code>key</code>: string. The key must always be a string.</li> </ul> <p>Returns</p> <p>Returns the value associated with the specified key, or <code>null</code> if there is no such value.</p>"},{"location":"engine/prefs/#set","title":"set","text":"<p><code>set(key, value)</code></p> <p>Sets the value of the specified key. Instead of calling <code>set()</code> directly, you may equivalently use the <code>[ ]</code> operator.</p> <p>Arguments</p> <ul> <li><code>key</code>: string. The key must always be a string.</li> <li><code>value</code>: any type. The value you want to store.</li> </ul>"},{"location":"engine/prefs/#clear","title":"clear","text":"<p><code>clear()</code></p> <p>Removes all entries from Prefs. Use this very carefully, because data will be lost.</p>"},{"location":"engine/prefs/#delete","title":"delete","text":"<p><code>delete(key)</code></p> <p>Deletes the entry having the specified key.</p> <p>Arguments</p> <ul> <li><code>key</code>: string. The key of the entry to be removed.</li> </ul>"},{"location":"engine/prefs/#has","title":"has","text":"<p><code>has(key)</code></p> <p>Checks if a specific entry exists.</p> <p>Arguments</p> <ul> <li><code>key</code>: string. The key of the entry.</li> </ul> <p>Returns</p> <p>Returns <code>true</code> if the specified entry exists, <code>false</code> otherwise.</p>"},{"location":"engine/prefs/#save","title":"save","text":"<p><code>save()</code></p> <p>Writes the data to secondary storage. The data isn't saved immediately after you set an entry, but it is saved on key moments. Since the data is persisted automatically, normally you don't need to call this.</p>"},{"location":"engine/screen/","title":"Screen","text":"<p>Screen settings. The screen represents the backbuffer, i.e., the texture in which things are drawn.</p> <p>Example <pre><code>// display the size of the screen\nusing SurgeEngine.Video.Screen;\n\nobject \"Application\"\n{\n    width = Screen.width;\n    height = Screen.height;\n\n    state \"main\"\n    {\n        Console.print(width + \"x\" + height);\n        state = \"done\";\n    }\n\n    state \"done\"\n    {\n    }\n}\n</code></pre></p>"},{"location":"engine/screen/#properties","title":"Properties","text":""},{"location":"engine/screen/#width","title":"width","text":"<p><code>width</code>: number, read-only.</p> <p>The width of the screen, in pixels.</p>"},{"location":"engine/screen/#height","title":"height","text":"<p><code>height</code>: number, read-only.</p> <p>The height of the screen, in pixels.</p>"},{"location":"engine/sensor/","title":"Sensor","text":"<p>A Sensor is used to detect collisions with bricks. Due to performance optimizations, passable bricks (or bricks that are too far off camera) can't be sensed.</p> <p>Example <pre><code>using SurgeEngine.Actor;\nusing SurgeEngine.Collisions.Sensor;\n\nobject \"SensorToy\" is \"entity\"\n{\n    actor = Actor(\"SensorToy\");\n    sensor = Sensor(0, -25, 1, 50); // a vertical sensor\n\n    state \"main\"\n    {\n        if(sensor.status != null)\n            Console.print(\"Got a brick of type \" + sensor.status);\n    }\n\n    fun constructor()\n    {\n        sensor.visible = true;\n    }\n}\n</code></pre></p>"},{"location":"engine/sensor/#factory","title":"Factory","text":""},{"location":"engine/sensor/#sensor_1","title":"Sensor","text":"<p><code>Collisions.Sensor(x, y, width, height)</code></p> <p>Spawns a new Sensor with the specified dimensions and having its top-left corner located at position (x, y) relative to the parent object. A Sensor is either a vertical or a horizontal bar that is 1-pixel thin. Both width and height must be positive integers, and at least one of them must be equal to 1.</p> <p>Arguments</p> <ul> <li><code>x</code>: number. The x-position of the top-left corner of the sensor, relative to the parent object.</li> <li><code>y</code>: number. The y-position of the top-left corner of the sensor, relative to the parent object.</li> <li><code>width</code>: number. The width of the sensor, in pixels. Must be a positive integer.</li> <li><code>height</code>: number. The height of the sensor, in pixels. Must be a positive integer.</li> </ul> <p>Returns</p> <p>A Sensor with the specified parameters.</p>"},{"location":"engine/sensor/#properties","title":"Properties","text":""},{"location":"engine/sensor/#status","title":"status","text":"<p><code>status</code>: string | <code>null</code>, read-only.</p> <p>The type of the brick colliding with the sensor (either \"solid\" or \"cloud\"). If the sensor isn't colliding with a brick, or if it's disabled, its status will be <code>null</code>.</p>"},{"location":"engine/sensor/#visible","title":"visible","text":"<p><code>visible</code>: boolean.</p> <p>Should the sensor be rendered? Useful for debugging. Defaults to <code>false</code>.</p>"},{"location":"engine/sensor/#enabled","title":"enabled","text":"<p><code>enabled</code>: boolean.</p> <p>Indicates whether the sensor is enabled or not. Defaults to <code>true</code>.</p>"},{"location":"engine/sensor/#layer","title":"layer","text":"<p><code>layer</code>: string.</p> <p>The layer of this sensor. This property assumes one of the following values: <code>\"default\"</code>, <code>\"green\"</code> or <code>\"yellow\"</code>. If it's set to <code>\"default\"</code>, then all non-passable bricks and brick-like objects are sensed. If it's set to <code>\"green\"</code>, then all non-passable bricks and brick-like objects are sensed, except the ones in the yellow layer. Conversely, if it's set to <code>\"yellow\"</code>, then all non-passable bricks and brick-like objects are sensed, except the ones in the green layer.</p> <p>Available since: Open Surge 0.6.1</p>"},{"location":"engine/sound/","title":"Sound","text":"<p>The Sound object lets you play samples, which are short sounds like: jump, brake, select, hit, etc. Sounds are loaded entirely in the memory; therefore, this object is meant to be used only with samples. If you need to play longer things like music, consider using Music instead.</p> <p>Example <pre><code>using SurgeEngine.Audio.Sound;\n\n// will play a sound every 5 seconds\nobject \"SoundTest\"\n{\n    sound = Sound(\"samples/jump.wav\");\n\n    state \"main\"\n    {\n        sound.play();\n        state = \"wait\";\n    }\n\n    state \"wait\"\n    {\n        if(timeout(5.0))\n            state = \"main\";\n    }\n}\n</code></pre></p>"},{"location":"engine/sound/#factory","title":"Factory","text":""},{"location":"engine/sound/#sound_1","title":"Sound","text":"<p><code>Audio.Sound(path)</code></p> <p>Creates a Sound object associated with a certain file.</p> <p>Arguments</p> <ul> <li><code>path</code>: string. The path of the sound - usually a file in the samples/ folder.</li> </ul> <p>Returns</p> <p>A Sound object.</p>"},{"location":"engine/sound/#properties","title":"Properties","text":""},{"location":"engine/sound/#playing","title":"playing","text":"<p><code>playing</code>: boolean, read-only.</p> <p>Will be <code>true</code> if the sound is playing.</p>"},{"location":"engine/sound/#volume","title":"volume","text":"<p><code>volume</code>: number.</p> <p>The volume of the sound, a value between 0.0 and 1.0, inclusive (zero means silence).</p>"},{"location":"engine/sound/#functions","title":"Functions","text":""},{"location":"engine/sound/#play","title":"play","text":"<p><code>play()</code></p> <p>Plays the sound.</p>"},{"location":"engine/sound/#stop","title":"stop","text":"<p><code>stop()</code></p> <p>Stops the sound.</p>"},{"location":"engine/surgeengine/","title":"SurgeEngine","text":"<p>The SurgeEngine plugin is the interface between SurgeScript (scripting language) and Open Surge (game engine).</p> <p>Example</p> <pre><code>using SurgeEngine;\n\n// Open Surge version\nobject \"Application\"\n{\n    state \"main\"\n    {\n        Console.print(SurgeEngine.version);\n        state = \"blank\";\n    }\n\n    state \"blank\"\n    {\n    }\n}\n</code></pre>"},{"location":"engine/surgeengine/#properties","title":"Properties","text":""},{"location":"engine/surgeengine/#version","title":"version","text":"<p><code>version</code>: string, read-only.</p> <p>Version of the Open Surge Engine.</p>"},{"location":"engine/surgeengine/#mobile","title":"mobile","text":"<p><code>mobile</code>: boolean, read-only.</p> <p>Whether or not the engine has been launched in mobile mode. The user may be playing on a mobile device or on a Desktop computer with the mobile mode enabled.</p> <p>Available since: Open Surge 0.6.1</p>"},{"location":"engine/text/","title":"Text","text":"<p>The Text object allows you to display custom texts in the game. The parent object is required to be an entity.</p>"},{"location":"engine/text/#factory","title":"Factory","text":""},{"location":"engine/text/#text_1","title":"Text","text":"<p><code>UI.Text(font)</code></p> <p>Spawns a new Text object with the given font name. If <code>null</code> is provided as the font name, then a default font will be used.</p> <p>Arguments</p> <ul> <li><code>font</code>: string. The name of a font (defined in the fonts/ folder).</li> </ul> <p>Returns</p> <p>A Text object.</p> <p>Example <pre><code>using SurgeEngine.UI.Text;\nusing SurgeEngine.Transform;\nusing SurgeEngine.Player;\n\n// Place this on your level to display\n// the name of the player\nobject \"PlayerName\" is \"entity\", \"awake\"\n{\n    text = Text(\"GoodNeighbors\");\n    transform = Transform();\n\n    state \"main\"\n    {\n        // position the text\n        player = Player.active;\n        transform.position = player.transform.position;\n        transform.translateBy(0, -50);\n\n        // configure the text\n        text.align = \"center\";\n        text.text = player.name;\n    }\n}\n</code></pre></p>"},{"location":"engine/text/#properties","title":"Properties","text":""},{"location":"engine/text/#text_2","title":"text","text":"<p><code>text</code>: string.</p> <p>The text to be displayed.</p>"},{"location":"engine/text/#font","title":"font","text":"<p><code>font</code>: string, read-only.</p> <p>The name of the font in use.</p>"},{"location":"engine/text/#size","title":"size","text":"<p><code>size</code>: Vector2 object, read-only.</p> <p>The size, in pixels, of the rendered text.</p> <p>Available since: Open Surge 0.5.1</p>"},{"location":"engine/text/#align","title":"align","text":"<p><code>align</code>: string.</p> <p>The alignment of the text. One of the following: \"left\", \"center\", \"right\".</p>"},{"location":"engine/text/#visible","title":"visible","text":"<p><code>visible</code>: boolean.</p> <p>Is the Text object visible?</p>"},{"location":"engine/text/#maxlength","title":"maxLength","text":"<p><code>maxLength</code>: number.</p> <p>The maximum number of characters to be displayed, ignoring  tags and spaces. <p>Available since: Open Surge 0.5.1</p>"},{"location":"engine/text/#maxwidth","title":"maxWidth","text":"<p><code>maxWidth</code>: number.</p> <p>The maximum width of the text, in pixels. Setting this value will enable wordwrap.</p>"},{"location":"engine/text/#zindex","title":"zindex","text":"<p><code>zindex</code>: number.</p> <p>The zindex of the Text object. Defaults to 0.5.</p>"},{"location":"engine/text/#offset","title":"offset","text":"<p><code>offset</code>: Vector2 object.</p> <p>An (x,y) offset relative to the parent object. Defaults to zero.</p>"},{"location":"engine/transform/","title":"Transform","text":"<p>Transform encapsulates a 2D Transform. It comes with functions for translating, rotating and scaling things - and it's very useful for games! Whenever you spawn a Transform on your object, you gain power to command its position, rotation and scale.</p> <p>The Transform component can only be spawned on entities. If an entity with a Transform component has any children, the transform of the children will be affected by the transform of their parent. Example: if you move an object, its children will be moved by the same amount.</p>"},{"location":"engine/transform/#factory","title":"Factory","text":""},{"location":"engine/transform/#transform_1","title":"Transform","text":"<p><code>Transform()</code></p> <p>Spawns a Transform on the object. The object is required to be an entity.</p> <p>Returns</p> <p>A Transform object.</p> <p>Example <pre><code>using SurgeEngine.Actor;\nusing SurgeEngine.Transform;\n\nobject \"My Level Object\" is \"entity\"\n{\n    public transform = Transform();\n    actor = Actor(\"My Level Object\");\n\n    state \"main\"\n    {\n        // prints the position of this entity\n        Console.print(transform.position);\n    }\n}\n</code></pre></p>"},{"location":"engine/transform/#properties","title":"Properties","text":""},{"location":"engine/transform/#position","title":"position","text":"<p><code>position</code>: Vector2 object.</p> <p>The position of the object in world coordinates.</p> <p>Only use this property if you need to read the position of the object or to set it to a fixed value. If you need to move the entity, use translateBy instead.</p> <p>Example <pre><code>using SurgeEngine.Actor;\nusing SurgeEngine.Player;\nusing SurgeEngine.Transform;\n\nobject \"My Level Object\" is \"entity\"\n{\n    public transform = Transform();\n    actor = Actor(\"My Level Object\");\n\n    state \"main\"\n    {\n        // this will show the distance between\n        // this entity and the active player\n        player = Player.active;\n        Console.print(distanceTo(player));\n    }\n\n    fun distanceTo(obj)\n    {\n        return transform.position.distanceTo(obj.transform.position);\n    }\n}\n</code></pre></p>"},{"location":"engine/transform/#angle","title":"angle","text":"<p><code>angle</code>: number.</p> <p>The angle, in degrees, specifying the rotation of the object.</p> <p>Unless you need to read or to set the angle of the object to a pre-determined value, consider using rotate instead.</p>"},{"location":"engine/transform/#localposition","title":"localPosition","text":"<p><code>localPosition</code>: Vector2 object.</p> <p>The position of the object relative to the parent object.</p> <p>Only use this property if you need to read the position of the object or to set it to a fixed value. If you need to move the entity, use translateBy instead.</p>"},{"location":"engine/transform/#localangle","title":"localAngle","text":"<p><code>localAngle</code>: number.</p> <p>The angle, in degrees, relative to the angle of the parent object.</p> <p>Unless you need to read or to set the angle of the object to a pre-determined value, consider using rotate instead.</p>"},{"location":"engine/transform/#localscale","title":"localScale","text":"<p><code>localScale</code>: Vector2 object.</p> <p>The local scale of the object. A value of 1.0 in both axes means the default size. A value of 2.0, twice the default size, and so on.</p>"},{"location":"engine/transform/#lossyscale","title":"lossyScale","text":"<p><code>lossyScale</code>: Vector2 object, read-only.</p> <p>An approximation of the world scale of the object. It's not very accurate (the parent transform may be rotated and scaled), but it's useful.</p> <p>Available since: Open Surge 0.5.1</p>"},{"location":"engine/transform/#right","title":"right","text":"<p><code>right</code>: Vector2 object, read-only.</p> <p>The right vector of the transform in world space. Unlike Vector2.right, this property considers the rotation of the transform.</p> <p>Available since: Open Surge 0.5.1</p>"},{"location":"engine/transform/#up","title":"up","text":"<p><code>up</code>: Vector2 object, read-only.</p> <p>The up vector of the transform in world space. Unlike Vector2.up, this property considers the rotation of the transform.</p> <p>Available since: Open Surge 0.5.1</p>"},{"location":"engine/transform/#functions","title":"Functions","text":""},{"location":"engine/transform/#translateby","title":"translateBy","text":"<p><code>translateBy(dx, dy)</code></p> <p>Translates (moves) the object by (<code>dx</code>, <code>dy</code>).</p> <p>Available since: Open Surge 0.5.1. See the note below.</p> <p>Arguments</p> <ul> <li><code>dx</code>: number. Specifies how much to move the object in the x-axis.</li> <li><code>dy</code>: number. Specifies how much to move the object in the y-axis.</li> </ul> <p>Example <pre><code>using SurgeEngine.Actor;\nusing SurgeEngine.Transform;\n\nobject \"My Level Object\" is \"entity\"\n{\n    public transform = Transform();\n    actor = Actor(\"My Level Object\");\n\n    state \"main\"\n    {\n        // move the entity at a speed of\n        // 50 pixels/second, to the right\n        transform.translateBy(50 * Time.delta, 0);\n\n        // the command below would move it\n        // at a speed of 30 pixels per FRAME\n        //transform.translateBy(30, 0); // don't do this\n\n        // since the framerate may vary across\n        // different systems, it's advisable\n        // to multiply the value by Time.delta\n        // to make the behavior consistent.\n    }\n}\n</code></pre></p> <p>Note: in versions prior to 0.5.1, this function was called <code>move</code>.</p>"},{"location":"engine/transform/#translate","title":"translate","text":"<p><code>translate(delta)</code></p> <p>Translates the object by a <code>delta</code> vector.</p> <p>Arguments</p> <ul> <li><code>delta</code>: Vector2 object.</li> </ul>"},{"location":"engine/transform/#rotate","title":"rotate","text":"<p><code>rotate(deg)</code></p> <p>Rotates the object by <code>deg</code> degrees.</p> <p>Arguments</p> <ul> <li><code>deg</code>: number. An angle in degrees.</li> </ul> <p>Example <pre><code>using SurgeEngine.Actor;\nusing SurgeEngine.Transform;\n\nobject \"My Level Object\" is \"entity\"\n{\n    public transform = Transform();\n    actor = Actor(\"My Level Object\");\n\n    state \"main\"\n    {\n        // rotate the entity at a speed of\n        // 45 degrees per second\n        transform.rotate(45 * Time.delta);\n    }\n}\n</code></pre></p>"},{"location":"engine/transform/#scaleby","title":"scaleBy","text":"<p><code>scaleBy(sx, sy)</code></p> <p>Scales the object by horizontal and vertical factors <code>sx</code> and <code>sy</code>, respectively.</p> <p>Available since: Open Surge 0.6.1.</p> <p>Arguments</p> <ul> <li><code>sx</code>: number. Horizontal scale factor. Value <code>1.0</code> means no change.</li> <li><code>sy</code>: number. Vertical scale factor. Value <code>1.0</code> means no change.</li> </ul>"},{"location":"engine/transform/#scale","title":"scale","text":"<p><code>scale(resize)</code></p> <p>Scales the object by a <code>resize</code> vector.</p> <p>Available since: Open Surge 0.6.1.</p> <p>Arguments</p> <ul> <li><code>resize</code>: Vector2 object. <code>Vector2(1,1)</code> means no change.</li> </ul>"},{"location":"engine/transform/#lookat","title":"lookAt","text":"<p><code>lookAt(position)</code></p> <p>Rotates the transform so that its right vector points at the given position. Use this function to make your object look at some point in world space.</p> <p>Available since: Open Surge 0.5.1. See the note below.</p> <p>Arguments</p> <ul> <li><code>position</code>: Vector2 object. A point in world space.</li> </ul> <p>Example <pre><code>using SurgeEngine.Actor;\nusing SurgeEngine.Player;\nusing SurgeEngine.Transform;\n\nobject \"My Level Object\" is \"entity\"\n{\n    public transform = Transform();\n    actor = Actor(\"My Level Object\");\n\n    state \"main\"\n    {\n        player = Player.active;\n        transform.lookAt(player.transform.position);\n    }\n}\n</code></pre></p> <p>Note: in versions prior to 0.5.1, this function accepted a Transform parameter.</p>"},{"location":"engine/vector2/","title":"Vector2","text":"<p>Vector2 is a vector in 2D space. A vector is a mathematical object that has direction and length, usually represented by an arrow. A Vector2 can also be represented by a pair of (x,y) coordinates.</p> <p>In SurgeScript, vectors are immutable. Once created, you can't change their coordinates directly. In order to bring about change (say, in the position of an entity), you need to create a new vector.</p> <p>Vector2 objects have been designed in such a way that their functions make them chainable. You can compose different vector operations using english-based terms, as in the example below:</p> <p>Example</p> <pre><code>using SurgeEngine.Player;\nusing SurgeEngine.Vector2;\n...\nplayer = Player.active;\n...\nl = Vector2(6, 8).scaledBy(0.5).length; // number five\nu = Vector2.right.rotatedBy(45).scaledBy(2); // a vector\nv = player.transform.position.translatedBy(5,0); // a vector\n...\n</code></pre> <p>Note: In Open Surge, the x-axis grows to the right of the screen and the y-axis grows downwards, as in many other 2D games and software.</p>"},{"location":"engine/vector2/#factory","title":"Factory","text":""},{"location":"engine/vector2/#vector2_1","title":"Vector2","text":"<p><code>Vector2(x, y)</code></p> <p>Spawns a 2D vector with the given coordinates.</p> <p>Arguments</p> <ul> <li><code>x</code>: number. The x-coordinate of the vector.</li> <li><code>y</code>: number. The y-coordinate of the vector.</li> </ul> <p>Returns</p> <p>A Vector2 object.</p> <p>Example <pre><code>using SurgeEngine.Vector2;\nusing SurgeEngine.Player;\n\n// This entity will lock the player on position (100, 100)\nobject \"PlayerLocker\" is \"entity\", \"awake\"\n{\n    pos = Vector2(100, 100);\n\n    state \"main\"\n    {\n        player = Player.active;\n        player.transform.position = pos;\n    }\n}\n</code></pre></p>"},{"location":"engine/vector2/#static-properties","title":"Static properties","text":""},{"location":"engine/vector2/#vector2up","title":"Vector2.up","text":"<p><code>Vector2.up</code></p> <p>The unit up vector, i.e., (0,-1).</p>"},{"location":"engine/vector2/#vector2right","title":"Vector2.right","text":"<p><code>Vector2.right</code></p> <p>The unit right vector, i.e., (1,0).</p>"},{"location":"engine/vector2/#vector2down","title":"Vector2.down","text":"<p><code>Vector2.down</code></p> <p>The unit down vector, i.e., (0,1).</p>"},{"location":"engine/vector2/#vector2left","title":"Vector2.left","text":"<p><code>Vector2.left</code></p> <p>The unit left vector, i.e., (-1,0).</p>"},{"location":"engine/vector2/#vector2zero","title":"Vector2.zero","text":"<p><code>Vector2.zero</code></p> <p>The zero vector, i.e., (0,0).</p>"},{"location":"engine/vector2/#vector2one","title":"Vector2.one","text":"<p><code>Vector2.one</code></p> <p>The (1,1) vector.</p> <p>Available since: Open Surge 0.6.1</p>"},{"location":"engine/vector2/#properties","title":"Properties","text":""},{"location":"engine/vector2/#x","title":"x","text":"<p><code>x</code>: number, read-only.</p> <p>The x-coordinate of the vector.</p>"},{"location":"engine/vector2/#y","title":"y","text":"<p><code>y</code>: number, read-only.</p> <p>The y-coordinate of the vector.</p>"},{"location":"engine/vector2/#length","title":"length","text":"<p><code>length</code>: number, read-only.</p> <p>The length of the vector.</p>"},{"location":"engine/vector2/#angle","title":"angle","text":"<p><code>angle</code>: number, read-only.</p> <p>The angle, in degrees, between the vector and the positive x-axis (as in polar coordinates).</p>"},{"location":"engine/vector2/#functions","title":"Functions","text":""},{"location":"engine/vector2/#plus","title":"plus","text":"<p><code>plus(v)</code></p> <p>Returns a Vector2 corresponding to the addition between <code>this</code> and <code>v</code>.</p> <p>Arguments</p> <ul> <li><code>v</code>: Vector2 object.</li> </ul> <p>Returns</p> <p>Returns a Vector2 object corresponding to the result of the operation.</p> <p>Example</p> <pre><code>a = Vector2(3, 1);\nb = Vector2(2, 1);\nc = a.plus(b); // c = (5,2)\n</code></pre>"},{"location":"engine/vector2/#minus","title":"minus","text":"<p><code>minus(v)</code></p> <p>Returns a Vector2 corresponding to the subtraction between <code>this</code> and <code>v</code>.</p> <p>Arguments</p> <ul> <li><code>v</code>: Vector2 object.</li> </ul> <p>Returns</p> <p>Returns a Vector2 object corresponding to the result of the operation.</p> <p>Example</p> <pre><code>v = Vector2(5, 5);\nzero = v.minus(v); // zero = (0,0)\n</code></pre>"},{"location":"engine/vector2/#dot","title":"dot","text":"<p><code>dot(v)</code></p> <p>Returns the dot product between <code>this</code> and <code>v</code>.</p> <p>Arguments</p> <ul> <li><code>v</code>: Vector2 object.</li> </ul> <p>Returns</p> <p>Returns a number: the dot product between <code>this</code> and <code>v</code>.</p>"},{"location":"engine/vector2/#normalized","title":"normalized","text":"<p><code>normalized()</code></p> <p>Returns a normalized copy of <code>this</code>: the new vector will have length one.</p> <p>Returns</p> <p>Returns a Vector2 object corresponding to the result of the operation.</p>"},{"location":"engine/vector2/#directionto","title":"directionTo","text":"<p><code>directionTo(v)</code></p> <p>Returns a unit vector pointing to <code>v</code> (from <code>this</code>).</p> <p>Arguments</p> <ul> <li><code>v</code>: Vector2 object.</li> </ul> <p>Returns</p> <p>Returns a Vector2 of length one corresponding to the result of the operation.</p>"},{"location":"engine/vector2/#distanceto","title":"distanceTo","text":"<p><code>distanceTo(v)</code></p> <p>Considering <code>this</code> and <code>v</code> as points in space, this function returns the distance between them.</p> <p>Arguments</p> <ul> <li><code>v</code>: Vector2 object.</li> </ul> <p>Returns</p> <p>Returns a number corresponding to the specified distance.</p> <p>Example <pre><code>using SurgeEngine.Transform;\nusing SurgeEngine.Player;\n\n// This entity will show the distance between\n// itself and the active player\nobject \"DistanceDebugger\" is \"entity\", \"awake\"\n{\n    transform = Transform();\n\n    state \"main\"\n    {\n        player = Player.active;\n        playerpos = player.transform.position;\n        distance = transform.position.distanceTo(playerpos);\n        Console.print(distance);\n    }\n}\n</code></pre></p>"},{"location":"engine/vector2/#translatedby","title":"translatedBy","text":"<p><code>translatedBy(dx,dy)</code></p> <p>Returns a copy of <code>this</code> translated by <code>(dx,dy)</code>.</p> <p>Arguments</p> <ul> <li><code>dx</code>: number. The offset to be added to the x-coordinate.</li> <li><code>dy</code>: number. The offset to be added to the y-coordinate.</li> </ul> <p>Returns</p> <p>Returns a Vector2 object corresponding to the result of the operation.</p> <p>Example</p> <pre><code>using SurgeEngine.Vector2;\n...\nv = Vector2.one.translatedBy(4,5); // (5,6)\n</code></pre>"},{"location":"engine/vector2/#rotatedby","title":"rotatedBy","text":"<p><code>rotatedBy(deg)</code></p> <p>Returns a copy of <code>this</code> rotated counterclockwise by <code>deg</code> degrees.</p> <p>Arguments</p> <ul> <li><code>deg</code>: number. The amount of degrees used on the rotation.</li> </ul> <p>Returns</p> <p>Returns a Vector2 object corresponding to the result of the operation.</p> <p>Example</p> <pre><code>using SurgeEngine.Vector2;\n\n...\n\n// A unit vector with an angle of 45 degrees\n// (relative to the positive x-axis)\nv = Vector2.right.rotatedBy(45);\n</code></pre> <p>Note: in Open Surge, the y-axis grows downwards. As an example, Vector2.right (1,0) rotated counterclockwise by 90 degrees will be the same as Vector2.up (0,-1). In addition, to rotate a Vector2 by <code>deg</code> degrees clockwise you may rotate it by <code>-deg</code> degrees counterclockwise.</p>"},{"location":"engine/vector2/#scaledby","title":"scaledBy","text":"<p><code>scaledBy(s)</code></p> <p>Returns a copy of <code>this</code> scaled by <code>s</code>. The length of the resulting vector will be the length of <code>this</code> multiplied by <code>s</code>.</p> <p>Arguments</p> <ul> <li><code>s</code>: number. The multiplier.</li> </ul> <p>Returns</p> <p>Returns a Vector2 object corresponding to the result of the operation.</p> <p>Example</p> <pre><code>using SurgeEngine.Vector2;\n...\none = Vector2.one;\ntwo = one.scaledBy(2); // (2,2)\nhalf = one.scaledBy(0.5); // (0.5,0.5)\n</code></pre>"},{"location":"engine/vector2/#projectedon","title":"projectedOn","text":"<p><code>projectedOn(v)</code></p> <p>Returns a copy of <code>this</code> projected on nonzero vector <code>v</code>.</p> <p>Arguments</p> <ul> <li><code>v</code>: Vector2 object.</li> </ul> <p>Returns</p> <p>Returns a Vector2 object corresponding to the result of the operation.</p>"},{"location":"engine/vector2/#tostring","title":"toString","text":"<p><code>toString()</code></p> <p>Converts the vector to a string.</p> <p>Returns</p> <p>Returns a string containing the coordinates of <code>this</code>.</p> <p>Example</p> <pre><code>using SurgeEngine.Vector2;\n...\nConsole.print(Vector2.one); // using toString() implicitly\n</code></pre>"},{"location":"engine/video/","title":"Video","text":"<p>Video settings.</p> <p>Example</p> <pre><code>// display the current Video mode\nusing SurgeEngine.Video;\n\nobject \"Application\"\n{\n    state \"main\"\n    {\n        Console.print(Video.mode);\n        state = \"done\";\n    }\n\n    state \"done\"\n    {\n    }\n}\n</code></pre>"},{"location":"engine/video/#properties","title":"Properties","text":""},{"location":"engine/video/#fullscreen","title":"fullscreen","text":"<p><code>fullscreen</code>: boolean.</p> <p>Whether or not the engine is running on fullscreen mode. Use this property to toggle between windowed and fullscreen modes.</p> <p>Available since: Open Surge 0.6.1</p>"},{"location":"engine/video/#mode","title":"mode","text":"<p><code>mode</code>: string.</p> <p>The current video mode. The following are the valid values:</p> <ul> <li><code>\"default\"</code>: the size of the screen is set to its default.</li> <li><code>\"fill\"</code>: the size of the screen is set to the size of the window.</li> <li><code>\"best-fit\"</code>: similar to <code>\"fill\"</code>, except that the aspect ratio of the default size of the screen is maintained.</li> </ul> <p>Available since: Open Surge 0.6.1</p>"},{"location":"engine/web/","title":"Web","text":"<p>Web routines.</p>"},{"location":"engine/web/#functions","title":"Functions","text":""},{"location":"engine/web/#launchurl","title":"launchURL","text":"<p><code>launchURL(url)</code></p> <p>Launches a URL using the default web browser. It's mandatory to specify a protocol. The following protocols are currently supported: http://, https://, mailto:</p> <p>Arguments</p> <ul> <li><code>url</code>: string. The URL to be launched.</li> </ul> <p>Example <pre><code>using SurgeEngine.Web;\n\nobject \"Application\"\n{\n    // Remember to change the state\n    // after calling launchURL\n    state \"main\"\n    {\n        Web.launchURL(\"http://opensurge2d.org\");\n        state = \"done\";\n    }\n\n    state \"done\"\n    {\n    }\n}\n</code></pre></p>"},{"location":"engine/web/#encodeuricomponent","title":"encodeURIComponent","text":"<p><code>encodeURIComponent(str)</code></p> <p>Encodes a component of a Universal Resource Identifier (URI). It escapes all characters of the input string, except:</p> <pre><code>A\u2013Z a\u2013z 0\u20139 - _ . ! ~ * ' ( )\n</code></pre> <p>Arguments</p> <ul> <li><code>str</code>: string. The string to be escaped.</li> </ul> <p>Returns</p> <p>Returns the input string escaped as above.</p> <p>Example</p> <pre><code>using SurgeEngine.Web;\n\n// ...\n\nuser = \"Jane Doe\";\nurl = \"https://my.website.name/?user=\" + Web.encodeURIComponent(user);\nConsole.print(url);\n\n// output:\n// https://my.website.name/?user=Jane%20Doe\n</code></pre> <p>Available since: Open Surge 0.6.1</p>"},{"location":"reference/application/","title":"Application","text":"<p>Represents the Application. You do not need to instantiate it, as it is instantiated automatically. This object can be accessed by any other object, in any script, simply by typing <code>Application</code>.</p>"},{"location":"reference/application/#properties","title":"Properties","text":""},{"location":"reference/application/#args","title":"args","text":"<p><code>args</code>: Arguments object, read-only.</p> <p>Use this property to read the command line arguments.</p>"},{"location":"reference/application/#functions","title":"Functions","text":""},{"location":"reference/application/#exit","title":"exit","text":"<p><code>exit()</code></p> <p>Exits the Application.</p>"},{"location":"reference/application/#crash","title":"crash","text":"<p><code>crash(message)</code></p> <p>Exits the Application with an error message.</p> <p>Arguments</p> <ul> <li><code>message</code>: string. The message to be displayed to the user.</li> </ul>"},{"location":"reference/application/#destroy","title":"destroy","text":"<p><code>destroy()</code></p> <p>A synonym for <code>Application.exit()</code>.</p>"},{"location":"reference/arguments/","title":"Arguments","text":"<p>If you've launched your application via the command-line, this Array-like object can be used to read command-line arguments. This is available at <code>Application.args</code>.</p> <p>The example below prints all the arguments to the screen:</p> <pre><code>// Method 1 (foreach)\nforeach(argument in Application.args)\n    Console.print(argument);\n\n// Method 2 (for loops)\nfor(i = 0; i &lt; Application.args.length; i++)\n    Console.print(Application.args[i]);\n\n// Or, alternatively:\nConsole.print(Application.args);\n</code></pre>"},{"location":"reference/arguments/#properties","title":"Properties","text":""},{"location":"reference/arguments/#length","title":"length","text":"<p><code>length</code>: number, read-only.</p> <p>The number of command-line arguments, including the executable.</p>"},{"location":"reference/arguments/#functions","title":"Functions","text":""},{"location":"reference/arguments/#get","title":"get","text":"<p><code>get(index)</code></p> <p>Gets the specified command-line argument. Instead of calling <code>get()</code>, one may use equivalently the <code>[ ]</code> operator.</p> <p>Arguments</p> <ul> <li><code>index</code>: integer number between 0 and <code>Application.args.length - 1</code>, inclusive.</li> </ul> <p>Returns</p> <p>A string with the specified command-line argument, or <code>null</code> if there is no such argument.</p> <p>Example</p> <pre><code>// Suppose that you run surgescript via the command-line:\n// surgescript test_args.ss\nexecutable = Application.args[0]; // \"surgescript\"\nscript_file = Application.args[1]; // \"test_args.ss\"\n</code></pre>"},{"location":"reference/arguments/#option","title":"option","text":"<p><code>option(optionName)</code></p> <p>Gets the value of a certain command-line option.</p> <p>Arguments</p> <ul> <li><code>optionName</code>: string. The option you want to read.</li> </ul> <p>Returns</p> <p>A string featuring the value of the desired command-line option, or <code>null</code> if such an option hasn't been provided by the user.</p> <p>Example</p> <pre><code>// Suppose that you run surgescript via the command-line:\n// surgescript test_args.ss --my-option 12345\nmy_option = Application.args.option(\"--my-option\");\n\n// Options -p and --port are equivalent\n// surgescript test_args.ss -p 80\n// surgescript test_args.ss --port 80\nport = Application.args.option(\"--port\") || Application.args.option(\"-p\");\n\n// Default values (useful if the option is not present)\n// surgescript test_args.ss\n// surgescript test_args.ss --name alice\nname = Application.args.option(\"--name\") || \"anonymous\";\n</code></pre>"},{"location":"reference/arguments/#hasoption","title":"hasOption","text":"<p><code>hasOption(optionName)</code></p> <p>Checks if the specified option is present in the command-line.</p> <p>Arguments</p> <ul> <li><code>optionName</code>: string.</li> </ul> <p>Returns</p> <p>Returns <code>true</code> if the specified option is present in the command-line; or <code>false</code> otherwise.</p>"},{"location":"reference/arguments/#iterator","title":"iterator","text":"<p><code>iterator()</code></p> <p>Spawns an iterator.</p> <p>Returns</p> <p>An iterator to iterate over the command-line arguments.</p>"},{"location":"reference/arguments/#tostring","title":"toString","text":"<p><code>toString()</code></p> <p>Converts the command-line arguments to a string.</p> <p>Returns</p> <p>A string featuring the command-line arguments.</p>"},{"location":"reference/array/","title":"Array","text":"<p>An Array is a collection of values organized in sequencial fashion. To instantiate an Array, use the <code>[ value_1, value_2, ..., value_n ]</code> syntax rather than the <code>spawn()</code> function.</p> <p>Example:</p> <pre><code>object \"Application\"\n{\n    // The 'characters' array hold 3 strings\n    characters = [ \"Surge\", \"Neon\", \"Charge\" ];\n\n    state \"main\"\n    {\n        // who are the characters?\n        Console.print(\"The characters are:\");\n        Console.print(characters[0]);\n        Console.print(characters[1]);\n        Console.print(characters[2]);\n\n        // how many characters?\n        Console.print(\"Number of characters: \" + characters.length);\n    }\n}\n</code></pre> <p>Output:</p> <pre><code>The characters are:\nSurge\nNeon\nCharge\nNumber of characters: 3\n</code></pre> <p>Caution!</p> <p>Whenever you define an array, you spawn a new object. You are advised to NOT define arrays within states, because the code within the states run continuously. New objects will be created at every frame, not just once. In the above example, the <code>characters</code> array is defined as an object-level variable.</p>"},{"location":"reference/array/#properties","title":"Properties","text":""},{"location":"reference/array/#length","title":"length","text":"<p><code>length</code>: number, read-only.</p> <p>The number of elements in the Array.</p>"},{"location":"reference/array/#functions","title":"Functions","text":""},{"location":"reference/array/#get","title":"get","text":"<p><code>get(index)</code></p> <p>Gets the specified element of the Array. Instead of calling <code>get()</code> directly, you may equivalently use the <code>[ ]</code> operator.</p> <p>Arguments</p> <ul> <li><code>index</code>: integer number between <code>0</code> and <code>this.length - 1</code>, inclusive.</li> </ul> <p>Returns</p> <p>The Array element at position <code>index</code> (0-based).</p> <p>Example</p> <pre><code>characters = [ \"Surge\", \"Neon\", \"Charge\" ];\n\n...\n\nsurge = characters[0];  // first element (\"Surge\")\nneon = characters[1];   // second element (\"Neon\")\ncharge = characters[2]; // third element (\"Charge\")\n</code></pre>"},{"location":"reference/array/#set","title":"set","text":"<p><code>set(index, value)</code></p> <p>Sets to <code>value</code> the element of the Array at position <code>index</code>. Instead of calling <code>set()</code> directly, you may equivalently use the <code>[ ]</code> operator.</p> <p>Arguments</p> <ul> <li><code>index</code>: integer number between <code>0</code> and <code>this.length - 1</code>, inclusive.</li> <li><code>value</code>: any type. The new value to be placed on the Array.</li> </ul> <p>Example</p> <pre><code>characters = [ \"Surge\", \"Neon\", \"Charge\" ];\ncharacters[0] = \"Gimacian\";\nConsole.print(characters[0]); // Gimacian\n</code></pre>"},{"location":"reference/array/#push","title":"push","text":"<p><code>push(value)</code></p> <p>Adds a new element to the end of the Array.</p> <p>Arguments</p> <ul> <li><code>value</code>: any type. The element to be added to the Array.</li> </ul> <p>Example</p> <pre><code>characters = [ \"Surge\", \"Neon\", \"Charge\" ];\ncharacters.push(\"Gimacian\");\nConsole.print(characters); // [ \"Surge\", \"Neon\", \"Charge\", \"Gimacian\" ]\n</code></pre>"},{"location":"reference/array/#pop","title":"pop","text":"<p><code>pop()</code></p> <p>Removes the last element of the Array and returns it.</p> <p>Returns</p> <p>The removed element.</p>"},{"location":"reference/array/#shift","title":"shift","text":"<p><code>shift()</code></p> <p>Removes the first element of the Array and returns it.</p> <p>Returns</p> <p>The removed element.</p>"},{"location":"reference/array/#unshift","title":"unshift","text":"<p><code>unshift(value)</code></p> <p>Adds a new element to the beginning of the Array.</p> <p>Arguments</p> <ul> <li><code>value</code>: any type. The element to be added to the Array.</li> </ul>"},{"location":"reference/array/#clear","title":"clear","text":"<p><code>clear()</code></p> <p>Clears the array. It will no longer hold any elements and its length will be set to zero.</p> <p>Available since: SurgeScript 0.5.3</p>"},{"location":"reference/array/#indexof","title":"indexOf","text":"<p><code>indexOf(value)</code></p> <p>Search the Array for element <code>value</code> and return its position.</p> <p>Arguments</p> <ul> <li><code>value</code>: any type. The element to be searched for.</li> </ul> <p>Returns</p> <p>The position of the searched element - a number between <code>0</code> and <code>this.length - 1</code>, inclusive. If the desired element is not found, this function returns <code>-1</code>.</p> <p>Example</p> <pre><code>characters = [ \"Surge\", \"Neon\", \"Charge\" ];\n...\ntwo = characters.indexOf(\"Neon\"); // 2\ngimacian = characters.indexOf(\"Gimacian\"); // -1\nif(gimacian &lt; 0)\n    Console.print(\"Not found\");\n</code></pre>"},{"location":"reference/array/#sort","title":"sort","text":"<p><code>sort(cmp)</code></p> <p>Sorts the Array.</p> <p>Arguments</p> <ul> <li><code>cmp</code>: object | null. A functor that compares two array elements, returning a number as indicated below. If <code>null</code> is provided, the Array will be sorted in ascending order (implementation-defined).</li> </ul> Return value of <code>cmp(a,b)</code> Description &lt; <code>0</code> <code>a</code> must come before <code>b</code> = <code>0</code> <code>a</code> and <code>b</code> are equivalent &gt; <code>0</code> <code>a</code> must come after <code>b</code> <p>Note</p> <p><code>Array.sort()</code> does not guarantee that the relative order of equivalent elements will be preserved.</p> <p>Returns</p> <p>The sorted array. The returned array is the same array as you called <code>sort()</code> on; it's not a copy.</p> <p>Example</p> <pre><code>// this example will print the elements\n// of the Array in ascending order\nobject \"Application\"\n{\n    arr = [ 3, 9, 4, 8, 5, 6, 7, 1, 2, 0 ];\n\n    state \"main\"\n    {\n        // sort and print the Array\n        arr.sort(null);\n        Console.print(arr);\n        Application.exit();\n    }\n}\n</code></pre> <p>Output: <code>[ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ]</code></p> <pre><code>// this example will print the elements\n// of the Array in descending order\nobject \"Application\"\n{\n    arr = [ 3, 9, 4, 8, 5, 6, 7, 1, 2, 0 ];\n    cmp = spawn(\"Sort.OrderByDesc\");\n\n    state \"main\"\n    {\n        // sort and print the Array\n        arr.sort(cmp);\n        Console.print(arr);\n        Application.exit();\n    }\n}\n\nobject \"Sort.OrderByDesc\"\n{\n    // This function compares two\n    // elements of the Array: a and b.\n    //\n    // It should return a number:\n    //   &lt; 0 if a must come before b\n    //   = 0 if a and b are equivalent\n    //   &gt; 0 if a must come after b\n    fun call(a, b)\n    {\n        // sort in descending order\n        return b - a;\n    }\n}\n</code></pre> <p>Output: <code>[ 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 ]</code></p>"},{"location":"reference/array/#reverse","title":"reverse","text":"<p><code>reverse()</code></p> <p>Reverses the order of the elements in the Array.</p>"},{"location":"reference/array/#shuffle","title":"shuffle","text":"<p><code>shuffle()</code></p> <p>Shuffles the elements of the Array, placing its elements at random spots.</p>"},{"location":"reference/array/#iterator","title":"iterator","text":"<p><code>iterator()</code></p> <p>Spawns an iterator.</p> <p>Returns</p> <p>An iterator to loop through the elements of the Array.</p>"},{"location":"reference/array/#tostring","title":"toString","text":"<p><code>toString()</code></p> <p>Converts the Array to a string.</p> <p>Returns</p> <p>A string.</p>"},{"location":"reference/boolean/","title":"Boolean","text":"<p>Routines for booleans. The Boolean object is not supposed to be used directly. The functions below are available for primitive values of the boolean type.</p>"},{"location":"reference/boolean/#functions","title":"Functions","text":""},{"location":"reference/boolean/#valueof","title":"valueOf","text":"<p><code>valueOf()</code></p> <p>The primitive value of the boolean, i.e., the boolean itself.</p> <p>Returns</p> <p>The boolean.</p>"},{"location":"reference/boolean/#tostring","title":"toString","text":"<p><code>toString()</code></p> <p>Convert boolean to string.</p> <p>Returns</p> <p>The boolean converted to a string.</p>"},{"location":"reference/boolean/#equals","title":"equals","text":"<p><code>equals(b)</code></p> <p>Compares the boolean to another boolean <code>b</code>.</p> <p>Arguments</p> <ul> <li><code>b</code>: boolean. The value to compare the boolean to.</li> </ul> <p>Returns</p> <p>Returns <code>true</code> if the booleans are equal.</p>"},{"location":"reference/console/","title":"Console","text":"<p>The Console is a mechanism that allows users to interact with your app via a text-based interface. You can print data to the user and read data from the user.</p>"},{"location":"reference/console/#functions","title":"Functions","text":""},{"location":"reference/console/#print","title":"print","text":"<p><code>print(line)</code></p> <p>Prints a line to the console.</p> <p>Arguments</p> <ul> <li><code>line</code>: string. The message to be printed.</li> </ul> <p>Example</p> <pre><code>// this will print \"Hello, there!\" and quit\nobject \"Application\"\n{\n    state \"main\"\n    {\n        Console.print(\"Hello, there!\");\n        Application.exit();\n    }\n}\n</code></pre>"},{"location":"reference/console/#write","title":"write","text":"<p><code>write(str)</code></p> <p>Writes a string to the console, without a line break at the end.</p> <p>Arguments</p> <ul> <li><code>str</code>: string. The string to be written.</li> </ul>"},{"location":"reference/console/#readline","title":"readline","text":"<p><code>readline()</code></p> <p>Reads a line from the standard input.</p> <p>Returns</p> <p>Returns the string just read, without a line break at the end.</p> <p>Example</p> <pre><code>// will ask the name of the user until a name is given\nobject \"Application\"\n{\n    state \"main\"\n    {\n        Console.print(\"Hey pal, what's your name? \");\n        name = Console.readline();\n        if(name != \"\") {\n            Console.print(\"Nice to meet you, \" + name);\n            Application.exit();\n        }\n    }\n}\n</code></pre>"},{"location":"reference/date/","title":"Date","text":"<p>Date is used to retrieve current date and time. You can access this object simply by typing <code>Date</code>.</p> <p>Example:</p> <pre><code>// What day is today?\nobject \"Application\"\n{\n    // show the day\n    state \"main\"\n    {\n        today = Date.year + \"-\" + f(Date.month) + \"-\" + f(Date.day);\n        Console.print(\"Today is \" + today);\n        Application.exit();\n    }\n\n    // add a leading zero\n    fun f(x)\n    {\n        if(x &gt;= 10)\n            return x;\n        else\n            return \"0\" + x;\n    }\n}\n</code></pre> <p>Available since: SurgeScript 0.5.2</p>"},{"location":"reference/date/#properties","title":"Properties","text":""},{"location":"reference/date/#year","title":"year","text":"<p><code>year</code>: number, read-only.</p> <p>The current year.</p>"},{"location":"reference/date/#month","title":"month","text":"<p><code>month</code>: number, read-only.</p> <p>Month of the year (1-12).</p>"},{"location":"reference/date/#day","title":"day","text":"<p><code>day</code>: number.</p> <p>Day of the month (1-31).</p>"},{"location":"reference/date/#hour","title":"hour","text":"<p><code>hour</code>: number.</p> <p>Hours since midnight (0-23).</p>"},{"location":"reference/date/#minute","title":"minute","text":"<p><code>minute</code>: number.</p> <p>Minutes after the hour (0-59).</p>"},{"location":"reference/date/#second","title":"second","text":"<p><code>second</code>: number.</p> <p>Seconds after the minute (0-59).</p>"},{"location":"reference/date/#weekday","title":"weekday","text":"<p><code>weekday</code>: number.</p> <p>Days since Sunday (0-6).</p>"},{"location":"reference/date/#unixtime","title":"unixtime","text":"<p><code>unixtime</code>: number.</p> <p>Number of seconds since Jan 1st, 1970 00:00:00 UTC.</p>"},{"location":"reference/date/#functions","title":"Functions","text":""},{"location":"reference/date/#timezoneoffset","title":"timezoneOffset","text":"<p><code>timezoneOffset()</code></p> <p>The difference, in minutes, from the Coordinated Universal Time (UTC) to the timezone of the host. Example: if your timezone is UTC-03:00, this function returns -180.</p> <p>Available since: SurgeScript 0.5.2</p> <p>Returns</p> <p>The timezone difference in minutes.</p>"},{"location":"reference/date/#tostring","title":"toString","text":"<p><code>toString()</code></p> <p>Converts the current date and time to a string. The string is formatted according to the ISO 8601 standard.</p> <p>Available since: SurgeScript 0.5.2</p> <p>Returns</p> <p>The current date and time expressed according to ISO 8601.</p>"},{"location":"reference/dictionary/","title":"Dictionary","text":"<p>A Dictionary is a collection of key-value pairs. Dictionary keys are strings. Their corresponding values can be of any type. To create a Dictionary, use the <code>{ key_1: value_1, key_2: value_2, ..., key_n: value_n }</code> syntax rather than the <code>spawn()</code> function.</p> <p>Example:</p> <pre><code>object \"Application\"\n{\n    dictionary = {\n        \"Surge\": 35,\n        \"Neon\": 20,\n        \"Charge\": 37.5,\n        \"Gimacian\": 70\n    };\n\n    state \"main\"\n    {\n        // usage example\n        Console.print(dictionary[\"Surge\"]); // will print 35\n        Console.print(dictionary[\"Neon\"]); // will print 20\n\n        // will print all entries\n        foreach(entry in dictionary)\n            Console.print(entry.key + \": \" + entry.value);\n\n        // done!\n        Application.exit();\n    }\n}\n</code></pre> <p>Output:</p> <pre><code>35\n20\nSurge: 35\nNeon: 20\nCharge: 37.5\nGimacian: 70\n</code></pre> <p>Caution!</p> <p>Whenever you define a dictionary, you spawn a new object. You are advised to NOT define dictionaries within states, because the code within the states run continuously. New objects will be created at every frame, not just once. In the above example, <code>dictionary</code> is defined as an object-level variable.</p>"},{"location":"reference/dictionary/#properties","title":"Properties","text":""},{"location":"reference/dictionary/#count","title":"count","text":"<p><code>count</code>: number, read-only.</p> <p>The number of elements in the Dictionary.</p>"},{"location":"reference/dictionary/#functions","title":"Functions","text":""},{"location":"reference/dictionary/#get","title":"get","text":"<p><code>get(key)</code></p> <p>Gets the value of the specified key in the Dictionary. Instead of calling <code>get()</code> directly, you may equivalently use the <code>[ ]</code> operator.</p> <p>Arguments</p> <ul> <li><code>key</code>: string.</li> </ul> <p>Returns</p> <p>The value corresponding to the specified key, or <code>null</code> if there is no such an entry in the Dictionary.</p> <p>Example</p> <pre><code>dict = { \"Surge\": 10 };\nten = dict[\"Surge\"];\n</code></pre>"},{"location":"reference/dictionary/#set","title":"set","text":"<p><code>set(key, value)</code></p> <p>Sets the value of the specified key in the Dictionary. Instead of calling <code>set()</code> directly, you may equivalently use the <code>[ ]</code> operator.</p> <p>Arguments</p> <ul> <li><code>key</code>: string.</li> <li><code>value</code>: any type.</li> </ul> <p>Example</p> <pre><code>dict = { };\ndict[\"Surge\"] = 10;\n</code></pre>"},{"location":"reference/dictionary/#clear","title":"clear","text":"<p><code>clear()</code></p> <p>Removes all entries from the Dictionary.</p>"},{"location":"reference/dictionary/#delete","title":"delete","text":"<p><code>delete(key)</code></p> <p>Deletes the entry having the specified key.</p> <p>Arguments</p> <ul> <li><code>key</code>: string. The key of the entry to be removed.</li> </ul>"},{"location":"reference/dictionary/#has","title":"has","text":"<p><code>has(key)</code></p> <p>Checks if an entry having the specified key belongs to the Dictionary.</p> <p>Arguments</p> <ul> <li><code>key</code>: string. The key of the entry.</li> </ul> <p>Returns</p> <p>Returns <code>true</code> if the Dictionary has such an entry.</p>"},{"location":"reference/dictionary/#keys","title":"keys","text":"<p><code>keys()</code></p> <p>Gets a collection containing the keys of the Dictionary.</p> <p>Returns</p> <p>Returns a new Array containing the keys of the Dictionary.</p>"},{"location":"reference/dictionary/#iterator","title":"iterator","text":"<p><code>iterator()</code></p> <p>Spawns an iterator.</p> <p>Returns</p> <p>An iterator to loop through the elements of the Dictionary.</p>"},{"location":"reference/dictionary/#tostring","title":"toString","text":"<p><code>toString()</code></p> <p>Converts the Dictionary to a string.</p> <p>Returns</p> <p>A string.</p>"},{"location":"reference/gc/","title":"GC","text":"<p>SurgeScript features a Garbage Collector (GC) that automatically disposes objects that cannot be reached from the root (i.e., their references are lost). The Garbage Collector is available at <code>System.gc</code>. Generally, you do not need to modify any of its settings.</p>"},{"location":"reference/gc/#properties","title":"Properties","text":""},{"location":"reference/gc/#interval","title":"interval","text":"<p><code>interval</code>: number, read-only.</p> <p>Every <code>interval</code> seconds, the garbage collector will be called automatically.</p> <p>Note: this property is read-only since SurgeScript 0.6.0.</p>"},{"location":"reference/gc/#objectcount","title":"objectCount","text":"<p><code>objectCount</code>: number, read-only.</p> <p>How many objects were disposed when the garbage collector was last called.</p>"},{"location":"reference/gc/#functions","title":"Functions","text":""},{"location":"reference/gc/#collect","title":"collect","text":"<p><code>collect()</code></p> <p>Calls the Garbage Collector manually. You generally don't need to call this.</p>"},{"location":"reference/iterator/","title":"Iterator","text":"<p>In SurgeScript, Iterator is an abstract contract, or protocol, that define a set of functions that should be written in concrete implementations. If you're familiar with object oriented programming, Iterator is an interface. Iterators are used to traverse containers / collections / data structures and access its elements.</p> <p>Concrete implementations of Iterator include: <code>ArrayIterator</code> and <code>DictionaryIterator</code>. If you wish to write your own iterators, you need to specify the functions described below.</p> <p>The data structure that you wish to traverse should include an <code>iterator()</code> function that spawns the concrete implementation of the Iterator. Thus, the <code>parent</code> object of the Iterator will be the structure to be traversed.</p> <p>The basic usage of an Iterator is as follows:</p> <pre><code>// container is an object such as an Array\niterator = container.iterator(); // spawn an iterator to traverse the container\nwhile(iterator.hasNext()) {\n    element = iterator.next();\n    Console.print(element);\n}\n</code></pre>"},{"location":"reference/iterator/#functions","title":"Functions","text":""},{"location":"reference/iterator/#hasnext","title":"hasNext","text":"<p><code>hasNext()</code></p> <p>Checks if there are more elements to be accessed in the iteration.</p> <p>Returns</p> <p>Returns <code>true</code> if there are more elements to be visited, or <code>false</code> otherwise.</p>"},{"location":"reference/iterator/#next","title":"next","text":"<p><code>next()</code></p> <p>Gets the next element of the container and advances the iteration.</p> <p>Returns</p> <p>The next element of the container, or <code>null</code> if there is no such element. The first call to <code>next()</code> returns the first element of the container, and so on.</p>"},{"location":"reference/math/","title":"Math","text":"<p>Built-in mathematical functions. The Math object can be accessed simply by typing <code>Math</code>.</p> <p>Examples:</p> <pre><code>// Math functions\ntwo = Math.sqrt(4); // square root of 4\neight = Math.pow(2, 3); // 2 raised to the 3rd power\nzero = Math.sin(0); // sine of 0\nseven = Math.max(5, 7); // maximum of 5 and 7\n</code></pre>"},{"location":"reference/math/#properties","title":"Properties","text":""},{"location":"reference/math/#pi","title":"pi","text":"<p><code>pi</code>: number, read-only.</p> <p>An approximation of pi (3.1415926535...)</p>"},{"location":"reference/math/#epsilon","title":"epsilon","text":"<p><code>epsilon</code>: number, read-only.</p> <p>The difference between 1 and the smallest floating point number that is greater than 1.</p>"},{"location":"reference/math/#infinity","title":"infinity","text":"<p><code>infinity</code>: number, read-only.</p> <p>A floating point representation of positive infinity.</p>"},{"location":"reference/math/#nan","title":"NaN","text":"<p><code>NaN</code>: number, read-only.</p> <p>A numeric data type representing Not-a-Number.</p> <p>Available since: SurgeScript 0.5.3</p>"},{"location":"reference/math/#functions","title":"Functions","text":""},{"location":"reference/math/#sqrt","title":"sqrt","text":"<p><code>sqrt(x)</code></p> <p>Square root function.</p> <p>Arguments</p> <ul> <li><code>x</code>: number.</li> </ul> <p>Returns</p> <p>The square root of <code>x</code>.</p>"},{"location":"reference/math/#pow","title":"pow","text":"<p><code>pow(x, p)</code></p> <p>Raise to power.</p> <p>Arguments</p> <ul> <li><code>x</code>: number. The base.</li> <li><code>p</code>: number. The exponent.</li> </ul> <p>Returns</p> <p>Returns <code>x</code> raised to the <code>p</code> power.</p>"},{"location":"reference/math/#exp","title":"exp","text":"<p><code>e(x)</code></p> <p>Exponential function.</p> <p>Arguments</p> <ul> <li><code>x</code>: number.</li> </ul> <p>Returns</p> <p>Returns e raised to the <code>x</code> power.</p>"},{"location":"reference/math/#log","title":"log","text":"<p><code>log(x)</code></p> <p>Natural logarithm.</p> <p>Arguments</p> <ul> <li><code>x</code>: number.</li> </ul> <p>Returns</p> <p>The natural logarithm (base e) of <code>x</code>.</p>"},{"location":"reference/math/#log10","title":"log10","text":"<p><code>log10(x)</code></p> <p>Base 10 logarithm.</p> <p>Arguments</p> <ul> <li><code>x</code>: number.</li> </ul> <p>Returns</p> <p>The base 10 logarithm of <code>x</code>.</p>"},{"location":"reference/math/#sin","title":"sin","text":"<p><code>sin(x)</code></p> <p>Sine function.</p> <p>Arguments</p> <ul> <li><code>x</code>: number. Angle in radians.</li> </ul> <p>Returns</p> <p>The sine of <code>x</code>.</p>"},{"location":"reference/math/#cos","title":"cos","text":"<p><code>cos(x)</code></p> <p>Cosine function.</p> <p>Arguments</p> <ul> <li><code>x</code>: number. Angle in radians.</li> </ul> <p>Returns</p> <p>The cosine of <code>x</code>.</p>"},{"location":"reference/math/#tan","title":"tan","text":"<p><code>tan(x)</code></p> <p>Tangent function.</p> <p>Arguments</p> <ul> <li><code>x</code>: number. Angle in radians.</li> </ul> <p>Returns</p> <p>The tangent of <code>x</code>.</p>"},{"location":"reference/math/#asin","title":"asin","text":"<p><code>asin(x)</code></p> <p>Arc-sine function.</p> <p>Arguments</p> <ul> <li><code>x</code>: number.</li> </ul> <p>Returns</p> <p>The angle in radians whose sine is <code>x</code>.</p>"},{"location":"reference/math/#acos","title":"acos","text":"<p><code>acos(x)</code></p> <p>Arc-cosine function.</p> <p>Arguments</p> <ul> <li><code>x</code>: number.</li> </ul> <p>Returns</p> <p>The angle in radians whose cosine is <code>x</code>.</p>"},{"location":"reference/math/#atan","title":"atan","text":"<p><code>atan(x)</code></p> <p>Arc-tangent function.</p> <p>Arguments</p> <ul> <li><code>x</code>: number.</li> </ul> <p>Returns</p> <p>The angle in radians whose tangent is <code>x</code>.</p>"},{"location":"reference/math/#atan2","title":"atan2","text":"<p><code>atan2(y, x)</code></p> <p>Function atan2.</p> <p>Arguments</p> <ul> <li><code>y</code>: number.</li> <li><code>x</code>: number.</li> </ul> <p>Returns</p> <p>The angle, in radians, between the positive x-axis and the (x, y) vector.</p>"},{"location":"reference/math/#deg2rad","title":"deg2rad","text":"<p><code>deg2rad(degrees)</code></p> <p>Converts <code>degrees</code> to radians.</p> <p>Available since: SurgeScript 0.5.3</p> <p>Arguments</p> <ul> <li><code>degrees</code>: number.</li> </ul> <p>Returns</p> <p>The converted value.</p>"},{"location":"reference/math/#rad2deg","title":"rad2deg","text":"<p><code>rad2deg(radians)</code></p> <p>Converts <code>radians</code> to degrees.</p> <p>Available since: SurgeScript 0.5.3</p> <p>Arguments</p> <ul> <li><code>radians</code>: number.</li> </ul> <p>Returns</p> <p>The converted value.</p>"},{"location":"reference/math/#random","title":"random","text":"<p><code>random()</code></p> <p>Random value.</p> <p>Returns</p> <p>A random number between 0 (inclusive) and 1 (exclusive).</p>"},{"location":"reference/math/#floor","title":"floor","text":"<p><code>floor(x)</code></p> <p>Floor function.</p> <p>Arguments</p> <ul> <li><code>x</code>: number.</li> </ul> <p>Returns</p> <p>The largest integer less or equal than <code>x</code>.</p>"},{"location":"reference/math/#ceil","title":"ceil","text":"<p><code>ceil(x)</code></p> <p>Ceiling function.</p> <p>Arguments</p> <ul> <li><code>x</code>: number.</li> </ul> <p>Returns</p> <p>The smallest integer greater or equal than <code>x</code>.</p>"},{"location":"reference/math/#round","title":"round","text":"<p><code>round(x)</code></p> <p>Round to the nearest integer.</p> <p>Arguments</p> <ul> <li><code>x</code>: number.</li> </ul> <p>Returns</p> <p>Returns <code>x</code> rounded to the nearest integer.</p> <p>If the fraction of <code>x</code> is 0.5, this function uses the commercial rounding tie-breaking method.</p>"},{"location":"reference/math/#trunc","title":"trunc","text":"<p><code>trunc(x)</code></p> <p>Truncate to integer.</p> <p>Available since: SurgeScript 0.6.0</p> <p>Arguments</p> <ul> <li><code>x</code>: number.</li> </ul> <p>Returns</p> <p>The nearest integer not greater in magnitude than <code>x</code>.</p>"},{"location":"reference/math/#mod","title":"mod","text":"<p><code>mod(x, y)</code></p> <p>Modulo operation. This is used to get the value <code>x</code> mod <code>y</code> - the modulo - defined as the remainder of the division of <code>x</code> by <code>y</code> that has the sign of the divisor <code>y</code>.</p> <p>Info</p> <p>The modulo <code>x</code> mod <code>y</code> may differ from the remainder <code>x % y</code>. The former has the sign of the divisor <code>y</code>, whereas the latter has the sign of the dividend <code>x</code>. When <code>x</code> and <code>y</code> have the same sign, the modulo and the remainder are equal. When the signs differ, modulo and remainder differ by <code>y</code>.</p> <p>Arguments</p> <ul> <li><code>x</code>: number. The dividend.</li> <li><code>y</code>: number. The divisor.</li> </ul> <p>Returns</p> <p>The modulo <code>x</code> mod <code>y</code>.</p> <p>Note</p> <p>The modulo <code>x</code> mod <code>y</code> is returned since SurgeScript 0.6.0. The remainder <code>x % y</code> was returned on SurgeScript 0.5.x.</p> <p>Example</p> <pre><code>x = 5;\ny = 3;\n\nConsole.print(Math.mod(x, y)); // 2\nConsole.print(x % y); // 2\n\nConsole.print(Math.mod(-x, -y)); // -2\nConsole.print(-x % -y); // -2\n\nConsole.print(Math.mod(-x, y)); // 1\nConsole.print(-x % y); // -2\n\nConsole.print(Math.mod(x, -y)); // -1\nConsole.print(x % -y); // 2\n</code></pre>"},{"location":"reference/math/#sign","title":"sign","text":"<p><code>sign(x)</code></p> <p>The sign of <code>x</code>: 1 if <code>x</code> is non-negative, -1 otherwise.</p> <p>Arguments</p> <ul> <li><code>x</code>: number.</li> </ul> <p>Returns</p> <p>Returns 1 if <code>x</code> is positive or zero; or -1 if <code>x</code> is negative.</p>"},{"location":"reference/math/#signum","title":"signum","text":"<p><code>signum(x)</code></p> <p>Function signum(<code>x</code>) returns 1 if <code>x</code> is positive, 0 if is <code>x</code> is zero, or -1 if <code>x</code> is negative.</p> <p>Available since: SurgeScript 0.5.4</p> <p>Arguments</p> <ul> <li><code>x</code>: number.</li> </ul> <p>Returns</p> <p>Returns 1 if <code>x</code> is positive, 0 if is <code>x</code> is zero, or -1 if <code>x</code> is negative.</p>"},{"location":"reference/math/#abs","title":"abs","text":"<p><code>abs(x)</code></p> <p>Absolute value of <code>x</code>.</p> <p>Arguments</p> <ul> <li><code>x</code>: number.</li> </ul> <p>Returns</p> <p>Returns <code>-x</code> if <code>x</code> is negative, or <code>x</code> otherwise.</p>"},{"location":"reference/math/#min","title":"min","text":"<p><code>min(x, y)</code></p> <p>The minimum of two values.</p> <p>Arguments</p> <ul> <li><code>x</code>: number.</li> <li><code>y</code>: number.</li> </ul> <p>Returns</p> <p>Returns the minimum of <code>x</code> and <code>y</code>.</p>"},{"location":"reference/math/#max","title":"max","text":"<p><code>max(x, y)</code></p> <p>The maximum of two values.</p> <p>Arguments</p> <ul> <li><code>x</code>: number.</li> <li><code>y</code>: number.</li> </ul> <p>Returns</p> <p>Returns the maximum of <code>x</code> and <code>y</code>.</p>"},{"location":"reference/math/#clamp","title":"clamp","text":"<p><code>clamp(val, min, max)</code></p> <p>Clamps a value between a minimum and a maximum.</p> <p>Arguments</p> <ul> <li><code>val</code>: number. The value to be clamped.</li> <li><code>min</code>: number. Minimum value.</li> <li><code>max</code>: number. Maximum value.</li> </ul> <p>Returns</p> <p>Returns <code>val</code> clamped between <code>min</code> and <code>max</code>. Function <code>clamp</code> behave as follows:</p> <ul> <li>if <code>val</code> &lt; <code>min</code>, it returns <code>min</code></li> <li>if <code>val</code> &gt; <code>max</code>, it returns <code>max</code></li> <li>otherwise, it returns <code>val</code></li> </ul>"},{"location":"reference/math/#approximately","title":"approximately","text":"<p><code>approximately(x, y)</code></p> <p>Compares two floating point values. Since comparing two floating point numbers for equality directly may result in inaccuracies, this is a handy function.</p> <p>Arguments</p> <ul> <li><code>x</code>: number.</li> <li><code>y</code>: number.</li> </ul> <p>Returns</p> <p>Returns <code>true</code> if <code>x</code> and <code>y</code> are \"approximately\" equal.</p>"},{"location":"reference/math/#lerp","title":"lerp","text":"<p><code>lerp(a, b, t)</code></p> <p>Linear interpolation.</p> <p>Arguments</p> <ul> <li><code>a</code>: number.</li> <li><code>b</code>: number.</li> <li><code>t</code>: number. A value between 0 and 1.</li> </ul> <p>Returns</p> <p>Returns the linear interpolation between <code>a</code> and <code>b</code> by <code>t</code>.</p> <p>Value <code>t</code> is clamped automatically to the [0, 1] range. As an example, note that <code>lerp</code>:</p> <ul> <li>returns <code>a</code> if <code>t</code> is 0</li> <li>returns <code>b</code> if <code>t</code> is 1</li> <li>returns <code>(a + b) / 2</code> if <code>t</code> is 0.5</li> </ul>"},{"location":"reference/math/#smoothstep","title":"smoothstep","text":"<p><code>smoothstep(a, b, t)</code></p> <p>Interpolation smoothing at the limits.</p> <p>Arguments</p> <ul> <li><code>a</code>: number.</li> <li><code>b</code>: number.</li> <li><code>t</code>: number. A value between 0 and 1.</li> </ul> <p>Returns</p> <p>Returns an interpolated value between <code>a</code> and <code>b</code> by <code>t</code>. Unlike lerp, <code>smoothstep</code> is smooth at the limits. This is useful to create smooth transitions and animations.</p> <p>Value <code>t</code> is clamped automatically to the [0, 1] range.</p>"},{"location":"reference/math/#lerpangle","title":"lerpAngle","text":"<p><code>lerpAngle(alpha, beta, t)</code></p> <p>Linear interpolation of angles <code>alpha</code> and <code>beta</code> given in degrees. Unlike lerp, <code>lerpAngle</code> can interpolate angles when they wrap around 360 degrees.</p> <p>Available since: SurgeScript 0.5.4.1</p> <p>Arguments</p> <ul> <li><code>alpha</code>: number. A value in degrees.</li> <li><code>beta</code>: number. A value in degrees.</li> <li><code>t</code>: number. A value between 0 and 1.</li> </ul> <p>Returns</p> <p>Returns the linear interpolation between angles <code>alpha</code> and <code>beta</code>, given in degrees, by <code>t</code>.</p>"},{"location":"reference/math/#deltaangle","title":"deltaAngle","text":"<p><code>deltaAngle(alpha, beta)</code></p> <p>The shortest difference between angles <code>alpha</code> and <code>beta</code> given in degrees.</p> <p>Available since: SurgeScript 0.5.4.1</p> <p>Arguments</p> <ul> <li><code>alpha</code>: number. A value in degrees.</li> <li><code>beta</code>: number. A value in degrees.</li> </ul> <p>Returns</p> <p>Returns, in degrees, the shortest difference between the angles.</p>"},{"location":"reference/number/","title":"Number","text":"<p>Routines for numbers. The Number object is not supposed to be used directly. The functions below are available for primitive values of the number type.</p> <p>Example:</p> <pre><code>x = 2.toString(); // x is \"2\"\nt = typeof(x); // t is \"string\"\n</code></pre> <p>Note: the SurgeScript Runtime stores numbers as 64-bit floating point values (following the IEEE 754 standard). Integer numbers are accurate up to 15 digits.</p>"},{"location":"reference/number/#functions","title":"Functions","text":""},{"location":"reference/number/#valueof","title":"valueOf","text":"<p><code>valueOf()</code></p> <p>The primitive value of the number, i.e., the number itself.</p> <p>Returns</p> <p>The number.</p>"},{"location":"reference/number/#tostring","title":"toString","text":"<p><code>toString()</code></p> <p>Converts the number to a string.</p> <p>Returns</p> <p>The number converted to a string.</p>"},{"location":"reference/number/#equals","title":"equals","text":"<p><code>equals(x)</code></p> <p>Compares the number to another number <code>x</code>. This routine performs a comparison between floating point numbers. It's recommended to use Math.approximately() instead.</p> <p>Arguments</p> <ul> <li><code>x</code>: number. The value to compare the number to.</li> </ul> <p>Returns</p> <p>Returns <code>true</code> if the numbers are equal.</p>"},{"location":"reference/number/#isfinite","title":"isFinite","text":"<p><code>isFinite()</code></p> <p>Checks if the number is finite.</p> <p>Available since: SurgeScript 0.5.2</p> <p>Returns</p> <p>Returns <code>true</code> if the number is finite.</p>"},{"location":"reference/number/#isnan","title":"isNaN","text":"<p><code>isNaN()</code></p> <p>Checks if the value is NaN (Not-a-Number).</p> <p>Available since: SurgeScript 0.5.2</p> <p>Returns</p> <p>Returns <code>true</code> if the value is NaN.</p>"},{"location":"reference/number/#isinteger","title":"isInteger","text":"<p><code>isInteger()</code></p> <p>Checks if the number is an integer.</p> <p>Available since: SurgeScript 0.5.2</p> <p>Returns</p> <p>Returns <code>true</code> if the number is an integer.</p>"},{"location":"reference/object/","title":"Object","text":"<p>In SurgeScript, all objects are also instances of <code>Object</code>. This means that the properties and functions listed below are available for all objects:</p>"},{"location":"reference/object/#properties","title":"Properties","text":""},{"location":"reference/object/#parent","title":"parent","text":"<p><code>parent</code>: object, read-only.</p> <p>Reference to the parent object.</p>"},{"location":"reference/object/#__name","title":"__name","text":"<p><code>__name</code>: string, read-only.</p> <p>The name of the object.</p>"},{"location":"reference/object/#__active","title":"__active","text":"<p><code>__active</code>: boolean.</p> <p>Indicates whether the object is active or not.</p> <p>Objects are active by default. Whenever an object is set to be inactive, its state machine is paused. Additionally, the state machines of all its descendants are also paused.</p>"},{"location":"reference/object/#__functions","title":"__functions","text":"<p><code>__functions</code>: Array object, read-only.</p> <p>The functions of this object represented as a collection of strings.</p>"},{"location":"reference/object/#__timespent","title":"__timespent","text":"<p><code>__timespent</code>: number, read-only.</p> <p>The average time spent in the current state (measured in seconds).</p>"},{"location":"reference/object/#__file","title":"__file","text":"<p><code>__file</code>: string, read-only.</p> <p>The source file of this object.</p> <p>Available since: SurgeScript 0.5.3</p>"},{"location":"reference/object/#__children","title":"__children","text":"<p><code>__children</code>: Array object, read-only.</p> <p>The children of this object.</p> <p>Available since: SurgeScript 0.5.4</p> <p>Returns</p> <p>A new array featuring all the children of this object. If there are no children, an empty array is returned.</p>"},{"location":"reference/object/#__childcount","title":"__childCount","text":"<p><code>__childCount</code>: number, read-only.</p> <p>The number of children of the object.</p> <p>Available since: SurgeScript 0.5.5</p> <p>Note: prior to SurgeScript 0.5.5, you would use <code>object.childCount</code> instead. That form is now obsolete.</p>"},{"location":"reference/object/#functions","title":"Functions","text":""},{"location":"reference/object/#spawn","title":"spawn","text":"<p><code>spawn(objectName)</code></p> <p>Spawns an object named <code>objectName</code>.</p> <p>Arguments</p> <ul> <li><code>objectName</code>: string. The name of the object to be spawned / instantiated.</li> </ul> <p>Returns</p> <p>A new object of the desired name. Note that the newly created object will be a child of <code>this</code>.</p>"},{"location":"reference/object/#destroy","title":"destroy","text":"<p><code>destroy()</code></p> <p>Destroys the object.</p>"},{"location":"reference/object/#child","title":"child","text":"<p><code>child(childName | childId)</code></p> <p>Looks for a child named <code>childName</code> (or matching <code>childId</code>).</p> <p>Arguments</p> <ul> <li><code>childName</code>: string. The name of the desired child.</li> <li><code>childId</code>: number. The id of the desired child, an integer between <code>0</code> and <code>childCount - 1</code>, inclusive.</li> </ul> <p>Returns</p> <p>The desired child, or <code>null</code> if there is no such object.</p>"},{"location":"reference/object/#children","title":"children","text":"<p><code>children(childName)</code></p> <p>Finds all children named <code>childName</code>. Since this function spawns a new array at each call, it's recommended to cache its return value.</p> <p>Available since: SurgeScript 0.5.4</p> <p>Arguments</p> <ul> <li><code>childName</code>: string. The name of the desired children.</li> </ul> <p>Returns</p> <p>A new array containing all children named <code>childName</code>. If no such children are found, an empty array is returned.</p>"},{"location":"reference/object/#childwithtag","title":"childWithTag","text":"<p><code>childWithTag(tagName)</code></p> <p>Finds a child tagged <code>tagName</code>.</p> <p>Available since: SurgeScript 0.5.4</p> <p>Arguments</p> <ul> <li><code>tagName</code>: string. The name of a tag.</li> </ul> <p>Returns</p> <p>A child tagged <code>tagName</code>, or <code>null</code> if there is no such object.</p>"},{"location":"reference/object/#childrenwithtag","title":"childrenWithTag","text":"<p><code>childrenWithTag(tagName)</code></p> <p>Finds all children tagged <code>tagName</code>.</p> <p>Available since: SurgeScript 0.5.4</p> <p>Arguments</p> <ul> <li><code>tagName</code>: string. The name of a tag.</li> </ul> <p>Returns</p> <p>A new array containing all children tagged <code>tagName</code>. If there are no such children, an empty array is returned.</p>"},{"location":"reference/object/#sibling","title":"sibling","text":"<p><code>sibling(siblingName)</code></p> <p>Looks for a sibling named <code>siblingName</code>. Two objects are siblings if they share the same parent.</p> <p>Arguments</p> <ul> <li><code>siblingName</code>: string. The name of the desired sibling.</li> </ul> <p>Returns</p> <p>A sibling of name <code>siblingName</code>, or <code>null</code> if there is no such object.</p>"},{"location":"reference/object/#findobject","title":"findObject","text":"<p><code>findObject(objectName)</code></p> <p>Finds a descendant (child, grand-child, and so on) named <code>objectName</code>. Since this function traverses the object tree, it's recommended to cache its return value. Do not use it in loops or states, as it might be slow.</p> <p>Arguments</p> <ul> <li><code>objectName</code>: string. The name of the desired object.</li> </ul> <p>Returns</p> <p>A descendant named <code>objectName</code>, or <code>null</code> if there is no such object.</p> <p>Example</p> <pre><code>object \"TestObject\"\n{\n    // will search for SomeOtherObject in the Application\n    obj = Application.findObject(\"SomeOtherObject\");\n\n    state \"main\"\n    {\n        if(obj != null)\n            Console.print(\"Found the object.\");\n        else\n            Console.print(\"Object not found.\");\n\n        destroy();\n    }\n}\n</code></pre>"},{"location":"reference/object/#findobjects","title":"findObjects","text":"<p><code>findObjects(objectName)</code></p> <p>Finds all descendants named <code>objectName</code>. Since this function traverses the object tree, it's recommended to cache its return value. Do not use it in loops or states, as it might be slow.</p> <p>Available since: SurgeScript 0.5.4</p> <p>Arguments</p> <ul> <li><code>objectName</code>: string. The name of the objects to be found.</li> </ul> <p>Returns</p> <p>A new array containing all descendants named <code>objectName</code>. If no such descendants are found, an empty array is returned.</p>"},{"location":"reference/object/#findobjectwithtag","title":"findObjectWithTag","text":"<p><code>findObjectWithTag(tagName)</code></p> <p>Finds a descendant tagged <code>tagName</code>. Since this function traverses the object tree, it's recommended to cache its return value. Do not use it in loops or states, as it might be slow.</p> <p>Available since: SurgeScript 0.5.4</p> <p>Arguments</p> <ul> <li><code>tagName</code>: string. The name of a tag.</li> </ul> <p>Returns</p> <p>A descendant tagged <code>tagName</code>, or <code>null</code> if there is no such object.</p>"},{"location":"reference/object/#findobjectswithtag","title":"findObjectsWithTag","text":"<p><code>findObjectsWithTag(tagName)</code></p> <p>Finds all descendants tagged <code>tagName</code>. Since this function traverses the object tree, it's recommended to cache its return value. Do not use it in loops or states, as it might be slow.</p> <p>Available since: SurgeScript 0.5.4</p> <p>Arguments</p> <ul> <li><code>tagName</code>: string. The name of a tag.</li> </ul> <p>Returns</p> <p>A new array containing all descendants tagged <code>tagName</code>. If no such descendants are found, an empty array is returned.</p>"},{"location":"reference/object/#tostring","title":"toString","text":"<p><code>toString()</code></p> <p>Converts the object to a string. This function is designed to be overloaded by your own objects.</p> <p>Returns</p> <p>A string.</p>"},{"location":"reference/object/#equals","title":"equals","text":"<p><code>equals(otherObject)</code></p> <p>Compares <code>this</code> object to <code>otherObject</code>. This function is designed to be overloaded by your own objects.</p> <p>Arguments</p> <ul> <li><code>otherObject</code>: object. An object to compare <code>this</code> to.</li> </ul> <p>Returns</p> <p>Returns <code>true</code> if the objects are equal; <code>false</code> otherwise.</p>"},{"location":"reference/object/#hasfunction","title":"hasFunction","text":"<p><code>hasFunction(functionName)</code></p> <p>Checks if the object has a function named <code>functionName</code>.</p> <p>Arguments</p> <ul> <li><code>functionName</code>: string. The name of the function.</li> </ul> <p>Returns</p> <p>Returns <code>true</code> if the object has a function named <code>functionName</code>.</p>"},{"location":"reference/object/#hastag","title":"hasTag","text":"<p><code>hasTag(tagName)</code></p> <p>Checks if the object has been tagged <code>tagName</code>.</p> <p>See also: TagSystem.hasTag().</p> <p>Arguments</p> <ul> <li><code>tagName</code>: string. The name of the tag.</li> </ul> <p>Returns</p> <p>Returns <code>true</code> if the object has been tagged <code>tagName</code>.</p>"},{"location":"reference/object/#__invoke","title":"__invoke","text":"<p><code>__invoke(functionName, paramsArray)</code></p> <p>Invokes function <code>functionName</code>, passing the parameters specified in <code>paramsArray</code>. The number of elements of <code>paramsArray</code> must be the same as the number of parameters required by the function to be invoked.</p> <p>Available since: SurgeScript 0.5.2</p> <p>Arguments</p> <ul> <li><code>functionName</code>: string. The name of the function to be called.</li> <li><code>paramsArray</code>: Array. The parameters to be passed to the function.</li> </ul> <p>Returns</p> <p>Returns the value returned by the invoked function.</p> <p>Example</p> <pre><code>// The program below will print:\n// 12\n// 12\n// true\n\nobject \"Application\"\n{\n    state \"main\"\n    {\n        Console.print(this.sum(5, 7));\n        Console.print(this.__invoke(\"sum\", [5, 7]));\n        Console.print(sum(5, 7) == __invoke(\"sum\", [5, 7]));\n        Application.exit();\n    }\n\n    fun sum(a, b)\n    {\n        return a + b;\n    }\n}\n</code></pre>"},{"location":"reference/object/#__arity","title":"__arity","text":"<p><code>__arity(functionName)</code></p> <p>Returns the number of arguments of function <code>functionName</code>, if it's defined. If it's not defined, zero will be returned.</p> <p>Available since: SurgeScript 0.5.4</p> <p>Arguments</p> <ul> <li><code>functionName</code>: string. The name of a function.</li> </ul> <p>Returns</p> <p>The number of arguments of the specified function, or zero if the function is not defined.</p>"},{"location":"reference/plugin/","title":"Plugin","text":"<p>SurgeScript features a plugin system that allows you to extend the functionalities of the language. Known as plugins or packages, these objects can be imported and accessed anywhere in the code. They are imported using a <code>using</code> statement. The plugin system can be accessed simply by typing <code>Plugin</code>.</p> <p>Example:</p> <pre><code>// File: app.ss\n// An application that uses StringUtils, defined in another file\nusing StringUtils;\n\nobject \"Application\"\n{\n    str = \"alucard\";\n\n    state \"main\"\n    {\n        Console.print(\"Reverse a string:\");\n        Console.print(str);\n        Console.print(StringUtils.reverse(str));\n        Application.exit();\n    }\n}\n</code></pre> <pre><code>// File: string_utils.ss\n// String utilities\n\n@Package\nobject \"StringUtils\"\n{\n    fun reverse(str)\n    {\n        buf = \"\";\n        for(i = str.length - 1; i &gt;= 0; i--)\n            buf += str[i];\n        return buf;\n    }\n}\n</code></pre> <p>Available since: SurgeScript 0.5.2</p>"},{"location":"reference/plugin/#properties","title":"Properties","text":""},{"location":"reference/plugin/#count","title":"count","text":"<p><code>count</code>: number, read-only.</p> <p>The number of plugins.</p>"},{"location":"reference/plugin/#functions","title":"Functions","text":""},{"location":"reference/plugin/#spawn","title":"spawn","text":"<p><code>spawn(objectName)</code></p> <p>Spawns an object called <code>objectName</code> as a plugin. This function is not to be used directly, as SurgeScript spawns the plugins automatically for you.</p> <p>Arguments</p> <ul> <li><code>objectName</code>: string. The name of the object to be spawned as a plugin. It's not recommended to include special characters in this name.</li> </ul>"},{"location":"reference/plugin/#get","title":"get","text":"<p><code>get(objectName)</code></p> <p>Gets a reference to the plugin named <code>objectName</code>. The <code>[ ]</code> operator can be used instead of the <code>get()</code> function, as in <code>Plugin[objectName]</code>.</p> <p>Rather than using this function, it's recommended to import the desired object using the <code>using MyObject;</code> statement at the beginning of your code. Your object will be available as <code>MyObject</code>.</p> <p>Arguments</p> <ul> <li><code>objectName</code>: string. The name of the plugin.</li> </ul> <p>Example</p> <pre><code>using StringUtils;\n\n// ...\n\nassert(Plugin[\"StringUtils\"] === StringUtils);\nassert(Plugin.StringUtils === StringUtils);\n</code></pre>"},{"location":"reference/string/","title":"String","text":"<p>Routines for strings. The String object is not supposed to be used directly (generally speaking). The functions below are available for primitive values of the string type.</p> <p>Example:</p> <pre><code>// Useful string routines\nx = \"SurgeScript\".toLowerCase(); // \"surgescript\"\ny = x.substr(0, 5); // \"surge\"\nz = x[0]; // \"s\" (first character of x)\nn = y.length; // 5\n</code></pre> <p>Strings in SurgeScript are immutable. Once a string is set, its individual characters cannot be changed. If you need to modify the content of a string, reassign the variable to a new string.</p>"},{"location":"reference/string/#static-functions","title":"Static functions","text":""},{"location":"reference/string/#isnullorempty","title":"isNullOrEmpty","text":"<p><code>isNullOrEmpty(value)</code></p> <p>Checks if the given <code>value</code> is either <code>null</code> or an empty string (<code>\"\"</code>).</p> <p>Available since: SurgeScript 0.5.3</p> <p>Arguments</p> <ul> <li><code>value</code>: string | <code>null</code>. The value to be tested.</li> </ul> <p>Returns</p> <p>Returns <code>true</code> if <code>value</code> is either <code>null</code> or an empty string.</p> <p>Example</p> <pre><code>name = \"Surge\";\n//name = \"\";\n//name = null;\n\nif(!String.isNullOrEmpty(name))\n    Console.print(name);\n</code></pre>"},{"location":"reference/string/#properties","title":"Properties","text":""},{"location":"reference/string/#length","title":"length","text":"<p><code>length</code>: number, read-only.</p> <p>The length of the string.</p>"},{"location":"reference/string/#functions","title":"Functions","text":""},{"location":"reference/string/#valueof","title":"valueOf","text":"<p><code>valueOf()</code></p> <p>The primitive value of the string, i.e., the string itself.</p> <p>Returns</p> <p>The string.</p>"},{"location":"reference/string/#tostring","title":"toString","text":"<p><code>toString()</code></p> <p>Convert to string.</p> <p>Returns</p> <p>The string itself.</p>"},{"location":"reference/string/#equals","title":"equals","text":"<p><code>equals(str)</code></p> <p>Compares the string to another string <code>str</code>.</p> <p>Arguments</p> <ul> <li><code>str</code>: string.</li> </ul> <p>Returns</p> <p>Returns <code>true</code> if the strings are equal.</p>"},{"location":"reference/string/#get","title":"get","text":"<p><code>get(i)</code></p> <p>Gets the <code>i</code>-th character of the string. The <code>[ ]</code> operator can be used equivalently.</p> <p>Arguments</p> <ul> <li><code>i</code>: integer number. A value between 0 (inclusive) and the length of the string (exclusive).</li> </ul> <p>Returns</p> <p>The <code>i</code>-th character of the string (0-based index).</p>"},{"location":"reference/string/#indexof","title":"indexOf","text":"<p><code>indexOf(str)</code></p> <p>Finds the position of the first occurrence of <code>str</code> in the string.</p> <p>Arguments</p> <ul> <li><code>str</code>: string. The string to be searched for.</li> </ul> <p>Returns</p> <p>The position (0-based index) of the first occurrence of <code>str</code> in the string, or -1 if there is no such occurrence.</p> <p>Example</p> <pre><code>name = \"SurgeScript\";\na = name.indexOf(\"Surge\"); // a is 0\nb = name.indexOf(\"Neon\"); // b is -1\nc = name.indexOf(\"e\"); // c is 4\nd = name.indexOf(\"script\"); // d is -1, as the search is case-sensitive\n</code></pre>"},{"location":"reference/string/#substr","title":"substr","text":"<p><code>substr(start, length)</code></p> <p>Extracts the substring starting at position <code>start</code> with length <code>length</code>.</p> <p>Arguments</p> <ul> <li><code>start</code>: number. The start position. The beginning of the string is at position 0.</li> <li><code>length</code>: number. The length of the substring.</li> </ul> <p>Returns</p> <p>The substring with length <code>length</code> starting at <code>start</code>.</p> <p>Example</p> <pre><code>name = \"SurgeScript\";\nsurge = name.substr(0, 5); // \"Surge\"\nscript = name.substr(5, 6); // \"Script\"\ne = name.substr(4, 1); // \"e\"\nempty = name.substr(555, 1); // \"\"\n</code></pre>"},{"location":"reference/string/#concat","title":"concat","text":"<p><code>concat(str)</code></p> <p>Concatenates two strings. This is the same as using the <code>+</code> operator.</p> <p>Arguments</p> <ul> <li><code>str</code>: string.</li> </ul> <p>Returns</p> <p>The caller string concatenated with <code>str</code> at the end.</p> <p>Example</p> <pre><code>name = \"Surge\".concat(\"Script\"); // SurgeScript\nname = \"Surge\" + \"Script\"; // SurgeScript\n</code></pre>"},{"location":"reference/string/#replace","title":"replace","text":"<p><code>replace(oldstr, newstr)</code></p> <p>Replaces all occurrences of <code>oldstr</code> to <code>newstr</code> in the caller string.</p> <p>Arguments</p> <ul> <li><code>oldstr</code>: string. The substring to be replaced.</li> <li><code>newstr</code>: string. The substring that should appear in the result.</li> </ul> <p>Returns</p> <p>The caller string having all its occurrences of <code>oldstr</code> replaced to <code>newstr</code>.</p> <p>Example</p> <pre><code>// dst is \"Gimacian, Neon and Charge\"\nsrc = \"Surge, Neon and Charge\";\ndst = src.replace(\"Surge\", \"Gimacian\");\n</code></pre>"},{"location":"reference/string/#tolowercase","title":"toLowerCase","text":"<p><code>toLowerCase()</code></p> <p>Converts the string to lower case.</p> <p>Returns</p> <p>The string converted to lower case.</p>"},{"location":"reference/string/#touppercase","title":"toUpperCase","text":"<p><code>toUpperCase()</code></p> <p>Converts the string to upper case.</p> <p>Returns</p> <p>The string converted to upper case.</p>"},{"location":"reference/surgescript/","title":"SurgeScript","text":"<p>Data related to the scripting language itself. You can access this object simply by typing <code>SurgeScript</code>.</p> <p>Example:</p> <pre><code>// Prints the version of the SurgeScript runtime\nobject \"Application\"\n{\n    state \"main\"\n    {\n        Console.print(SurgeScript.version);\n    }\n}\n</code></pre> <p>Available since: SurgeScript 0.5.2</p>"},{"location":"reference/surgescript/#properties","title":"Properties","text":""},{"location":"reference/surgescript/#version","title":"version","text":"<p><code>version</code>: string, read-only.</p> <p>Version number of the SurgeScript runtime.</p>"},{"location":"reference/system/","title":"System","text":"<p>The root object. Used to gather data from the language and to access special objects. It can be accessed by typing <code>System</code>.</p>"},{"location":"reference/system/#properties","title":"Properties","text":""},{"location":"reference/system/#tags","title":"tags","text":"<p><code>tags</code>: Tag System object, read-only.</p> <p>A reference to the Tag System.</p>"},{"location":"reference/system/#gc","title":"gc","text":"<p><code>gc</code>: Garbage Collector object, read-only.</p> <p>A reference to the Garbage Collector object.</p>"},{"location":"reference/system/#objectcount","title":"objectCount","text":"<p><code>objectCount</code>: number, read-only.</p> <p>The total number of objects at this moment.</p>"},{"location":"reference/system/#functions","title":"Functions","text":""},{"location":"reference/system/#exit","title":"exit","text":"<p><code>exit()</code></p> <p>Exits the Application.</p>"},{"location":"reference/system/#destroy","title":"destroy","text":"<p><code>destroy()</code></p> <p>The same as <code>exit()</code>.</p>"},{"location":"reference/tags/","title":"TagSystem","text":"<p>Utility functions for dealing with object tags. This object is available at <code>System.tags</code> and shouldn't be instantiated directly.</p>"},{"location":"reference/tags/#functions","title":"Functions","text":""},{"location":"reference/tags/#list","title":"list","text":"<p><code>list()</code></p> <p>Lists all tags used in all objects.</p> <p>Returns</p> <p>A new Array of strings with all tags used in all objects.</p>"},{"location":"reference/tags/#select","title":"select","text":"<p><code>select(tagName)</code></p> <p>Selects all objects that are tagged <code>tagName</code>.</p> <p>Arguments</p> <ul> <li><code>tagName</code>: string.</li> </ul> <p>Returns</p> <p>A new Array of strings with the names of the objects tagged with <code>tagName</code>. If there are no such objects, an empty array is returned.</p>"},{"location":"reference/tags/#tagsof","title":"tagsOf","text":"<p><code>tagsOf(objectName)</code></p> <p>Returns the tags of the objects named <code>objectName</code>.</p> <p>Available since: SurgeScript 0.6.0</p> <p>Arguments</p> <ul> <li><code>objectName</code>: string.</li> </ul> <p>Returns</p> <p>A new Array of strings with the names of the tags associated with the objects named <code>objectName</code>. If the objects are untagged or do not exist, an empty array is returned.</p>"},{"location":"reference/tags/#hastag","title":"hasTag","text":"<p><code>hasTag(objectName, tagName)</code></p> <p>Checks if objects named <code>objectName</code> are tagged <code>tagName</code>. Prefer using Object.hasTag() if possible.</p> <p>See also: Object.hasTag().</p> <p>Available since: SurgeScript 0.6.0</p> <p>Arguments</p> <ul> <li><code>objectName</code>: string.</li> <li><code>tagName</code>: string.</li> </ul> <p>Returns</p> <p>Returns <code>true</code> if the objects are tagged as specified, or <code>false</code> otherwise.</p>"},{"location":"reference/time/","title":"Time","text":"<p>Time utilities. This object is available simply by typing <code>Time</code>.</p>"},{"location":"reference/time/#properties","title":"Properties","text":""},{"location":"reference/time/#time_1","title":"time","text":"<p><code>time</code>: number, read-only.</p> <p>Elapsed time, in seconds, since the application was started and measured at the beginning of the current frame.</p>"},{"location":"reference/time/#delta","title":"delta","text":"<p><code>delta</code>: number, read-only.</p> <p>The time, in seconds, taken to complete the last frame of the application. Use this value to make your application behave consistently regardless of the frame rate.</p>"},{"location":"reference/time/#now","title":"now","text":"<p><code>now</code>: number, read-only.</p> <p>Elapsed time, in seconds, since the application was started and measured at the moment this property is evaluated.</p> <p>Available since: SurgeScript 0.5.4</p> <p>Tip</p> <p>It's generally advisable to use Time.time instead, because Time.now may return different values in the same frame of your application.</p>"},{"location":"tutorials/advanced_features/","title":"Advanced features","text":"<p>This section describes advanced features of SurgeScript.</p>"},{"location":"tutorials/advanced_features/#lookup-operator","title":"Lookup operator","text":"<p>Some programming languages, such as C++, have a feature called operator overloading. It's a syntactic sugar that allows the programmer to attribute custom implementations to different operators.</p> <p>In SurgeScript, the <code>[]</code> operator (also called the lookup operator), used by Arrays and Dictionaries, is used to get and set values from/to the data structure. In fact, the <code>[]</code> operator can be used with any object. It is necessary to define, in your object, functions named <code>get()</code> and <code>set()</code> with the following signature:</p> <pre><code>fun get(key)\n{\n    // custom implementation\n}\n\nfun set(key, value)\n{\n    // custom implementation\n}\n</code></pre> <p>Given an object <code>obj</code>, the expression <code>x = obj[key]</code> is equivalent to <code>x = obj.get(key)</code>. Similarly, <code>obj[key] = value</code> is equivalent to <code>obj.set(key, value)</code>.</p>"},{"location":"tutorials/advanced_features/#function-objects","title":"Function objects","text":"<p>In SurgeScript, objects can be made to behave like functions. We call these objects function objects (or functors). To make an object behave like a function, you have to overload the <code>()</code> operator (also known as the function operator). This is done by defining function <code>call()</code> in your object:</p> <pre><code>fun call()\n{\n    // custom implementation\n}\n</code></pre> <p>Function <code>call()</code> may take any number of parameters. Given an object <code>f</code>, the expression <code>y = f(x)</code> is equivalent to <code>y = f.call(x)</code>. Notice that, since <code>f</code> is an object, you may exchange its implementation during runtime.</p> <p>Function objects have many uses, including events and sorting arrays.</p>"},{"location":"tutorials/advanced_features/#assertions","title":"Assertions","text":"<p>The <code>assert(condition)</code> statement specifies a <code>condition</code> that you expect to be true at a certain point of your program. If that condition turns out to be false, the program will be interrupted with an assertion failed error. Example:</p> <pre><code>// will crash if name isn't \"Surge\"\nassert(name == \"Surge\");\n</code></pre> <p>Since SurgeScript 0.6.1, you may add a <code>message</code> to your assertion, as in <code>assert(condition, message)</code>. Your <code>message</code> must be a string literal. It will be displayed in a crash if the assertion fails. Example:</p> <pre><code>// crash with a message if the assertion fails\nassert(name == \"Surge\", \"The name must be Surge\");\n</code></pre>"},{"location":"tutorials/advanced_features/#chaining","title":"Chaining","text":"<p>In SurgeScript, it's possible to configure objects in an elegant way using a technique called chaining. Consider the object below - it simply displays a message at regular intervals:</p> <pre><code>object \"Parrot\"\n{\n    message = \"I am a Parrot\";\n\n    state \"main\"\n    {\n        if(timeout(1.0))\n            state = \"print\";\n    }\n\n    state \"print\"\n    {\n        Console.print(message);\n        state = \"main\";\n    }\n\n    // Note that this function returns\n    // this, i.e., the object itself.\n    fun setMessage(newMessage)\n    {\n        message = newMessage;\n        return this;\n    }\n}\n</code></pre> <p>Suppose that, in your Application, you would like to spawn that object and modify its message. One way of doing it would be making its internal variable <code>public</code> and changing its contents in the constructor function of your Application. A more concise and elegant way of doing it would be calling function <code>setMessage()</code> just after you spawn the object:</p> <pre><code>object \"Application\"\n{\n    parrot = spawn(\"Parrot\").setMessage(\"Hello!\");\n\n    state \"main\"\n    {\n    }\n}\n</code></pre> <p>Observe that the function we have defined does two things:</p> <ul> <li>It modifies the internals of the object in some way</li> <li>It always returns <code>this</code> (that is, the object itself)</li> </ul> <p>We call that function a chainable function. You may call such a function from your Application, just after <code>spawn()</code>, and you'll still have a reference to the spawned object. Moreover, since chainable functions always return <code>this</code>, you may chain multiple function calls into a single statement, making your code concise and your statement descriptive. Example:</p> <pre><code>parrot = spawn(\"Parrot\").setMessage(\"Hello!\").setInterval(2.0);\n</code></pre>"},{"location":"tutorials/advanced_features/#factory","title":"Factory","text":"<p>In SurgeScript, a factory is a functor that spawns an object for you. The object can be spawned and configured in a single call. In the example below, factory <code>Greeter</code> spawns and configures <code>Greeting</code> objects. We annotate the factory with <code>@Package</code>, so it can be imported anywhere in the code.</p> <p>To the end-user, calling <code>Greeter()</code> is simpler than manually spawning and configuring a <code>Greeting</code> every time it is needed.</p> <pre><code>// Factory example\nusing Greeter; // import the factory\n\nobject \"Application\"\n{\n    state \"main\"\n    {\n        // This will print:\n        // Hello, alex!\n        g = Greeter(\"alex\");\n        g.greet();\n        exit();\n    }\n}\n\n// File: greeting.ss\nobject \"Greeting\"\n{\n    public name = \"anon\";\n\n    fun greet()\n    {\n        Console.print(\"Hello, \" + name + \"!\");\n    }\n}\n\n@Package\nobject \"Greeter\"\n{\n    // Greeter is a factory. It spawns and configures\n    // a Greeting object for you. As it is a package,\n    // it can be imported and used anywhere.\n    fun call(name)\n    {\n        g = spawn(\"Greeting\");\n        g.name = name;\n        return g;\n    }\n}\n</code></pre> <p>In the example above, objects spawned by the factory will be children of the factory. If you need the parent of the spawned object to be the caller, simply write <code>g = caller.spawn(\"Greeter\")</code>. Know that <code>caller</code> points to the object that called the function (or <code>null</code> if not applicable).</p>"},{"location":"tutorials/advanced_features/#iterators","title":"Iterators","text":"<p>As seen in the loops section, the foreach loop may be used to iterate through an iterable collection. In SurgeScript, an iterable collection is an object that implements the iterator protocol described below.</p> <p>You may implement your own iterable collections by tagging them as <code>\"iterable\"</code> and implementing function <code>iterator()</code>. If you have ever used Java, you'll find this to be familiar.</p> <pre><code>// Iterable collections are tagged \"iterable\"\n// and implement function iterator()\nobject \"MyCollection\" is \"iterable\"\n{\n    fun iterator()\n    {\n        // function iterator() takes no arguments and \n        // returns a new iterator object\n    }\n}\n</code></pre> <p>For each iterable collection you define, you must define its iterator object. The iterator object must be tagged <code>\"iterator\"</code> and implement functions <code>next()</code> and <code>hasNext()</code> (both take no arguments):</p> <pre><code>// Iterators are tagged \"iterator\" and\n// implement functions next() and hasNext()\nobject \"MyIterator\" is \"iterator\"\n{\n    fun next()\n    {\n        // returns the next element of the collection\n        // and advances the iteration pointer\n        // the iterable collection is usually the parent\n        // object, i.e., collection = parent\n    }\n\n    fun hasNext()\n    {\n        // returns true if the enumeration isn't over\n        // returns false if there are no more elements\n    }\n}\n</code></pre> <p>You may iterate over an iterable collection using the following code:</p> <pre><code>it = collection.iterator();\nwhile(it.hasNext()) {\n    x = it.next();\n\n    // do something with x\n    // x is an element of the collection\n    Console.print(x);\n}\n</code></pre> <p>Or, alternatively, using the compact foreach:</p> <pre><code>foreach(x in collection) {\n    Console.print(x);\n}\n</code></pre> <p>For the sake of completion, the following code demonstrates how to implement a custom iterable collection that hold even numbers from 0 up to 20 without having to store them explicitly in memory:</p> <pre><code>object \"Application\"\n{\n    evenNumbers = spawn(\"Even Numbers\").upTo(20);\n\n    state \"main\"\n    {\n        // print all the numbers of the iterable collection\n        foreach(number in evenNumbers)\n            Console.print(number);\n\n        // we're done!\n        exit();\n    }\n}\n\nobject \"Even Numbers\" is \"iterable\"\n{\n    lastNumber = 0;\n\n    fun iterator()\n    {\n        return spawn(\"Even Numbers Iterator\").upTo(lastNumber);\n    }\n\n    fun upTo(num)\n    {\n        // upTo() is a chainable function that\n        // is NOT part of the iterator protocol\n        // (but it's useful for this example)\n        lastNumber = Number(num);\n        return this;\n    }\n}\n\nobject \"Even Numbers Iterator\" is \"iterator\"\n{\n    nextNumber = 0;\n    lastNumber = 0;\n\n    fun next()\n    {\n        currentNumber = nextNumber;\n        nextNumber += 2;\n        return currentNumber;\n    }\n\n    fun hasNext()\n    {\n        return nextNumber &lt;= lastNumber;\n    }\n\n    fun upTo(num)\n    {\n        // upTo() is a chainable function that\n        // is NOT part of the iterator protocol\n        // (but it's useful for this example)\n        lastNumber = Number(num);\n        return this;\n    }\n}\n</code></pre> <p>The output of this code is:</p> <pre><code>0\n2\n4\n6\n8\n10\n12\n14\n16\n18\n20\n</code></pre> <p>Challenge!</p> <p>Can you write an iterable collection called Fibonacci Sequence containing the first N Fibonacci numbers without storing them all explicitly in memory? It should be used as follows:</p> <pre><code>// Desired output (for N=10): 0 1 1 2 3 5 8 13 21 34\nsequence = spawn(\"Fibonacci Sequence\").ofLength(10);\nforeach(number in sequence)\n    Console.print(number);\n</code></pre>"},{"location":"tutorials/best_practices/","title":"Best Practices","text":"<ul> <li>Read the Components section. It's crucial that you understand it.</li> <li>Follow the golden rule: objects should not mess with each others' internals!<ul> <li>Objects should not change others' internal variables or states directly (not allowed!)</li> <li>Objects should define functions that can be operated upon by the external world (API)</li> </ul> </li> <li>Use a consistent coding style. Suggestion:<ul> <li>Use camelCase names for both variables and functions.</li> <li>Use 4 spaces when indenting your code.</li> </ul> </li> <li>Combine related packages into a single one: don't pollute the global namespace.</li> <li>Read the SurgeScript documentation often.</li> <li>Practice, practice, practice! - and have fun!</li> </ul>"},{"location":"tutorials/comments/","title":"Comments","text":"<p>Comments are used to make your code more human-readable. They are ignored by the computer. SurgeScript allows two kinds of comments: single-line comments and multi-line comments.</p>"},{"location":"tutorials/comments/#single-line-comments","title":"Single-line comments","text":"<p>Single-line comments start with a <code>//</code>. Example:</p> <pre><code>// This line has no effect on the code (it's just for improved readability)\nx = 3 + 4; // x is now 7\n</code></pre>"},{"location":"tutorials/comments/#multi-line-comments","title":"Multi-line comments","text":"<p>Multi-line comments start with a <code>/*</code> and end with a <code>*/</code>. Example:</p> <pre><code>/*\n * Comments can, but don't have to, take\n * multiple lines if you use this form.\n */\nx = 3 + 4; /* x is now 7 */\n</code></pre> <p>Comments of this form cannot be nested.</p>"},{"location":"tutorials/components/","title":"Components","text":""},{"location":"tutorials/components/#introduction","title":"Introduction","text":"<p>Entity Component System (ECS) is a software pattern used in game development. The idea is that in-game objects (called entities) can be customized by adding or removing objects (called components) during runtime. Components add functionalities or behaviors to the entities to which they are attached to. In SurgeScript, both entities and components are objects - the difference is conceptual.</p> <p>As an example, consider an in-game object called Parrot. Objects by themselves are empty; they do nothing. However, an interesting behavior of parrots is that they are blabbers: they keep repeating the same thing over and over again. So, let's create an empty object called Parrot, tag it as an entity and spawn the Blabber component on it:</p> <pre><code>object \"Parrot\" is \"entity\"\n{\n    blabber = spawn(\"Blabber\");\n\n    state \"main\"\n    {\n    }\n}\n\nobject \"Blabber\"\n{\n    state \"main\"\n    {\n        if(timeout(2)) // blab every 2 seconds\n            state = \"blab\";\n    }\n\n    state \"blab\"\n    {\n        Console.print(\"Hello!\");\n        state = \"main\";\n    }\n}\n</code></pre> <p>Now, whenever you spawn a Parrot, it will keep blabbing (parroting) unceasingly:</p> <pre><code>Hello!\nHello!\nHello!\n...\n</code></pre> <p>Suppose now that your Parrot is a Kamikaze Robot: it blabs so much that it will explode itself after some time. We'll attach a Time Bomb to the parroting robot, so that it will stop blabbing after a while:</p> <pre><code>object \"Time Bomb\"\n{\n    state \"main\"\n    {\n        if(timeout(15)) // explode after 15 seconds\n            state = \"explode\";\n    }\n\n    state \"explode\"\n    {\n        Console.print(\"BOOOM!\");\n        parent.destroy(); // destroy the parent object\n    }\n}\n\nobject \"Parrot\" is \"entity\"\n{\n    blabber = spawn(\"Blabber\");\n    bomb = spawn(\"Time Bomb\");\n\n    state \"main\"\n    {\n    }\n}\n</code></pre> <p>Now, here's the output:</p> <pre><code>Hello!\nHello!\nHello!\nHello!\nHello!\nHello!\nHello!\nBOOOM!\n</code></pre> <p>In this example, Parrot is an entity and Blabber and Time Bomb are its components. Once the entity is destroyed, its components (its children) are also destroyed automatically.</p>"},{"location":"tutorials/components/#design-considerations","title":"Design considerations","text":"<p>In some implementations of ECS, entities are implemented as integers and components consist of raw data only. The game logic is executed by the System layer, which iterates throughout all entities continuously and executes the logic according to the components attached to them.</p> <p>In SurgeScript, components execute their own code and can be attached to entities simply by spawning them as children. Still, you can use the former approach if you wish to do so.</p>"},{"location":"tutorials/components/#composition-over-inheritance","title":"Composition over inheritance","text":"<p>SurgeScript does not explicitly support inheritance, a feature found in other object-oriented languages. The usage of components is encouraged instead. SurgeScript favors composition over inheritance, allowing for greater flexibility when defining in-game objects.</p>"},{"location":"tutorials/conditionals/","title":"Conditionals","text":""},{"location":"tutorials/conditionals/#introduction","title":"Introduction","text":"<p>Conditionals are <code>if-then</code> statements. If a certain <code>condition</code> evaluates to <code>true</code>, execute a block of code. If not, don't execute it.</p> <pre><code>if(condition) {\n    // this will be executed only if\n    // the condition is true\n}\n</code></pre> <p>Alternatively, we may include an <code>else</code> statement followed by a block of code that will only be executed if the condition is not true:</p> <pre><code>if(condition) {\n    // this will be executed only if\n    // the condition is true\n}\nelse {\n    // this will be executed only if\n    // the condition is false\n}\n</code></pre>"},{"location":"tutorials/conditionals/#example","title":"Example","text":"<p>The following example will print underaged if variable <code>age</code> is less than 18, or adult otherwise:</p> <pre><code>object \"Application\"\n{\n    age = 23;\n\n    state \"main\"\n    {\n        if(age &lt; 18) {\n            // variable age is less than 18\n            Console.print(\"underaged\");\n        }\n        else {\n            // variable age is not less than 18\n            Console.print(\"adult\");\n        }\n    }\n}\n</code></pre>"},{"location":"tutorials/conditionals/#inline-conditionals","title":"Inline conditionals","text":"<p>Just like other languages with C-based syntax, the expression <code>condition ? true_value : false_value</code> evaluates to <code>true_value</code> if <code>condition</code> is <code>true</code> and to <code>false_value</code> if <code>condition</code> is <code>false</code>.</p> <p>For example, the script below will print underaged if variable <code>age</code> is less than 18, or adult otherwise:</p> <pre><code>object \"Application\"\n{\n    age = 23;\n    message = age &lt; 18 ? \"underaged\" : \"adult\";\n\n    state \"main\"\n    {\n        Console.print(message);\n    }\n}\n</code></pre>"},{"location":"tutorials/expressions/","title":"Expressions","text":"<p>SurgeScript supports many kinds of expressions. Expressions may involve strings, numbers or booleans. Let's study each case:</p>"},{"location":"tutorials/expressions/#constants","title":"Constants","text":"<p>Constants are types of expressions. They may be numbers, strings, booleans... You may attribute constant values to variables using the assignment operator (<code>=</code>):</p> <pre><code>// strings\nname = \"Surge\"; // variable name receives string \"Surge\"\nmessage = \"Surge's home\";\notherMessage = 'Single-quoted strings are also allowed';\n\n// numbers\nweight = 35;\nspeed = 42.2;\n\n// booleans\nlike = true;\ncrazy = false;\n\n// null\nnext = null;\n</code></pre>"},{"location":"tutorials/expressions/#arithmetic-operators","title":"Arithmetic operators","text":"<p>SurgeScript can perform basic arithmetic. The operators are as follows:</p> Operator Meaning <code>+</code> Addition <code>-</code> Subtraction <code>*</code> Multiplication <code>/</code> Division <code>%</code> Remainder <p>The multiplication, division and remainder operators have precedence over the addition and the subtraction operators.</p> <p>Examples:</p> <pre><code>two = 1 + 1;\nten = 5 * 2;\neleven = 5 * 2 + 1;\nfour = two * two;\nfifteen = eleven + four;\nthree = fifteen / 5;\npositive = +5;\nnegative = -1;\nzero = 15 - 10 - 5;\none = 15 - (10 + 4);\ntwelve = (2 + 2) * 3;\nprime = -(-15 + 8);\nseven = 5 + 5 % 3;\nnegativeTwo = -5 % 3;\n</code></pre>"},{"location":"tutorials/expressions/#comparison-operators","title":"Comparison operators","text":"<p>Comparison operators compare two operands.</p> Operator Meaning <code>==</code> Equality operator <code>!=</code> Inequality operator <code>&lt;</code> Less than <code>&lt;=</code> Less or equal <code>&gt;</code> Greater than <code>&gt;=</code> Greater or equal <code>===</code> Strong equality <code>!==</code> Strong inequality <p>Examples:</p> <pre><code>x = 1;\ny = (x == 1); // y is true\nz = (x != 1); // z is false\nw = x &gt; 1; // w is false\nt = x &gt;= 1; // t is true\n</code></pre> <p>Pay attention!</p> <p>Notice that the equality operator, used for comparing expressions for equality, is <code>==</code>. Pay attention! Don't confuse the equality operator (<code>==</code>) with the assignment operator (<code>=</code>). The expression <code>(x = 1)</code> always evaluates to 1, whereas <code>(x == 1)</code> is <code>true</code> only if x equals 1.</p> <p>Strong equality</p> <p>Unlike their counterparts, strong equality/inequality operators compare not only the content of the operands, but also their type. While <code>\"1\" == 1</code> evalutes to <code>true</code>, <code>\"1\" === 1</code> does not.</p>"},{"location":"tutorials/expressions/#logical-operators","title":"Logical operators","text":"<p>Logical operators involve booleans (<code>true</code> or <code>false</code> values). While the not operator requires only one operand, operators and and or require two.</p> Operator Meaning <code>&amp;&amp;</code> and <code>||</code> or <code>!</code> not <p>The table below summarizes the basic logical expressions:</p> Expression Result <code>a &amp;&amp; b</code> <code>true</code> only if both <code>a</code> and <code>b</code> are true <code>a || b</code> <code>true</code> if <code>a</code> is true or <code>b</code> is true <code>!a</code> <code>true</code> if <code>a</code> is false, <code>false</code> if <code>a</code> is true <p>Notice that not has higher precedence than the other two operators. Examples:</p> <pre><code>x = 5 &lt; 2; // evaluates to false\ny = !x; // evaluates to true\nz = 18 &lt; 35 || x; // evaluates to true\nw = (z &amp;&amp; x) || true; // evaluates to true\nt = !x &amp;&amp; x; // evaluates to false\n</code></pre> <p>Short-circuit evaluation</p> <p>SurgeScript performs short-circuit evaluation in and and or operations. This means that the second operator is not evaluated if the first alone is sufficient to determine the value of the operation. Example: in the expression <code>a || b</code>, expression <code>b</code> is not evaluated if <code>a</code> is evaluated to <code>true</code>. Similarly, in <code>a &amp;&amp; b</code>, expression <code>b</code> is not evaluated if <code>a</code> is evaluated to <code>false</code>.</p>"},{"location":"tutorials/expressions/#textual-expressions","title":"Textual expressions","text":"<p>You may concatenate strings with the <code>+</code> operator. Example:</p> <pre><code>message = \"Surge\" + \" rocks!\"; // evaluates to \"Surge rocks!\"\n</code></pre> <p>Other data types, such as numbers and booleans, may also be implicitly converted to strings when using this feature. Example:</p> <pre><code>group = \"Jackson \" + 5; // evaluates to \"Jackson 5\"\n</code></pre>"},{"location":"tutorials/expressions/#assignment-operators","title":"Assignment operators","text":"<p>The attribution operator (<code>=</code>) may be used to attribute data to variables. However, there's more to it. The expression <code>variable = \"data\"</code> is itself evaluated to string <code>\"data\"</code>.</p> <p>Likewise, the expression <code>variable = variable + 5</code> is evaluated to the new value of the variable and may be shortened to <code>variable += 5</code>.</p> <p>Let's see what kind of assignment expressions we have:</p> Expression Translates to Meaning <code>x = value</code> <code>x = value</code> Assigns <code>value</code> to <code>x</code> <code>x += value</code> <code>x = x + value</code> Adds <code>value</code> to <code>x</code> <code>x -= value</code> <code>x = x - value</code> Subtracts <code>value</code> from <code>x</code> <code>x *= value</code> <code>x = x * value</code> Multiplies <code>x</code> by <code>value</code> <code>x /= value</code> <code>x = x / value</code> Divides <code>x</code> by <code>value</code> <code>x %= value</code> <code>x = x % value</code> Sets <code>x</code> to the remainder of <code>x / value</code> <p>Example:</p> <pre><code>language = \"Surge\";\nlanguage += \"Script\";\n// language now evaluates to \"SurgeScript\"\n\nnumber = 5;\nnumber += 2;\n// number now evaluates to 7\n</code></pre>"},{"location":"tutorials/expressions/#increment-and-decrement","title":"Increment and decrement","text":"<p>Increment and decrement operators should be used only on numeric variables.</p> Expression Meaning <code>x++</code> Increments x by 1 and returns the old value of x <code>x--</code> Decrements x by 1 and returns the old value of x <code>++x</code> Increments x by 1 and returns the new value of x <code>--x</code> Decrements x by 1 and returns the new value of x <p>Example:</p> <pre><code>x = 1;   // x is 1\ny = x++; // y is 1\nz = ++x; // z is 3\nw = --x; // w is 2\nt = --x; // t is 1\nConsole.print(x); // prints 1\n</code></pre>"},{"location":"tutorials/expressions/#chained-expressions","title":"Chained expressions","text":"<p>You may chain assignment operations:</p> <pre><code>x = y = z = 1;\n</code></pre>"},{"location":"tutorials/expressions/#commas","title":"Commas","text":"<p>The comma operator takes two operands. It first evaluates the first operand and then discards the result. Next, it evaluates the second operand and then returns this result. The comma is the operator with the lowest precedence.</p> <pre><code>c = (1, 2); // Results in c = 2\na = 1, b = 2, c = 3; // Results in a = 1, b = 2 and c = 3\nd = (c++, a); // Results in c = 4, d = 1\ne = (++a, f = 2, 3); // Results in a = 2, e = 3, f = 2\n</code></pre>"},{"location":"tutorials/expressions/#other-expressions","title":"Other expressions","text":""},{"location":"tutorials/expressions/#this","title":"this","text":"<p>The keyword <code>this</code> represents the object in which it appears. Example:</p> <pre><code>this.destroy(); // destroys this object\n</code></pre>"},{"location":"tutorials/expressions/#typeof","title":"typeof","text":"<p>The expression <code>typeof(expr)</code> (or simply <code>typeof expr</code>) is evaluated to a string corresponding to the type of <code>expr</code>. The possible types are: number, string, boolean, object or null. Example:</p> <pre><code>t = typeof 5; // t will hold the string \"number\"\n</code></pre>"},{"location":"tutorials/expressions/#timeout","title":"timeout","text":"<p>The expression <code>timeout(seconds)</code> is a handy feature of SurgeScript. It is evaluated to <code>true</code> if the object has been on the same state for the specified amount of time or more. It can only be used inside states. Example:</p> <pre><code>object \"Application\"\n{\n    state \"main\"\n    {\n        if(timeout(2.0)) {\n            Console.print(\"2 seconds have passed\");\n            state = \"done\";\n        }\n    }\n\n    state \"done\"\n    {\n    }\n}\n</code></pre>"},{"location":"tutorials/functions/","title":"Functions","text":""},{"location":"tutorials/functions/#introduction","title":"Introduction","text":"<p>Functions are blocks of code that you can reuse throughout your program. They may receive input parameters and they always output something. The syntax is as follows:</p> <pre><code>fun function_name(param_1, param_2, param_3, ..., param_n)\n{\n    // block of code\n    // to be executed\n}\n</code></pre> <p>Functions may be associated to objects. Any function associated to an object may be used (called) by the object itself or by other objects. This means that functions are public (they are visible to the outside world).</p> <p>Note: functions must be defined after the states.</p>"},{"location":"tutorials/functions/#return-statement","title":"Return statement","text":"<p>Use the <code>return</code> statement to stop executing the function and to return some value to the caller. Example:</p> <pre><code>// This function will return the double of input parameter x\nfun double(x)\n{\n    return 2 * x;\n    Console.print(\"This line will never be executed.\");\n}\n</code></pre> <p>If no value is specified after the <code>return</code> keyword, the function will be stopped and its return value will be <code>null</code>. Additionally, if no <code>return</code> statement is found, then the return value will also be <code>null</code>.</p> <p>Note: an object state may also contain one or more <code>return</code> statements to stop the execution of its code. However, return values must not be specified in that context, since states do not return values.</p>"},{"location":"tutorials/functions/#simple-example","title":"Simple example","text":"<p>In the example below, we have an object called <code>Calculator</code> with two functions: <code>greet()</code> and <code>sum()</code>. <code>greet()</code> takes no input parameters and just greets the user. On the other hand, <code>sum()</code> takes two input parameters, <code>a</code> and <code>b</code>, and returns the sum <code>a + b</code>:</p> <pre><code>object \"Calculator\"\n{\n    fun greet()\n    {\n        Console.print(\"Hello! I am a Calculator!\");\n    }\n\n    fun sum(a, b)\n    {\n        return a + b;\n    }\n}\n</code></pre> <p>In function <code>sum()</code>, variables <code>a</code> and <code>b</code> hold the input data and are only visible inside the function.</p> <p>Now, let's create a program that uses this <code>Calculator</code>. Remember that the functions defined above can be called by any object, including <code>Application</code>:</p> <pre><code>object \"Application\"\n{\n    calculator = spawn(\"Calculator\");\n\n    state \"main\"\n    {\n        // greet the user\n        calculator.greet();\n\n        // do some computation\n        result = calculator.sum(5, 7);\n        Console.print(result);\n\n        // we're done!\n        Application.exit();\n    }\n}\n</code></pre> <p>The output of the above program is:</p> <pre><code>Hello! I am a Calculator!\n12\n</code></pre> <p>Notice that the <code>Application</code> does not need to know how the functions of the <code>Calculator</code> are implemented. It just needs to know what they do. This means that you may change the implementation of the <code>Calculator</code> without changing the <code>Application</code>, and the end-result will stay the same.</p>"},{"location":"tutorials/functions/#recursive-functions","title":"Recursive functions","text":"<p>In SurgeScript, a function is said to be recursive when it calls itself within its code. Recursion can be useful in many ways; namely, when you define a problem in terms of itself. In mathematics, the factorial of a non-negative integer number <code>n</code>, denoted as <code>n!</code>, is such an example:</p> <pre><code>n! = { n * (n-1)!    if n &gt; 1\n     { 1             otherwise\n</code></pre> <p>One interesting example of recursion that arises in computer science is called the binary search algorithm. Given a sorted Array, the binary search finds the position of a target value without having to inspect the whole collection. In the example below, <code>bsearch()</code> is a recursive function:</p> <pre><code>object \"Binary Search\"\n{\n    // Given an array sorted in ascending order, find()\n    // finds the position of the target value in the array.\n    // It returns its index, or -1 if the target is not found.\n    fun find(array, value)\n    {\n        return bsearch(array, value, 0, array.length - 1);\n    }\n\n    // Performs a binary search in array[start..end]\n    fun bsearch(array, value, start, end)\n    {\n        // get the middle point\n        mid = start + Math.floor((end - start) / 2);\n\n        // compare the middle point to the target value\n        if(start &gt; end)\n            return -1; // target not found\n        else if(value == array[mid])\n            return mid; // found the target value\n        else if(value &lt; array[mid])\n            return bsearch(array, value, start, mid - 1);\n        else\n            return bsearch(array, value, mid + 1, end);\n    }\n}\n</code></pre> <p>Recursive functions must have at least one base case. A base case is a scenario that does not need recursion to solve the problem. In the factorial example, the base case is <code>n &lt;= 1</code> (the factorial is 1). In the binary search example, the base case is <code>start &gt; end</code>, meaning that the array is empty and the target value cannot be found, or <code>value == array[mid]</code>, meaning that the target value has been found at <code>mid</code>.</p> <p>How to understand recursion</p> <p>A sage once said: \"to understand recursion, you must first understand recursion\".</p>"},{"location":"tutorials/functions/#constructors-and-destructors","title":"Constructors and destructors","text":"<p>In SurgeScript, constructors and destructors are special functions that are called whenever objects are created and destroyed, respectively. It's not mandatory to define them, but it may be useful to do so (you may want to set up things in your constructors, for example). Neither may receive any arguments (to set up objects with parameters, take a look at chaining).</p> <p>Let's take our <code>Calculator</code> again. In the following example, <code>constructor()</code> is called automatically whenever a <code>Calculator</code> object is created. Likewise, <code>destructor()</code> is called automatically when the object is destroyed.</p> <pre><code>object \"Calculator\"\n{\n    fun constructor()\n    {\n        Console.print(\"Creating a Calculator...\");\n    }\n\n    fun destructor()\n    {\n        Console.print(\"Destroying a Calculator...\");\n    }\n\n    fun greet()\n    {\n        Console.print(\"Hello! I am a Calculator!\");\n    }\n\n    fun sum(a, b)\n    {\n        return a + b;\n    }\n}\n</code></pre> <p>Now, if we run the <code>Application</code> of the previous section without any modification, the output of the program will be:</p> <pre><code>Creating a Calculator...\nHello! I am a Calculator!\n12\nDestroying a Calculator...\n</code></pre> <p>Note that, for any object, its <code>constructor()</code> runs before its main state.</p>"},{"location":"tutorials/hello/","title":"Hello, World!","text":"<p>SurgeScript creates automatically an object called Application. That object is defined by the user. Let's see how we can use that to make a simple program:</p> <pre><code>object \"Application\"\n{\n    state \"main\"\n    {\n        Console.print(\"Hello, world!\");\n        Application.exit();\n    }\n}\n</code></pre> <p>In SurgeScript, each object defines a state machine (more on that later). The initial state is called main. In the code just presented, we display a Hello, world! message and then exit the app.</p> <p>Now let's test your scripts.</p>"},{"location":"tutorials/loops/","title":"Loops","text":""},{"location":"tutorials/loops/#while-loops","title":"While loops","text":"<p>In a while loop, you execute a certain block of code while a condition is true. The syntax is as follows:</p> <pre><code>while(condition) {\n    // block of code\n    // to be executed\n}\n</code></pre> <p>The example below counts from 1 to 10:</p> <pre><code>i = 1;\nwhile(i &lt;= 10) {\n    Console.print(i);\n    i = i + 1;\n}\n</code></pre> <p>The following example prints nothing. The while loop is skipped because the condition is initially false:</p> <pre><code>i = 20;\nwhile(i &lt;= 10) { // this condition is false\n    Console.print(i);\n    i = i + 1;\n}\n</code></pre>"},{"location":"tutorials/loops/#do-while-loops","title":"Do-while loops","text":"<p>Do-while loops are similar to while loops, except that the block of code is executed at least once, unconditionally. It is repeated while a condition is true. Syntax:</p> <pre><code>do {\n    // block of code\n    // to be executed\n} while(condition);\n</code></pre> <p>The example below counts from 1 to 10:</p> <pre><code>i = 1;\ndo {\n    Console.print(i);\n    i = i + 1;\n} while(i &lt;= 10);\n</code></pre> <p>The following example prints the number 20. Since the condition is false, the block of code is executed only once:</p> <pre><code>i = 20;\ndo {\n    Console.print(i);\n    i = i + 1;\n} while(i &lt;= 10); // this condition is false\n</code></pre> <p>Do-while loops are available since SurgeScript 0.6.0.</p>"},{"location":"tutorials/loops/#for-loops","title":"For loops","text":"<p>A for loop is a more controlled repetition structure compared to a while loop. For loops support an initialization command, a condition and an increment command. The syntax is as follows:</p> <pre><code>for(initialization; condition; increment) {\n    // block of code\n    // to be executed\n}\n</code></pre> <p>The for loop above is equivalent to:</p> <pre><code>initialization;\nwhile(condition) {\n    // block of code\n    // to be executed\n\n    increment;\n}\n</code></pre> <p>The example below counts from 1 to 10:</p> <pre><code>for(i = 1; i &lt;= 10; i++) {\n    Console.print(i);\n}\n</code></pre> <p>Since SurgeScript 0.6.1, the initialization, condition and increment expressions may be empty. Empty initialization and increment expressions do nothing. An empty condition is interpreted as <code>true</code>, meaning that the loop will keep repeating until you break out of it with a <code>break</code> or with a <code>return</code> statement.</p>"},{"location":"tutorials/loops/#foreach","title":"Foreach","text":"<p>Foreach loops are used to iterate throughout iterable collections (such as Arrays and Dictionaries). Basically: for each element <code>x</code> in the iterable collection, do something with <code>x</code>. The syntax is as follows:</p> <pre><code>foreach(element in collection) {\n    // block of code\n    // to be executed\n}\n</code></pre> <p>The example below counts from 1 to 10:</p> <pre><code>collection = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nforeach(x in collection) {\n    Console.print(x);\n}\n</code></pre> <p>The example below iterates over a Dictionary:</p> <pre><code>dictionary = { \"a\": 1, \"b\": 2, \"c\": 3 };\nforeach(entry in dictionary) {\n    Console.print(entry.key);\n    Console.print(entry.value);\n}\n</code></pre> <p>Implementing your own iterable collections</p> <p>The foreach loop can be used with any iterable collections, not only Arrays and Dictionaries. You may even implement your own!</p>"},{"location":"tutorials/loops/#break","title":"Break","text":"<p>Use the <code>break</code> statement to terminate the innermost enclosing loop. The statement following the loop will be executed immediately afterwards. Example:</p> <pre><code>i = 0;\n\nwhile(i &lt; 10) {\n    if(i == 5)\n        break; // break out of the loop when i is equal to 5\n\n    i = i + 1;\n}\n\n// This line will be executed immediately after breaking out of the loop\nConsole.print(i); // Output: 5\n</code></pre>"},{"location":"tutorials/loops/#continue","title":"Continue","text":"<p>Use the <code>continue</code> statement to terminate the current iteration of the innermost enclosing loop and to start the next iteration. The exact behavior of <code>continue</code> depends on the type of the loop:</p> <ul> <li>In <code>while</code> and <code>do-while</code> loops, <code>continue</code> jumps to the loop condition. The loop condition is reevaluated.</li> <li>In a <code>for</code> loop, <code>continue</code> jumps to the increment expression. Next, the loop condition is reevaluated.</li> <li>In a <code>foreach</code> loop, <code>continue</code> jumps to the start of the next iteration.</li> </ul> <p>Example:</p> <pre><code>i = 0;\n\nwhile(i &lt; 5) {\n    i = i + 1;\n\n    if(i == 3)\n        continue; // jump back to the condition i &lt; 5 when i is equal to 3\n\n    Console.print(i);\n}\n\n// Expected output: 1 2 4 5\n// Number 3 was skipped\n</code></pre> <p>A similar example with a <code>for</code> loop:</p> <pre><code>for(i = 1; i &lt;= 5; i++) {\n    if(i == 3)\n        continue; // jump to i++ when i is equal to 3\n\n    Console.print(i);\n}\n</code></pre> <p>An analogous example with a <code>foreach</code> loop:</p> <pre><code>foreach(i in [1,2,3,4,5]) {\n    if(i == 3)\n        continue; // jump to the next iteration when i is equal to 3\n\n    Console.print(i);\n}\n</code></pre>"},{"location":"tutorials/object_tree/","title":"Object tree","text":""},{"location":"tutorials/object_tree/#introduction","title":"Introduction","text":"<p>In SurgeScript, objects have a hierarchical relationship. Suppose that object P spawns (or instantiates) object C. We say that object P is the parent of C. Similarly, object C is a child of P.</p> <p>An object may spawn many children. However, all objects have only one parent. This relationship between objects forms a hierarchy (a tree). The Figure below shows an example:</p> <p></p> <p>In this example, Level is the parent of GameItem1 and GameItem2. Components A and B are children of GameItem1, but not of GameItem2. Level has two children and GameItem2 has zero. Finally, GameItem1, GameItem2, Component A and Component B are all descendants of Level.</p> <p>In SurgeScript, the root of the hierarchy is a predefined object called <code>System</code>. Its parent is itself. All other objects are descendants of <code>System</code>.</p>"},{"location":"tutorials/object_tree/#spawning-objects","title":"Spawning objects","text":"<p>You can use <code>spawn()</code> to instantiate an object. Example:</p> <pre><code>object \"Parent\"\n{\n    child = spawn(\"Child\");\n\n    state \"main\"\n    {\n    }\n}\n\nobject \"Child\"\n{\n    state \"main\"\n    {\n    }\n}\n</code></pre> <p>Function <code>spawn()</code> may be invoked on objects other than the caller. In this case, the caller won't be the parent of the newly created object:</p> <pre><code>object \"Parent\"\n{\n    child = spawn(\"Child\");\n    grandChild = child.spawn(\"Child\");\n\n    state \"main\"\n    {\n    }\n}\n</code></pre> <p>Automatic Garbage Collection</p> <p>When you spawn an object, make sure you store a reference to it somewhere.</p> <p>If an object cannot be reached from the root (no reachable object has any references to it), it will be automatically destroyed by SurgeScript's built-in garbage collector.</p>"},{"location":"tutorials/object_tree/#destroying-objects","title":"Destroying objects","text":"<p>Objects can be destroyed manually by calling <code>destroy()</code>. Whenever an object is destroyed, its children are destroyed as well.</p> <pre><code>object \"Foo\"\n{\n    state \"main\"\n    {\n        Console.print(\"This object does nothing.\");\n        destroy();\n    }\n}\n</code></pre>"},{"location":"tutorials/object_tree/#traversing-the-hierarchy","title":"Traversing the hierarchy","text":"<p>Relevant data about the object hierarchy can be obtained using the following properties and functions (find out more about them at the Object reference):</p> Function / property Description <code>obj.parent</code> The parent object <code>obj.child(name)</code> Gets a child object named <code>name</code> <code>obj.findObject(name)</code> Finds a descendant named <code>name</code> <code>obj.__childCount</code> Number of immediate children <p>Example:</p> <pre><code>object \"Parent\"\n{\n    child = spawn(\"Child\");\n    otherChild = spawn(\"Child\");\n\n    state \"main\"\n    {\n        Console.print(\"This object has \" + this.__childCount + \" children.\");\n        destroy();\n    }\n}\n</code></pre> <p>The output is as follows:</p> <pre><code>This object has 2 children.\n</code></pre>"},{"location":"tutorials/objects/","title":"Introduction to objects","text":""},{"location":"tutorials/objects/#introduction","title":"Introduction","text":"<p>In SurgeScript, objects are units of code and data. Each object defines a finite state machine, a mathematical construct used to describe the behavior of in-game objects.</p> <p>Did you know?</p> <p>Games implement what is called a game loop. In SurgeScript, the game loop is defined implicitly via state machines. State machines are one of the key features of SurgeScript.</p>"},{"location":"tutorials/objects/#state-machines","title":"State machines","text":"<p>A finite state machine is a mathematical abstraction composed of a finite number of states and by transitions between these states. Only one state can be active at any given time (we'll call it the active state). There must be one initial state (i.e., the first one to be active). A transition is a change of the active state that is triggered when a certain condition is met.</p> <p>As a concrete example, suppose that you want to create a door in your game. You, the developer, may open or close the door at will. But what is a door? We have just given informal description of the problem. However, we need to transform it in something more rigorous. Example:</p> <p>A door is an object with two states (see the Figure below):</p> <ul> <li>Opened (initial state)</li> <li>Closed</li> </ul> <p></p> <p>From the Opened state, only one transition is possible: Close. Once the Close transition is called, the door will go to the Closed state. Conversely, from the Closed state, only one transition is available: Open. When the Open transition is executed, the door will return to the Opened state.</p>"},{"location":"tutorials/objects/#objects-in-surgescript","title":"Objects in SurgeScript","text":"<p>In SurgeScript, each object has a name. Objects may have any number of states you'd like. The initial state is always called main. The syntax is as follows:</p> <pre><code>object \"name of the object\"\n{\n    state \"state name\"\n    {\n        // code goes here\n    }\n}\n</code></pre> <p>The following code shows an example of a door that opens and closes (it keep changing states) every 2 seconds:</p> <pre><code>object \"Cosmic Door\"\n{\n    state \"main\"\n    {\n        // the object starts at the main state\n        state = \"opened\"; // go to the opened state\n    }\n\n    state \"opened\"\n    {\n        if(timeout(2)) // if we have been on the opened state for 2+ seconds\n            state = \"closed\"; // go to the closed state\n    }\n\n    state \"closed\"\n    {\n        if(timeout(2))\n            state = \"opened\";\n    }\n}\n</code></pre> <p>Notice how the code just shown defines states and transitions between these states. Each state contains its own code.</p> <p>Note: once a state is active, its code will be repeated at every frame of the application until the state changes or until the object is destroyed.</p>"},{"location":"tutorials/packages/","title":"Packages","text":""},{"location":"tutorials/packages/#introduction","title":"Introduction","text":"<p>Packages are objects that allow you to extend the functionalities of the language. Once declared, they can be imported anywhere in the code. They can also be easily shared with others, so everyone benefits.</p> <p>Available since: SurgeScript 0.5.2</p>"},{"location":"tutorials/packages/#basic-example","title":"Basic example","text":"<p>Suppose you want to extend the language by adding new routines related to string manipulation. These routines will be used frequently throughout your project, and you'd like easy access to them. This makes it perfect for implementing them as a package.</p> <p>We'll define an object called <code>StringUtils</code> with a <code>reverse()</code> function that reverses a string. We make the object a package by annotating it with <code>@Package</code>. Take a look at the example below:</p> <pre><code>// File: stringutils.ss\n\n@Package\nobject \"StringUtils\"\n{\n    fun reverse(str)\n    {\n        buf = \"\";\n        for(i = str.length - 1; i &gt;= 0; i--)\n            buf += str[i];\n        return buf;\n    }\n}\n</code></pre> <p>When you annotate an object definition with <code>@Package</code>, SurgeScript will spawn an instance of such an object before spawning the <code>Application</code>. Additionally, the package object may be imported anywhere with the <code>using</code> keyword:</p> <pre><code>// File: app.ss\nusing StringUtils;\n\nobject \"Application\"\n{\n    state \"main\"\n    {\n        str = StringUtils.reverse(\"alucard\");\n        Console.print(str); // will print \"dracula\"\n        exit();\n    }\n}\n</code></pre> <p>Note: it's recommended not to include any special characters in the name of your packages.</p> <p>Note: before SurgeScript 0.5.4, you would annotate the object with <code>@Plugin</code> instead.</p> <p>In the example above, <code>Application</code> and <code>StringUtils</code> are located in two separate files. If you want to test them using the SurgeScript command line utility, pass both files as parameters:</p> <pre><code>surgescript package.ss app.ss\n</code></pre> <p>Spawning order</p> <p>Although packages are spawned before the Application object, for the time being they are spawned in no particular order. You may not access a package from within the constructor of another package, as of now there is no dependency resolver implemented. Use the main state.</p>"},{"location":"tutorials/packages/#package-example","title":"Package example","text":"<p>Packages may aggregate many code units with different functionalities. This lets you separate your code in coherent, logical units and also helps you to distribute it.</p> <p>Suppose that user Parrot, the owner of ParrotSoft, created SurgeScript utilities related to string manipulation, matrix math and complex numbers. He decided to share his code as a single package called <code>ParrotSoft</code>. Since he implemented getters for each of his utilities, his package provides easy access to all of them. Furthermore, he annotated his package with <code>@Package</code> (but not the individual utilities), so his package can be accessed anywhere.</p> <pre><code>// File: parrotsoft.ss\n\n@Package\nobject \"ParrotSoft\"\n{\n    public readonly Matrices = spawn(\"Parrot Matrices\");\n    public readonly Complex = spawn(\"Parrot Complex\");\n    public readonly StringUtils = spawn(\"Parrot StringUtils\");\n}\n</code></pre> <p>A user of the <code>ParrotSoft</code> package may import Parrot's utilities simply by importing the package. Individual utilities may also be imported. The code below shows an example:</p> <pre><code>using ParrotSoft.Matrices.Matrix2;\nusing ParrotSoft.Complex;\nusing ParrotSoft;\n\nobject \"Application\"\n{\n    state \"main\"\n    {\n        identity = Matrix2([[1, 0], [0, 1]]); // 2x2 matrix\n        z = Complex(2, 3); // 2 + 3i\n        neon = ParrotSoft.StringUtils.reverse(\"noen\");\n        exit();\n    }\n}\n</code></pre> <p>In the example above, writing <code>Complex</code> is equivalent to writing <code>ParrotSoft.Complex</code>, since we imported this utility with <code>using ParrotSoft.Complex</code>. Notice that <code>ParrotSoft</code> implements a getter for <code>Complex</code>. Additionally, <code>ParrotSoft</code> has been annotated with <code>@Package</code>, but <code>Complex</code> has not. This means that the statement <code>using Complex</code> will not yield the expected result. Since <code>Complex</code> is a part of <code>ParrotSoft</code>, it can only be accessed from it. Finally, since we haven't imported <code>StringUtils</code> explicitly, we type <code>ParrotSoft.StringUtils</code> to access it.</p> <p>Pay attention!</p> <p>Combine related packages into one. Don't pollute the global namespace!</p>"},{"location":"tutorials/properties/","title":"Properties","text":""},{"location":"tutorials/properties/#introduction","title":"Introduction","text":"<p>In SurgeScript, object-level variables are private. This means that these variables can only be accessed from the objects that defined them. However, SurgeScript features a syntactic sugar that allows objects to read and/or modify other objects' data in a way that looks like dealing with regular (public) variables. We'll call these \"variables\" properties.</p>"},{"location":"tutorials/properties/#defining-properties","title":"Defining properties","text":"<p>Suppose you have an object called <code>Animal</code> with an object-level variable called <code>sound</code> and a function named <code>speak()</code>:</p> <pre><code>object \"Animal\"\n{\n    sound = \"meow!\";\n\n    fun speak()\n    {\n        Console.print(sound);\n    }\n}\n</code></pre> <p>This object can only speak meow! Let's see:</p> <pre><code>object \"Application\"\n{\n    animal = spawn(\"Animal\");\n\n    state \"main\"\n    {\n        animal.speak();\n    }\n}\n</code></pre> <p>Run this script and you'll see:</p> <pre><code>meow!\nmeow!\nmeow!\nmeow!\n...\n</code></pre> <p>What if an external object could modify the sound of the animal? Trying to access <code>animal.sound</code> externally will trigger an error, unless you add the <code>public</code> specifier to your variable:</p> <pre><code>object \"Animal\"\n{\n    public sound = \"meow!\";\n\n    fun speak()\n    {\n        Console.print(sound);\n    }\n}\n</code></pre> <p>Now, external objects may access (read and write) the <code>sound</code> variable (or property):</p> <pre><code>object \"Application\"\n{\n    animal = spawn(\"Animal\");\n\n    state \"main\"\n    {\n        animal.sound = \"woof!\";\n        animal.speak();\n    }\n}\n</code></pre> <p>Since SurgeScript 0.5.3, you may add the <code>readonly</code> modifier after the <code>public</code> specifier. Doing so disallows the modification of the property by external objects:</p> <pre><code>object \"Animal\"\n{\n    public readonly sound = \"meow!\";\n\n    fun speak()\n    {\n        Console.print(sound);\n    }\n}\n\nobject \"Application\"\n{\n    animal = spawn(\"Animal\");\n\n    state \"main\"\n    {\n        //animal.sound = \"woof!\"; // will trigger an error\n        //Console.print(animal.sound); // this is allowed\n        animal.speak();\n    }\n}\n</code></pre>"},{"location":"tutorials/properties/#using-getters-and-setters","title":"Using getters and setters","text":"<p>In reality, however, there are no public variables in SurgeScript. Behind the scenes, the language defines special functions called getters and setters that will perform the read/write logic for you. Rather than using <code>public</code>, you may want to define the getters and the setters yourself:</p> <pre><code>object \"Animal\"\n{\n    sound = \"meow!\";\n\n    fun speak()\n    {\n        Console.print(sound);\n    }\n\n    fun set_sound(value)\n    {\n        sound = value;\n    }\n\n    fun get_sound()\n    {\n        return sound;\n    }\n}\n</code></pre> <p>This code is semantically the same as setting <code>sound</code> to be <code>public</code>; this is just a bit longer.</p> <p>An advantage of defining getters and setters by yourself is that you control how the data passes through the objects. You may want to validate the data before changing the internal variables of the objects. Example:</p> <pre><code>// lives must not be a negative number\nfun set_lives(value)\n{\n    if(value &gt;= 0)\n        lives = value;\n    else\n        lives = 0;\n}\n</code></pre>"},{"location":"tutorials/selections/","title":"Switch statement","text":""},{"location":"tutorials/selections/#introduction","title":"Introduction","text":"<p>The <code>switch</code> statement evaluates an expression and matches it against a sequence of <code>case</code> clauses. The statements following the matching <code>case</code> clause will be executed. Example:</p> <pre><code>// variable 'name' will be compared to \"Surge\", \"Neon\" and \"Tux\"\n// the full name of the character will be printed to the screen\nswitch(name)\n{\n    case \"Surge\":\n        Console.print(\"Surge the Rabbit\");\n        break;\n\n    case \"Neon\":\n        Console.print(\"Neon the Squirrel\");\n        break;\n\n    case \"Tux\":\n        Console.print(\"Tux the Penguin\");\n        break;\n}\n</code></pre> <p>If no matching <code>case</code> clause is found, then the statements following the <code>default</code> clause, if present, will be executed. Example:</p> <p><pre><code>// we're checking if variable 'amount' is 1, 5, 20 or none of these\n// depending on the amount, we'll print a different message to the screen\nswitch(amount)\n{\n    case 1:\n        Console.print(\"Green rupee\");\n        break;\n\n    case 5:\n        Console.print(\"Blue rupee\");\n        break;\n\n    case 20:\n        Console.print(\"Red rupee\");\n        break;\n\n    default:\n        Console.print(\"Unknown rupee\");\n        break;\n}\n</code></pre> If no matching <code>case</code> clause is found and no <code>default</code> clause is present either, then all <code>case</code> sections will be skipped and the first statement following the <code>switch</code> block will be executed.</p> <p>There must not be more than one <code>default</code> clause per <code>switch</code> block. It's usual practice to write the <code>default</code> section at the end of the <code>switch</code> block, though it's not a requirement.</p> <p>Note: <code>switch</code> statements are supported since SurgeScript 0.6.1.</p>"},{"location":"tutorials/selections/#breaking-out","title":"Breaking out","text":"<p>In the above examples, there is a <code>break</code> statement at the end of each section. Use the <code>break</code> statement to break out of the body of the <code>switch</code> statement. Execution will continue at the first statement following the <code>switch</code> block. Example:</p> <pre><code>one = 1;\n\nswitch(one)\n{\n    case 1:\n        Console.print(\"Number one\");\n        break;\n\n    default:\n        Console.print(\"This line will never be executed\");\n        break;\n}\n\nConsole.print(\"We're done!\");\n\n//\n// Output:\n//\n// Number one\n// We're done!\n//\n</code></pre> <p>Tip</p> <p><code>break</code> statements placed before the end of a section have the same effect.</p>"},{"location":"tutorials/selections/#multiple-matching","title":"Multiple matching","text":"<p>Sometimes it's useful to compare an expression to multiple values and run the same code if there is a match to any of these values. This may be done by writing multiple <code>case</code> clauses, one immediately after the other, as in the example below:</p> <pre><code>// let's check if amount is 1, 5, 20 or none of these\nswitch(amount)\n{\n    case 1:\n    case 5:\n    case 20:\n        Console.print(\"This is a green, a blue or a red rupee.\");\n        break;\n\n    default:\n        Console.print(\"This is an unknown rupee.\");\n        break;\n}\n</code></pre> <p>Empty sections</p> <p>Any <code>case</code> clause immediately followed by another <code>case</code> clause defines an empty section. In the above example, <code>case 1:</code> and <code>case 5:</code> define empty sections. It's not useful to have a <code>case</code> clause immediately followed by a <code>default</code> clause or vice-versa, though these too define empty sections.</p>"},{"location":"tutorials/selections/#additional-remarks","title":"Additional remarks","text":"<p>In a <code>switch</code> statement, the <code>case</code> keyword must be followed by a constant expression<sup>1</sup>, typically a number or a string literal. No two <code>case</code> expressions may evaluate to the same value.</p> <p>The expression of the <code>switch</code> statement is first evaluated and then compared to the expressions of the <code>case</code> clauses. There is a match between these expressions if they are evaluated to the same value, in a strong equality sense. This means that both the content and the type of the evaluated expressions must be the same for a match to occur.</p> <p>In SurgeScript, all <code>case</code> and <code>default</code> sections must be terminated by a <code>break</code> or by a <code>return</code> statement, except when they are empty. While other languages such as C/C++ do not have this requirement, forgetting to terminate a section is often a source of bugs due to the fallthrough behavior. In SurgeScript, the fallthrough behavior is disallowed, except in empty sections.</p> <ol> <li> <p>As of SurgeScript 0.6.1, only literals are supported.\u00a0\u21a9</p> </li> </ol>"},{"location":"tutorials/tags/","title":"Tags","text":"<p>You may tag objects with as many tags as you want. Tags are a way of attributing categories to objects.</p>"},{"location":"tutorials/tags/#syntax","title":"Syntax","text":"<p>Tags should be placed right after the object name. Example:</p> <pre><code>object \"Horse\" is \"animal\", \"vehicle\"\n{\n    state \"main\"\n    {\n    }\n}\n\nobject \"Cat\" is \"animal\"\n{\n    state \"main\"\n    {\n    }\n}\n\nobject \"Car\" is \"vehicle\"\n{\n    state \"main\"\n    {\n    }\n}\n</code></pre>"},{"location":"tutorials/tags/#using-tags","title":"Using tags","text":"<p>You may check if an object has a particular tag with the <code>hasTag()</code> function (see the Object reference for more details):</p> <pre><code>object \"Application\"\n{\n    horse = spawn(\"Horse\");\n    cat = spawn(\"Cat\");\n    car = spawn(\"Car\");\n\n    state \"main\"\n    {\n        // Horse is both an animal and a vehicle\n        Console.print(horse.hasTag(\"animal\")); // true\n        Console.print(horse.hasTag(\"vehicle\")); // true\n\n        // Cat is an animal, but not a vehicle\n        Console.print(cat.hasTag(\"animal\")); // true\n        Console.print(cat.hasTag(\"vehicle\")); // false\n\n        // Car is a vehicle, but not an animal\n        Console.print(car.hasTag(\"animal\")); // false\n        Console.print(car.hasTag(\"vehicle\")); // true\n    }\n}\n</code></pre>"},{"location":"tutorials/testing/","title":"Testing your scripts","text":"<p>There are two main ways to test your scripts:</p> <ul> <li>using the Open Surge game engine;</li> <li>using the SurgeScript standalone runtime (i.e., the version without a game engine).</li> </ul>"},{"location":"tutorials/testing/#using-open-surge","title":"Using Open Surge","text":"<p>To test a script in Open Surge, place it on the scripts/ folder and start the engine. Your test script must include an object called Application. Make sure to remove the script after you're done with the testing.</p> <p>As an example, save the following script to scripts/hello.ss and start the engine: <pre><code>// hello.ss: test script\n// Please remove this file after you're done\nobject \"Application\"\n{\n    state \"main\"\n    {\n        Console.print(\"Hello, world!\");\n        state = \"done\";\n    }\n\n    state \"done\"\n    {\n    }\n}\n</code></pre></p> <p>You should see the Hello, world! message as a result.</p> <p>Linux users: when using a system-wide installation, you may place your scripts on ~/.local/share/opensurge/scripts/ (i.e., $XDG_DATA_HOME/opensurge/scripts/).</p> <p>Ready to proceed? Let's go to Introduction to objects!</p>"},{"location":"tutorials/testing/#using-the-standalone-version","title":"Using the standalone version","text":"<p>If you've downloaded the standalone version of the language:</p> <ul> <li>First of all, save the following script to a file named hello.ss. For testing purposes, you may place the file on the same directory as the surgescript executable. <pre><code>// hello.ss: test script\nobject \"Application\"\n{\n    state \"main\"\n    {\n        Console.print(\"Hello, world!\");\n        Application.exit();\n    }\n}\n</code></pre></li> <li>Then, open up a Terminal and type: <pre><code>cd /path/to/surgescript\n./surgescript hello.ss\n</code></pre></li> <li>If you're using Microsoft Windows, open up a Command Prompt and type: <pre><code>cd C:\\path\\to\\surgescript\nsurgescript.exe hello.ss\n</code></pre></li> <li>You should see the output of the script as a result: <pre><code>Hello, world!\n</code></pre></li> </ul> <p>To begin our learning adventure, let's go to Introduction to objects.</p>"},{"location":"tutorials/variables/","title":"Variables","text":""},{"location":"tutorials/variables/#introduction","title":"Introduction","text":"<p>Variables are used to store data. SurgeScript features five basic types: number, string, boolean, null and object. Variables can also point to more complex data structures (such as arrays and dictionaries), but these are always objects.</p>"},{"location":"tutorials/variables/#types","title":"Types","text":""},{"location":"tutorials/variables/#basic-types","title":"Basic types","text":"Type Description Examples Number A floating-point number <code>1</code>, <code>2</code>, <code>-3</code>, <code>3.14159</code> String Some text <code>\"Hello, world!\"</code>, <code>'single-quoted'</code> Boolean True or false <code>true</code>, <code>false</code> Object Reference to an object <code>Application</code>, <code>this</code>, <code>[ ]</code> Null An empty value <code>null</code> <p>As an example, the script below features an object with 3 variables that may be accessed throughout the whole object:</p> <pre><code>object \"Application\"\n{\n    name = \"Surge the Rabbit\";\n    age = 23;\n    underage = false;\n\n    state \"main\"\n    {\n        Console.print(name); // Surge the Rabbit\n        Console.print(age); // 23\n    }\n}\n</code></pre>"},{"location":"tutorials/variables/#abstract-types","title":"Abstract types","text":""},{"location":"tutorials/variables/#arrays","title":"Arrays","text":"<p>Arrays are collections of values that you may access using a zero-based index. Example:</p> <pre><code>object \"Application\"\n{\n    // The 'characters' array holds 3 strings\n    characters = [ \"Surge\", \"Neon\", \"Charge\" ];\n\n    state \"main\"\n    {\n        // who are the characters?\n        Console.print(\"The characters are:\");\n        Console.print(characters[0]); // will print Surge\n        Console.print(characters[1]); // will print Neon\n        Console.print(characters[2]); // will print Charge\n\n        // how many characters?\n        Console.print(\"Number of characters:\");\n        Console.print(characters.length); // will print 3\n    }\n}\n</code></pre> <p>Arrays have many interesting properties and operations that you can see in the Language Reference.</p>"},{"location":"tutorials/variables/#dictionaries","title":"Dictionaries","text":"<p>Dictionaries are collections of key-value pairs. In some programming languages, these are known as associative arrays or hash tables. Here's the syntax:</p> <pre><code>object \"Application\"\n{\n    // A dictionary that stores the weight (kg) of each character\n    weight = {\n        \"Surge\": 35,\n        \"Neon\": 30,\n        \"Charge\": 37.5,\n        \"Gimacian\": 70\n    };\n\n    // print the weights\n    state \"main\"\n    {\n        Console.print(\"Surge weighs \" + weight[\"Surge\"] + \" kg.\");\n        Console.print(\"Neon weighs \" + weight[\"Neon\"] + \" kg.\");\n        Console.print(\"Charge weighs \" + weight[\"Charge\"] + \" kg.\");\n        Console.print(\"Gimacian weighs \" + weight[\"Gimacian\"] + \" kg.\");\n    }\n}\n</code></pre> <p>Dictionaries have many interesting properties and operations that you can see in the Language Reference.</p> <p>Caution!</p> <p>Whenever you define an array or a dictionary, you spawn a new object. You are advised to NOT define arrays or dictionaries within states, because the code within the states run continuously. New objects will be created at every frame, not just once.</p> <pre><code>object \"Application\"\n{\n    // arr will be instantiated once the object is created\n    arr = [ 1, 2, 3 ]; // RIGHT!\n\n    state \"main\"\n    {\n        // err is instantiated at every frame of the application,\n        // thus memory is wasted with duplicate objects\n        err = [ \"don't\", \"do\", \"this\" ]; // AVOID!\n    }\n}\n</code></pre>"},{"location":"tutorials/variables/#casting","title":"Casting","text":"<p>You can use type-casting to change the type of values from number to string, from string to number, from boolean to string and so on. Casting values is as simple as calling <code>Number(value)</code>, <code>String(value)</code> or <code>Boolean(value)</code>. Example:</p> <pre><code>// Convert string to number\nstr = \"2\";\nval = Number(str); // val is 2\n\n// Convert number to string\nval = 123;\nstr = String(val); // str is \"123\"\n</code></pre> <p>When converting an object to a string, SurgeScript will implicitly call <code>object.toString()</code>.</p>"},{"location":"tutorials/variables/#scoping","title":"Scoping","text":"<p>Variables that are defined before any state or function are object-level variables. They can be accessed throughout the whole object. On the other hand, variables used exclusively inside states or functions are local variables. This means that their accessibility and lifespan is restricted to their own locus of code.</p> <pre><code>object \"Scope Test\"\n{\n    name = \"Surge the Rabbit\"; // object-level variable\n\n    state \"main\"\n    {\n        weight = 35; // local variable\n        state = \"print-data\"; // change the state\n    }\n\n    state \"print-data\"\n    {\n        Console.print(name); // Surge the Rabbit\n        Console.print(weight); // ERROR: weight is not defined\n    }\n}\n</code></pre> <p>Furthermore, object-level variables may only be accessed within the object. Other objects may not read or write the variables directly (in other words, variables are private to the objects). You need to define functions or getters and setters to accomplish that.</p>"}]}